// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.0
// source: workflow.proto

package workflowclient

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Workflow_ProcDefSave_FullMethodName                     = "/workflowclient.Workflow/ProcDefSave"
	Workflow_ProcDefDelete_FullMethodName                   = "/workflowclient.Workflow/ProcDefDelete"
	Workflow_ProcDefUpdate_FullMethodName                   = "/workflowclient.Workflow/ProcDefUpdate"
	Workflow_ProcDefFindOne_FullMethodName                  = "/workflowclient.Workflow/ProcDefFindOne"
	Workflow_ProcDefList_FullMethodName                     = "/workflowclient.Workflow/ProcDefList"
	Workflow_HistProcDefList_FullMethodName                 = "/workflowclient.Workflow/HistProcDefList"
	Workflow_ProcInstStart_FullMethodName                   = "/workflowclient.Workflow/ProcInstStart"
	Workflow_ProcInstDelete_FullMethodName                  = "/workflowclient.Workflow/ProcInstDelete"
	Workflow_ProcInstRevoke_FullMethodName                  = "/workflowclient.Workflow/ProcInstRevoke"
	Workflow_ProcInstUpdate_FullMethodName                  = "/workflowclient.Workflow/ProcInstUpdate"
	Workflow_ProcInstFindOne_FullMethodName                 = "/workflowclient.Workflow/ProcInstFindOne"
	Workflow_ProcInstList_FullMethodName                    = "/workflowclient.Workflow/ProcInstList"
	Workflow_ProcExecutionList_FullMethodName               = "/workflowclient.Workflow/ProcExecutionList"
	Workflow_HistProcExecutionList_FullMethodName           = "/workflowclient.Workflow/HistProcExecutionList"
	Workflow_TaskPass_FullMethodName                        = "/workflowclient.Workflow/TaskPass"
	Workflow_TaskPassDirectlyToWhoRejectedMe_FullMethodName = "/workflowclient.Workflow/TaskPassDirectlyToWhoRejectedMe"
	Workflow_TaskReject_FullMethodName                      = "/workflowclient.Workflow/TaskReject"
	Workflow_TaskFreeRejectToUpstreamNode_FullMethodName    = "/workflowclient.Workflow/TaskFreeRejectToUpstreamNode"
	Workflow_TaskTransfer_FullMethodName                    = "/workflowclient.Workflow/TaskTransfer"
	Workflow_TaskToDoList_FullMethodName                    = "/workflowclient.Workflow/TaskToDoList"
	Workflow_TaskFinishedList_FullMethodName                = "/workflowclient.Workflow/TaskFinishedList"
	Workflow_TaskUpstreamNodeList_FullMethodName            = "/workflowclient.Workflow/TaskUpstreamNodeList"
	Workflow_TaskWhatCanIDo_FullMethodName                  = "/workflowclient.Workflow/TaskWhatCanIDo"
	Workflow_TaskInfo_FullMethodName                        = "/workflowclient.Workflow/TaskInfo"
)

// WorkflowClient is the client API for Workflow service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkflowClient interface {
	// 流程定义
	ProcDefSave(ctx context.Context, in *ProcDefSaveReq, opts ...grpc.CallOption) (*CommonResp, error)
	ProcDefDelete(ctx context.Context, in *ProcDefDeleteReq, opts ...grpc.CallOption) (*CommonResp, error)
	ProcDefUpdate(ctx context.Context, in *ProcDefUpdateReq, opts ...grpc.CallOption) (*CommonResp, error)
	ProcDefFindOne(ctx context.Context, in *ProcDefFindOneReq, opts ...grpc.CallOption) (*ProcDefFindOneResp, error)
	ProcDefList(ctx context.Context, in *ProcDefListReq, opts ...grpc.CallOption) (*ProcDefListResp, error)
	// 流程定义历史
	HistProcDefList(ctx context.Context, in *HistProcDefListReq, opts ...grpc.CallOption) (*HistProcDefListResp, error)
	// 流程实例
	ProcInstStart(ctx context.Context, in *ProcInstStartReq, opts ...grpc.CallOption) (*CommonResp, error)
	ProcInstDelete(ctx context.Context, in *ProcInstDeleteReq, opts ...grpc.CallOption) (*CommonResp, error)
	ProcInstRevoke(ctx context.Context, in *ProcInstRevokeReq, opts ...grpc.CallOption) (*CommonResp, error)
	ProcInstUpdate(ctx context.Context, in *ProcInstUpdateReq, opts ...grpc.CallOption) (*CommonResp, error)
	ProcInstFindOne(ctx context.Context, in *ProcInstFindOneReq, opts ...grpc.CallOption) (*ProcInstFindOneResp, error)
	ProcInstList(ctx context.Context, in *ProcInstListReq, opts ...grpc.CallOption) (*ProcInstListResp, error)
	// 执行任务
	ProcExecutionList(ctx context.Context, in *ProcExecutionListReq, opts ...grpc.CallOption) (*ProcExecutionListResp, error)
	// 执行任务历史
	HistProcExecutionList(ctx context.Context, in *HistProcExecutionListReq, opts ...grpc.CallOption) (*HistProcExecutionListResp, error)
	// 任务通过
	TaskPass(ctx context.Context, in *TaskPassReq, opts ...grpc.CallOption) (*CommonResp, error)
	// 任务通过后流程直接返回到上一个驳回我的节点
	TaskPassDirectlyToWhoRejectedMe(ctx context.Context, in *TaskPassDirectlyToWhoRejectedMeReq, opts ...grpc.CallOption) (*CommonResp, error)
	// 任务驳回
	TaskReject(ctx context.Context, in *TaskRejectReq, opts ...grpc.CallOption) (*CommonResp, error)
	// 自由任务驳回
	TaskFreeRejectToUpstreamNode(ctx context.Context, in *TaskFreeRejectToUpstreamNodeReq, opts ...grpc.CallOption) (*CommonResp, error)
	// 将任务转交给他人处理
	TaskTransfer(ctx context.Context, in *TaskTransferReq, opts ...grpc.CallOption) (*CommonResp, error)
	// 获取待办任务
	TaskToDoList(ctx context.Context, in *TaskToDoListReq, opts ...grpc.CallOption) (*TaskToDoListResp, error)
	// 获取已办任务
	TaskFinishedList(ctx context.Context, in *TaskFinishedListReq, opts ...grpc.CallOption) (*TaskFinishedListResp, error)
	// 获取本任务所在节点的所有上游节点
	TaskUpstreamNodeList(ctx context.Context, in *TaskUpstreamNodeListReq, opts ...grpc.CallOption) (*TaskUpstreamNodeListResp, error)
	// 当前任务可以执行哪些操作
	TaskWhatCanIDo(ctx context.Context, in *TaskWhatCanIDoReq, opts ...grpc.CallOption) (*TaskWhatCanIDoResp, error)
	// 任务信息
	TaskInfo(ctx context.Context, in *TaskInfoReq, opts ...grpc.CallOption) (*TaskInfoResp, error)
}

type workflowClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkflowClient(cc grpc.ClientConnInterface) WorkflowClient {
	return &workflowClient{cc}
}

func (c *workflowClient) ProcDefSave(ctx context.Context, in *ProcDefSaveReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, Workflow_ProcDefSave_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowClient) ProcDefDelete(ctx context.Context, in *ProcDefDeleteReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, Workflow_ProcDefDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowClient) ProcDefUpdate(ctx context.Context, in *ProcDefUpdateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, Workflow_ProcDefUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowClient) ProcDefFindOne(ctx context.Context, in *ProcDefFindOneReq, opts ...grpc.CallOption) (*ProcDefFindOneResp, error) {
	out := new(ProcDefFindOneResp)
	err := c.cc.Invoke(ctx, Workflow_ProcDefFindOne_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowClient) ProcDefList(ctx context.Context, in *ProcDefListReq, opts ...grpc.CallOption) (*ProcDefListResp, error) {
	out := new(ProcDefListResp)
	err := c.cc.Invoke(ctx, Workflow_ProcDefList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowClient) HistProcDefList(ctx context.Context, in *HistProcDefListReq, opts ...grpc.CallOption) (*HistProcDefListResp, error) {
	out := new(HistProcDefListResp)
	err := c.cc.Invoke(ctx, Workflow_HistProcDefList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowClient) ProcInstStart(ctx context.Context, in *ProcInstStartReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, Workflow_ProcInstStart_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowClient) ProcInstDelete(ctx context.Context, in *ProcInstDeleteReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, Workflow_ProcInstDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowClient) ProcInstRevoke(ctx context.Context, in *ProcInstRevokeReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, Workflow_ProcInstRevoke_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowClient) ProcInstUpdate(ctx context.Context, in *ProcInstUpdateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, Workflow_ProcInstUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowClient) ProcInstFindOne(ctx context.Context, in *ProcInstFindOneReq, opts ...grpc.CallOption) (*ProcInstFindOneResp, error) {
	out := new(ProcInstFindOneResp)
	err := c.cc.Invoke(ctx, Workflow_ProcInstFindOne_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowClient) ProcInstList(ctx context.Context, in *ProcInstListReq, opts ...grpc.CallOption) (*ProcInstListResp, error) {
	out := new(ProcInstListResp)
	err := c.cc.Invoke(ctx, Workflow_ProcInstList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowClient) ProcExecutionList(ctx context.Context, in *ProcExecutionListReq, opts ...grpc.CallOption) (*ProcExecutionListResp, error) {
	out := new(ProcExecutionListResp)
	err := c.cc.Invoke(ctx, Workflow_ProcExecutionList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowClient) HistProcExecutionList(ctx context.Context, in *HistProcExecutionListReq, opts ...grpc.CallOption) (*HistProcExecutionListResp, error) {
	out := new(HistProcExecutionListResp)
	err := c.cc.Invoke(ctx, Workflow_HistProcExecutionList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowClient) TaskPass(ctx context.Context, in *TaskPassReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, Workflow_TaskPass_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowClient) TaskPassDirectlyToWhoRejectedMe(ctx context.Context, in *TaskPassDirectlyToWhoRejectedMeReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, Workflow_TaskPassDirectlyToWhoRejectedMe_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowClient) TaskReject(ctx context.Context, in *TaskRejectReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, Workflow_TaskReject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowClient) TaskFreeRejectToUpstreamNode(ctx context.Context, in *TaskFreeRejectToUpstreamNodeReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, Workflow_TaskFreeRejectToUpstreamNode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowClient) TaskTransfer(ctx context.Context, in *TaskTransferReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, Workflow_TaskTransfer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowClient) TaskToDoList(ctx context.Context, in *TaskToDoListReq, opts ...grpc.CallOption) (*TaskToDoListResp, error) {
	out := new(TaskToDoListResp)
	err := c.cc.Invoke(ctx, Workflow_TaskToDoList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowClient) TaskFinishedList(ctx context.Context, in *TaskFinishedListReq, opts ...grpc.CallOption) (*TaskFinishedListResp, error) {
	out := new(TaskFinishedListResp)
	err := c.cc.Invoke(ctx, Workflow_TaskFinishedList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowClient) TaskUpstreamNodeList(ctx context.Context, in *TaskUpstreamNodeListReq, opts ...grpc.CallOption) (*TaskUpstreamNodeListResp, error) {
	out := new(TaskUpstreamNodeListResp)
	err := c.cc.Invoke(ctx, Workflow_TaskUpstreamNodeList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowClient) TaskWhatCanIDo(ctx context.Context, in *TaskWhatCanIDoReq, opts ...grpc.CallOption) (*TaskWhatCanIDoResp, error) {
	out := new(TaskWhatCanIDoResp)
	err := c.cc.Invoke(ctx, Workflow_TaskWhatCanIDo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowClient) TaskInfo(ctx context.Context, in *TaskInfoReq, opts ...grpc.CallOption) (*TaskInfoResp, error) {
	out := new(TaskInfoResp)
	err := c.cc.Invoke(ctx, Workflow_TaskInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkflowServer is the server API for Workflow service.
// All implementations must embed UnimplementedWorkflowServer
// for forward compatibility
type WorkflowServer interface {
	// 流程定义
	ProcDefSave(context.Context, *ProcDefSaveReq) (*CommonResp, error)
	ProcDefDelete(context.Context, *ProcDefDeleteReq) (*CommonResp, error)
	ProcDefUpdate(context.Context, *ProcDefUpdateReq) (*CommonResp, error)
	ProcDefFindOne(context.Context, *ProcDefFindOneReq) (*ProcDefFindOneResp, error)
	ProcDefList(context.Context, *ProcDefListReq) (*ProcDefListResp, error)
	// 流程定义历史
	HistProcDefList(context.Context, *HistProcDefListReq) (*HistProcDefListResp, error)
	// 流程实例
	ProcInstStart(context.Context, *ProcInstStartReq) (*CommonResp, error)
	ProcInstDelete(context.Context, *ProcInstDeleteReq) (*CommonResp, error)
	ProcInstRevoke(context.Context, *ProcInstRevokeReq) (*CommonResp, error)
	ProcInstUpdate(context.Context, *ProcInstUpdateReq) (*CommonResp, error)
	ProcInstFindOne(context.Context, *ProcInstFindOneReq) (*ProcInstFindOneResp, error)
	ProcInstList(context.Context, *ProcInstListReq) (*ProcInstListResp, error)
	// 执行任务
	ProcExecutionList(context.Context, *ProcExecutionListReq) (*ProcExecutionListResp, error)
	// 执行任务历史
	HistProcExecutionList(context.Context, *HistProcExecutionListReq) (*HistProcExecutionListResp, error)
	// 任务通过
	TaskPass(context.Context, *TaskPassReq) (*CommonResp, error)
	// 任务通过后流程直接返回到上一个驳回我的节点
	TaskPassDirectlyToWhoRejectedMe(context.Context, *TaskPassDirectlyToWhoRejectedMeReq) (*CommonResp, error)
	// 任务驳回
	TaskReject(context.Context, *TaskRejectReq) (*CommonResp, error)
	// 自由任务驳回
	TaskFreeRejectToUpstreamNode(context.Context, *TaskFreeRejectToUpstreamNodeReq) (*CommonResp, error)
	// 将任务转交给他人处理
	TaskTransfer(context.Context, *TaskTransferReq) (*CommonResp, error)
	// 获取待办任务
	TaskToDoList(context.Context, *TaskToDoListReq) (*TaskToDoListResp, error)
	// 获取已办任务
	TaskFinishedList(context.Context, *TaskFinishedListReq) (*TaskFinishedListResp, error)
	// 获取本任务所在节点的所有上游节点
	TaskUpstreamNodeList(context.Context, *TaskUpstreamNodeListReq) (*TaskUpstreamNodeListResp, error)
	// 当前任务可以执行哪些操作
	TaskWhatCanIDo(context.Context, *TaskWhatCanIDoReq) (*TaskWhatCanIDoResp, error)
	// 任务信息
	TaskInfo(context.Context, *TaskInfoReq) (*TaskInfoResp, error)
	mustEmbedUnimplementedWorkflowServer()
}

// UnimplementedWorkflowServer must be embedded to have forward compatible implementations.
type UnimplementedWorkflowServer struct {
}

func (UnimplementedWorkflowServer) ProcDefSave(context.Context, *ProcDefSaveReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcDefSave not implemented")
}
func (UnimplementedWorkflowServer) ProcDefDelete(context.Context, *ProcDefDeleteReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcDefDelete not implemented")
}
func (UnimplementedWorkflowServer) ProcDefUpdate(context.Context, *ProcDefUpdateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcDefUpdate not implemented")
}
func (UnimplementedWorkflowServer) ProcDefFindOne(context.Context, *ProcDefFindOneReq) (*ProcDefFindOneResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcDefFindOne not implemented")
}
func (UnimplementedWorkflowServer) ProcDefList(context.Context, *ProcDefListReq) (*ProcDefListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcDefList not implemented")
}
func (UnimplementedWorkflowServer) HistProcDefList(context.Context, *HistProcDefListReq) (*HistProcDefListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HistProcDefList not implemented")
}
func (UnimplementedWorkflowServer) ProcInstStart(context.Context, *ProcInstStartReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcInstStart not implemented")
}
func (UnimplementedWorkflowServer) ProcInstDelete(context.Context, *ProcInstDeleteReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcInstDelete not implemented")
}
func (UnimplementedWorkflowServer) ProcInstRevoke(context.Context, *ProcInstRevokeReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcInstRevoke not implemented")
}
func (UnimplementedWorkflowServer) ProcInstUpdate(context.Context, *ProcInstUpdateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcInstUpdate not implemented")
}
func (UnimplementedWorkflowServer) ProcInstFindOne(context.Context, *ProcInstFindOneReq) (*ProcInstFindOneResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcInstFindOne not implemented")
}
func (UnimplementedWorkflowServer) ProcInstList(context.Context, *ProcInstListReq) (*ProcInstListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcInstList not implemented")
}
func (UnimplementedWorkflowServer) ProcExecutionList(context.Context, *ProcExecutionListReq) (*ProcExecutionListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcExecutionList not implemented")
}
func (UnimplementedWorkflowServer) HistProcExecutionList(context.Context, *HistProcExecutionListReq) (*HistProcExecutionListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HistProcExecutionList not implemented")
}
func (UnimplementedWorkflowServer) TaskPass(context.Context, *TaskPassReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskPass not implemented")
}
func (UnimplementedWorkflowServer) TaskPassDirectlyToWhoRejectedMe(context.Context, *TaskPassDirectlyToWhoRejectedMeReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskPassDirectlyToWhoRejectedMe not implemented")
}
func (UnimplementedWorkflowServer) TaskReject(context.Context, *TaskRejectReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskReject not implemented")
}
func (UnimplementedWorkflowServer) TaskFreeRejectToUpstreamNode(context.Context, *TaskFreeRejectToUpstreamNodeReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskFreeRejectToUpstreamNode not implemented")
}
func (UnimplementedWorkflowServer) TaskTransfer(context.Context, *TaskTransferReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskTransfer not implemented")
}
func (UnimplementedWorkflowServer) TaskToDoList(context.Context, *TaskToDoListReq) (*TaskToDoListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskToDoList not implemented")
}
func (UnimplementedWorkflowServer) TaskFinishedList(context.Context, *TaskFinishedListReq) (*TaskFinishedListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskFinishedList not implemented")
}
func (UnimplementedWorkflowServer) TaskUpstreamNodeList(context.Context, *TaskUpstreamNodeListReq) (*TaskUpstreamNodeListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskUpstreamNodeList not implemented")
}
func (UnimplementedWorkflowServer) TaskWhatCanIDo(context.Context, *TaskWhatCanIDoReq) (*TaskWhatCanIDoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskWhatCanIDo not implemented")
}
func (UnimplementedWorkflowServer) TaskInfo(context.Context, *TaskInfoReq) (*TaskInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskInfo not implemented")
}
func (UnimplementedWorkflowServer) mustEmbedUnimplementedWorkflowServer() {}

// UnsafeWorkflowServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkflowServer will
// result in compilation errors.
type UnsafeWorkflowServer interface {
	mustEmbedUnimplementedWorkflowServer()
}

func RegisterWorkflowServer(s grpc.ServiceRegistrar, srv WorkflowServer) {
	s.RegisterService(&Workflow_ServiceDesc, srv)
}

func _Workflow_ProcDefSave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcDefSaveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).ProcDefSave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Workflow_ProcDefSave_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).ProcDefSave(ctx, req.(*ProcDefSaveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflow_ProcDefDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcDefDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).ProcDefDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Workflow_ProcDefDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).ProcDefDelete(ctx, req.(*ProcDefDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflow_ProcDefUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcDefUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).ProcDefUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Workflow_ProcDefUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).ProcDefUpdate(ctx, req.(*ProcDefUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflow_ProcDefFindOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcDefFindOneReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).ProcDefFindOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Workflow_ProcDefFindOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).ProcDefFindOne(ctx, req.(*ProcDefFindOneReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflow_ProcDefList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcDefListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).ProcDefList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Workflow_ProcDefList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).ProcDefList(ctx, req.(*ProcDefListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflow_HistProcDefList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HistProcDefListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).HistProcDefList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Workflow_HistProcDefList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).HistProcDefList(ctx, req.(*HistProcDefListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflow_ProcInstStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcInstStartReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).ProcInstStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Workflow_ProcInstStart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).ProcInstStart(ctx, req.(*ProcInstStartReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflow_ProcInstDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcInstDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).ProcInstDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Workflow_ProcInstDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).ProcInstDelete(ctx, req.(*ProcInstDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflow_ProcInstRevoke_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcInstRevokeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).ProcInstRevoke(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Workflow_ProcInstRevoke_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).ProcInstRevoke(ctx, req.(*ProcInstRevokeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflow_ProcInstUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcInstUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).ProcInstUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Workflow_ProcInstUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).ProcInstUpdate(ctx, req.(*ProcInstUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflow_ProcInstFindOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcInstFindOneReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).ProcInstFindOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Workflow_ProcInstFindOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).ProcInstFindOne(ctx, req.(*ProcInstFindOneReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflow_ProcInstList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcInstListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).ProcInstList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Workflow_ProcInstList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).ProcInstList(ctx, req.(*ProcInstListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflow_ProcExecutionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcExecutionListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).ProcExecutionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Workflow_ProcExecutionList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).ProcExecutionList(ctx, req.(*ProcExecutionListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflow_HistProcExecutionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HistProcExecutionListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).HistProcExecutionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Workflow_HistProcExecutionList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).HistProcExecutionList(ctx, req.(*HistProcExecutionListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflow_TaskPass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskPassReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).TaskPass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Workflow_TaskPass_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).TaskPass(ctx, req.(*TaskPassReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflow_TaskPassDirectlyToWhoRejectedMe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskPassDirectlyToWhoRejectedMeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).TaskPassDirectlyToWhoRejectedMe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Workflow_TaskPassDirectlyToWhoRejectedMe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).TaskPassDirectlyToWhoRejectedMe(ctx, req.(*TaskPassDirectlyToWhoRejectedMeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflow_TaskReject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskRejectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).TaskReject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Workflow_TaskReject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).TaskReject(ctx, req.(*TaskRejectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflow_TaskFreeRejectToUpstreamNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskFreeRejectToUpstreamNodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).TaskFreeRejectToUpstreamNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Workflow_TaskFreeRejectToUpstreamNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).TaskFreeRejectToUpstreamNode(ctx, req.(*TaskFreeRejectToUpstreamNodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflow_TaskTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskTransferReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).TaskTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Workflow_TaskTransfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).TaskTransfer(ctx, req.(*TaskTransferReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflow_TaskToDoList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskToDoListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).TaskToDoList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Workflow_TaskToDoList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).TaskToDoList(ctx, req.(*TaskToDoListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflow_TaskFinishedList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskFinishedListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).TaskFinishedList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Workflow_TaskFinishedList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).TaskFinishedList(ctx, req.(*TaskFinishedListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflow_TaskUpstreamNodeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskUpstreamNodeListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).TaskUpstreamNodeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Workflow_TaskUpstreamNodeList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).TaskUpstreamNodeList(ctx, req.(*TaskUpstreamNodeListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflow_TaskWhatCanIDo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskWhatCanIDoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).TaskWhatCanIDo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Workflow_TaskWhatCanIDo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).TaskWhatCanIDo(ctx, req.(*TaskWhatCanIDoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workflow_TaskInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServer).TaskInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Workflow_TaskInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServer).TaskInfo(ctx, req.(*TaskInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Workflow_ServiceDesc is the grpc.ServiceDesc for Workflow service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Workflow_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "workflowclient.Workflow",
	HandlerType: (*WorkflowServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcDefSave",
			Handler:    _Workflow_ProcDefSave_Handler,
		},
		{
			MethodName: "ProcDefDelete",
			Handler:    _Workflow_ProcDefDelete_Handler,
		},
		{
			MethodName: "ProcDefUpdate",
			Handler:    _Workflow_ProcDefUpdate_Handler,
		},
		{
			MethodName: "ProcDefFindOne",
			Handler:    _Workflow_ProcDefFindOne_Handler,
		},
		{
			MethodName: "ProcDefList",
			Handler:    _Workflow_ProcDefList_Handler,
		},
		{
			MethodName: "HistProcDefList",
			Handler:    _Workflow_HistProcDefList_Handler,
		},
		{
			MethodName: "ProcInstStart",
			Handler:    _Workflow_ProcInstStart_Handler,
		},
		{
			MethodName: "ProcInstDelete",
			Handler:    _Workflow_ProcInstDelete_Handler,
		},
		{
			MethodName: "ProcInstRevoke",
			Handler:    _Workflow_ProcInstRevoke_Handler,
		},
		{
			MethodName: "ProcInstUpdate",
			Handler:    _Workflow_ProcInstUpdate_Handler,
		},
		{
			MethodName: "ProcInstFindOne",
			Handler:    _Workflow_ProcInstFindOne_Handler,
		},
		{
			MethodName: "ProcInstList",
			Handler:    _Workflow_ProcInstList_Handler,
		},
		{
			MethodName: "ProcExecutionList",
			Handler:    _Workflow_ProcExecutionList_Handler,
		},
		{
			MethodName: "HistProcExecutionList",
			Handler:    _Workflow_HistProcExecutionList_Handler,
		},
		{
			MethodName: "TaskPass",
			Handler:    _Workflow_TaskPass_Handler,
		},
		{
			MethodName: "TaskPassDirectlyToWhoRejectedMe",
			Handler:    _Workflow_TaskPassDirectlyToWhoRejectedMe_Handler,
		},
		{
			MethodName: "TaskReject",
			Handler:    _Workflow_TaskReject_Handler,
		},
		{
			MethodName: "TaskFreeRejectToUpstreamNode",
			Handler:    _Workflow_TaskFreeRejectToUpstreamNode_Handler,
		},
		{
			MethodName: "TaskTransfer",
			Handler:    _Workflow_TaskTransfer_Handler,
		},
		{
			MethodName: "TaskToDoList",
			Handler:    _Workflow_TaskToDoList_Handler,
		},
		{
			MethodName: "TaskFinishedList",
			Handler:    _Workflow_TaskFinishedList_Handler,
		},
		{
			MethodName: "TaskUpstreamNodeList",
			Handler:    _Workflow_TaskUpstreamNodeList_Handler,
		},
		{
			MethodName: "TaskWhatCanIDo",
			Handler:    _Workflow_TaskWhatCanIDo_Handler,
		},
		{
			MethodName: "TaskInfo",
			Handler:    _Workflow_TaskInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "workflow.proto",
}
