// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v4.22.0
// source: workflow.proto

package workflowclient

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 通用空返回
type CommonResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CommonResp) Reset() {
	*x = CommonResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonResp) ProtoMessage() {}

func (x *CommonResp) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonResp.ProtoReflect.Descriptor instead.
func (*CommonResp) Descriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{0}
}

// ProcDef 添加
type ProcDefSaveReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resource     string `protobuf:"bytes,1,opt,name=resource,proto3" json:"resource,omitempty"`                               // 流程定义模板
	CreateUserId string `protobuf:"bytes,2,opt,name=create_user_id,json=createUserId,proto3" json:"create_user_id,omitempty"` // 创建者ID
	TenantId     string `protobuf:"bytes,3,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`               // 租户ID
	CreatedName  string `protobuf:"bytes,4,opt,name=created_name,json=createdName,proto3" json:"created_name,omitempty"`      // 创建人
	Data         string `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`                                       //
}

func (x *ProcDefSaveReq) Reset() {
	*x = ProcDefSaveReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcDefSaveReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcDefSaveReq) ProtoMessage() {}

func (x *ProcDefSaveReq) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcDefSaveReq.ProtoReflect.Descriptor instead.
func (*ProcDefSaveReq) Descriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{1}
}

func (x *ProcDefSaveReq) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *ProcDefSaveReq) GetCreateUserId() string {
	if x != nil {
		return x.CreateUserId
	}
	return ""
}

func (x *ProcDefSaveReq) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *ProcDefSaveReq) GetCreatedName() string {
	if x != nil {
		return x.CreatedName
	}
	return ""
}

func (x *ProcDefSaveReq) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

// ProcDef 删除
type ProcDefDeleteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                     // 流程模板ID
	TenantId    string `protobuf:"bytes,2,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`          // 租户ID
	DeletedName string `protobuf:"bytes,3,opt,name=deleted_name,json=deletedName,proto3" json:"deleted_name,omitempty"` // 删除人
}

func (x *ProcDefDeleteReq) Reset() {
	*x = ProcDefDeleteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcDefDeleteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcDefDeleteReq) ProtoMessage() {}

func (x *ProcDefDeleteReq) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcDefDeleteReq.ProtoReflect.Descriptor instead.
func (*ProcDefDeleteReq) Descriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{2}
}

func (x *ProcDefDeleteReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProcDefDeleteReq) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *ProcDefDeleteReq) GetDeletedName() string {
	if x != nil {
		return x.DeletedName
	}
	return ""
}

// ProcDef 更新
type ProcDefUpdateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                          // 流程模板ID
	Name         string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                       // 流程名称
	Version      int64  `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`                                // 版本号
	ProcType     int64  `protobuf:"varint,4,opt,name=proc_type,json=procType,proto3" json:"proc_type,omitempty"`              // 流程类型
	Resource     string `protobuf:"bytes,5,opt,name=resource,proto3" json:"resource,omitempty"`                               // 流程定义模板
	CreateUserId string `protobuf:"bytes,6,opt,name=create_user_id,json=createUserId,proto3" json:"create_user_id,omitempty"` // 创建者ID
	Source       string `protobuf:"bytes,7,opt,name=source,proto3" json:"source,omitempty"`                                   // 来源
	TenantId     string `protobuf:"bytes,8,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`               // 租户ID
	Data         string `protobuf:"bytes,9,opt,name=data,proto3" json:"data,omitempty"`                                       //
	UpdatedName  string `protobuf:"bytes,10,opt,name=updated_name,json=updatedName,proto3" json:"updated_name,omitempty"`     // 更新人
}

func (x *ProcDefUpdateReq) Reset() {
	*x = ProcDefUpdateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcDefUpdateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcDefUpdateReq) ProtoMessage() {}

func (x *ProcDefUpdateReq) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcDefUpdateReq.ProtoReflect.Descriptor instead.
func (*ProcDefUpdateReq) Descriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{3}
}

func (x *ProcDefUpdateReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProcDefUpdateReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProcDefUpdateReq) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *ProcDefUpdateReq) GetProcType() int64 {
	if x != nil {
		return x.ProcType
	}
	return 0
}

func (x *ProcDefUpdateReq) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *ProcDefUpdateReq) GetCreateUserId() string {
	if x != nil {
		return x.CreateUserId
	}
	return ""
}

func (x *ProcDefUpdateReq) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *ProcDefUpdateReq) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *ProcDefUpdateReq) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *ProcDefUpdateReq) GetUpdatedName() string {
	if x != nil {
		return x.UpdatedName
	}
	return ""
}

// ProcDef 单个查询
type ProcDefFindOneReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                            // 流程模板ID
	TenantId string `protobuf:"bytes,2,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"` // 租户ID
}

func (x *ProcDefFindOneReq) Reset() {
	*x = ProcDefFindOneReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcDefFindOneReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcDefFindOneReq) ProtoMessage() {}

func (x *ProcDefFindOneReq) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcDefFindOneReq.ProtoReflect.Descriptor instead.
func (*ProcDefFindOneReq) Descriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{4}
}

func (x *ProcDefFindOneReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProcDefFindOneReq) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

// ProcDef 单个查询返回
type ProcDefFindOneResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                          // 流程模板ID
	Name         string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                       // 流程名称
	Version      int64  `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`                                // 版本号
	ProcType     int64  `protobuf:"varint,4,opt,name=proc_type,json=procType,proto3" json:"proc_type,omitempty"`              // 流程类型
	Resource     string `protobuf:"bytes,5,opt,name=resource,proto3" json:"resource,omitempty"`                               // 流程定义模板
	CreateUserId string `protobuf:"bytes,6,opt,name=create_user_id,json=createUserId,proto3" json:"create_user_id,omitempty"` // 创建者ID
	Source       string `protobuf:"bytes,7,opt,name=source,proto3" json:"source,omitempty"`                                   // 来源
	Data         string `protobuf:"bytes,8,opt,name=data,proto3" json:"data,omitempty"`                                       //
	CreatedAt    int64  `protobuf:"varint,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`           // 创建时间
	UpdatedAt    int64  `protobuf:"varint,10,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`          // 更新时间
	CreatedName  string `protobuf:"bytes,11,opt,name=created_name,json=createdName,proto3" json:"created_name,omitempty"`     // 创建人
	UpdatedName  string `protobuf:"bytes,12,opt,name=updated_name,json=updatedName,proto3" json:"updated_name,omitempty"`     // 更新人
}

func (x *ProcDefFindOneResp) Reset() {
	*x = ProcDefFindOneResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcDefFindOneResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcDefFindOneResp) ProtoMessage() {}

func (x *ProcDefFindOneResp) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcDefFindOneResp.ProtoReflect.Descriptor instead.
func (*ProcDefFindOneResp) Descriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{5}
}

func (x *ProcDefFindOneResp) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProcDefFindOneResp) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProcDefFindOneResp) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *ProcDefFindOneResp) GetProcType() int64 {
	if x != nil {
		return x.ProcType
	}
	return 0
}

func (x *ProcDefFindOneResp) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *ProcDefFindOneResp) GetCreateUserId() string {
	if x != nil {
		return x.CreateUserId
	}
	return ""
}

func (x *ProcDefFindOneResp) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *ProcDefFindOneResp) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *ProcDefFindOneResp) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *ProcDefFindOneResp) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *ProcDefFindOneResp) GetCreatedName() string {
	if x != nil {
		return x.CreatedName
	}
	return ""
}

func (x *ProcDefFindOneResp) GetUpdatedName() string {
	if x != nil {
		return x.UpdatedName
	}
	return ""
}

// ProcDef 分页查询
type ProcDefListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Current      int64  `protobuf:"varint,1,opt,name=current,proto3" json:"current,omitempty"`                                // 页码
	PageSize     int64  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`              // 页数
	Name         string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                                       // 流程名称
	Version      int64  `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`                                // 版本号
	ProcType     int64  `protobuf:"varint,5,opt,name=proc_type,json=procType,proto3" json:"proc_type,omitempty"`              // 流程类型
	Resource     string `protobuf:"bytes,6,opt,name=resource,proto3" json:"resource,omitempty"`                               // 流程定义模板
	CreateUserId string `protobuf:"bytes,7,opt,name=create_user_id,json=createUserId,proto3" json:"create_user_id,omitempty"` // 创建者ID
	Source       string `protobuf:"bytes,8,opt,name=source,proto3" json:"source,omitempty"`                                   // 来源
	TenantId     string `protobuf:"bytes,9,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`               // 租户ID
	Data         string `protobuf:"bytes,10,opt,name=data,proto3" json:"data,omitempty"`                                      //
}

func (x *ProcDefListReq) Reset() {
	*x = ProcDefListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcDefListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcDefListReq) ProtoMessage() {}

func (x *ProcDefListReq) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcDefListReq.ProtoReflect.Descriptor instead.
func (*ProcDefListReq) Descriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{6}
}

func (x *ProcDefListReq) GetCurrent() int64 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *ProcDefListReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ProcDefListReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProcDefListReq) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *ProcDefListReq) GetProcType() int64 {
	if x != nil {
		return x.ProcType
	}
	return 0
}

func (x *ProcDefListReq) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *ProcDefListReq) GetCreateUserId() string {
	if x != nil {
		return x.CreateUserId
	}
	return ""
}

func (x *ProcDefListReq) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *ProcDefListReq) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *ProcDefListReq) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

// ProcDef 分页查询返回
type ProcDefListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64              `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"` // 总数
	List  []*ProcDefListData `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`    // 内容
}

func (x *ProcDefListResp) Reset() {
	*x = ProcDefListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcDefListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcDefListResp) ProtoMessage() {}

func (x *ProcDefListResp) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcDefListResp.ProtoReflect.Descriptor instead.
func (*ProcDefListResp) Descriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{7}
}

func (x *ProcDefListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ProcDefListResp) GetList() []*ProcDefListData {
	if x != nil {
		return x.List
	}
	return nil
}

// ProcDef 列表信息
type ProcDefListData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                          // 流程模板ID
	Name         string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                       // 流程名称
	Version      int64  `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`                                // 版本号
	ProcType     int64  `protobuf:"varint,4,opt,name=proc_type,json=procType,proto3" json:"proc_type,omitempty"`              // 流程类型
	Resource     string `protobuf:"bytes,5,opt,name=resource,proto3" json:"resource,omitempty"`                               // 流程定义模板
	CreateUserId string `protobuf:"bytes,6,opt,name=create_user_id,json=createUserId,proto3" json:"create_user_id,omitempty"` // 创建者ID
	Source       string `protobuf:"bytes,7,opt,name=source,proto3" json:"source,omitempty"`                                   // 来源
	Data         string `protobuf:"bytes,8,opt,name=data,proto3" json:"data,omitempty"`                                       //
	CreatedAt    int64  `protobuf:"varint,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`           // 创建时间
	UpdatedAt    int64  `protobuf:"varint,10,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`          // 更新时间
	CreatedName  string `protobuf:"bytes,11,opt,name=created_name,json=createdName,proto3" json:"created_name,omitempty"`     // 创建人
	UpdatedName  string `protobuf:"bytes,12,opt,name=updated_name,json=updatedName,proto3" json:"updated_name,omitempty"`     // 更新人
}

func (x *ProcDefListData) Reset() {
	*x = ProcDefListData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcDefListData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcDefListData) ProtoMessage() {}

func (x *ProcDefListData) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcDefListData.ProtoReflect.Descriptor instead.
func (*ProcDefListData) Descriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{8}
}

func (x *ProcDefListData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProcDefListData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProcDefListData) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *ProcDefListData) GetProcType() int64 {
	if x != nil {
		return x.ProcType
	}
	return 0
}

func (x *ProcDefListData) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *ProcDefListData) GetCreateUserId() string {
	if x != nil {
		return x.CreateUserId
	}
	return ""
}

func (x *ProcDefListData) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *ProcDefListData) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *ProcDefListData) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *ProcDefListData) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *ProcDefListData) GetCreatedName() string {
	if x != nil {
		return x.CreatedName
	}
	return ""
}

func (x *ProcDefListData) GetUpdatedName() string {
	if x != nil {
		return x.UpdatedName
	}
	return ""
}

// HistProcDef 分页查询
type HistProcDefListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Current      int64  `protobuf:"varint,1,opt,name=current,proto3" json:"current,omitempty"`                                // 页码
	PageSize     int64  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`              // 页数
	ProcId       int64  `protobuf:"varint,3,opt,name=proc_id,json=procId,proto3" json:"proc_id,omitempty"`                    // 流程模板ID
	Name         string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`                                       // 流程名称
	Version      int64  `protobuf:"varint,5,opt,name=version,proto3" json:"version,omitempty"`                                // 版本号
	ProcType     int64  `protobuf:"varint,6,opt,name=proc_type,json=procType,proto3" json:"proc_type,omitempty"`              // 流程类型
	Resource     string `protobuf:"bytes,7,opt,name=resource,proto3" json:"resource,omitempty"`                               // 流程定义模板
	CreateUserId string `protobuf:"bytes,8,opt,name=create_user_id,json=createUserId,proto3" json:"create_user_id,omitempty"` // 创建者ID
	Source       string `protobuf:"bytes,9,opt,name=source,proto3" json:"source,omitempty"`                                   // 来源
	TenantId     string `protobuf:"bytes,10,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`              // 租户ID
	Data         string `protobuf:"bytes,11,opt,name=data,proto3" json:"data,omitempty"`                                      //
}

func (x *HistProcDefListReq) Reset() {
	*x = HistProcDefListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistProcDefListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistProcDefListReq) ProtoMessage() {}

func (x *HistProcDefListReq) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistProcDefListReq.ProtoReflect.Descriptor instead.
func (*HistProcDefListReq) Descriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{9}
}

func (x *HistProcDefListReq) GetCurrent() int64 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *HistProcDefListReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *HistProcDefListReq) GetProcId() int64 {
	if x != nil {
		return x.ProcId
	}
	return 0
}

func (x *HistProcDefListReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HistProcDefListReq) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *HistProcDefListReq) GetProcType() int64 {
	if x != nil {
		return x.ProcType
	}
	return 0
}

func (x *HistProcDefListReq) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *HistProcDefListReq) GetCreateUserId() string {
	if x != nil {
		return x.CreateUserId
	}
	return ""
}

func (x *HistProcDefListReq) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *HistProcDefListReq) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *HistProcDefListReq) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

// HistProcDef 分页查询返回
type HistProcDefListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64                  `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"` // 总数
	List  []*HistProcDefListData `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`    // 内容
}

func (x *HistProcDefListResp) Reset() {
	*x = HistProcDefListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistProcDefListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistProcDefListResp) ProtoMessage() {}

func (x *HistProcDefListResp) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistProcDefListResp.ProtoReflect.Descriptor instead.
func (*HistProcDefListResp) Descriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{10}
}

func (x *HistProcDefListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *HistProcDefListResp) GetList() []*HistProcDefListData {
	if x != nil {
		return x.List
	}
	return nil
}

// HistProcDef 列表信息
type HistProcDefListData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                          // ID
	ProcId       int64  `protobuf:"varint,2,opt,name=proc_id,json=procId,proto3" json:"proc_id,omitempty"`                    // 流程模板ID
	Name         string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                                       // 流程名称
	Version      int64  `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`                                // 版本号
	ProcType     int64  `protobuf:"varint,5,opt,name=proc_type,json=procType,proto3" json:"proc_type,omitempty"`              // 流程类型
	Resource     string `protobuf:"bytes,6,opt,name=resource,proto3" json:"resource,omitempty"`                               // 流程定义模板
	CreateUserId string `protobuf:"bytes,7,opt,name=create_user_id,json=createUserId,proto3" json:"create_user_id,omitempty"` // 创建者ID
	Source       string `protobuf:"bytes,8,opt,name=source,proto3" json:"source,omitempty"`                                   // 来源
	Data         string `protobuf:"bytes,9,opt,name=data,proto3" json:"data,omitempty"`                                       //
	CreatedAt    int64  `protobuf:"varint,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`          // 创建时间
	UpdatedAt    int64  `protobuf:"varint,11,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`          // 更新时间
	CreatedName  string `protobuf:"bytes,12,opt,name=created_name,json=createdName,proto3" json:"created_name,omitempty"`     // 创建人
	UpdatedName  string `protobuf:"bytes,13,opt,name=updated_name,json=updatedName,proto3" json:"updated_name,omitempty"`     // 更新人
}

func (x *HistProcDefListData) Reset() {
	*x = HistProcDefListData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistProcDefListData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistProcDefListData) ProtoMessage() {}

func (x *HistProcDefListData) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistProcDefListData.ProtoReflect.Descriptor instead.
func (*HistProcDefListData) Descriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{11}
}

func (x *HistProcDefListData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *HistProcDefListData) GetProcId() int64 {
	if x != nil {
		return x.ProcId
	}
	return 0
}

func (x *HistProcDefListData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HistProcDefListData) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *HistProcDefListData) GetProcType() int64 {
	if x != nil {
		return x.ProcType
	}
	return 0
}

func (x *HistProcDefListData) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *HistProcDefListData) GetCreateUserId() string {
	if x != nil {
		return x.CreateUserId
	}
	return ""
}

func (x *HistProcDefListData) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *HistProcDefListData) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *HistProcDefListData) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *HistProcDefListData) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *HistProcDefListData) GetCreatedName() string {
	if x != nil {
		return x.CreatedName
	}
	return ""
}

func (x *HistProcDefListData) GetUpdatedName() string {
	if x != nil {
		return x.UpdatedName
	}
	return ""
}

// ProcInst 添加
type ProcInstStartReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProcId        int64  `protobuf:"varint,1,opt,name=proc_id,json=procId,proto3" json:"proc_id,omitempty"`                     // 流程ID
	BusinessId    string `protobuf:"bytes,2,opt,name=business_id,json=businessId,proto3" json:"business_id,omitempty"`          // 业务ID
	Comment       string `protobuf:"bytes,3,opt,name=comment,proto3" json:"comment,omitempty"`                                  // 评论意见
	VariablesJson string `protobuf:"bytes,4,opt,name=variables_json,json=variablesJson,proto3" json:"variables_json,omitempty"` // 变量(Json)
	TenantId      string `protobuf:"bytes,5,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`                // 租户ID
	Data          string `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`                                        //
	CreatedName   string `protobuf:"bytes,7,opt,name=created_name,json=createdName,proto3" json:"created_name,omitempty"`       // 创建人
}

func (x *ProcInstStartReq) Reset() {
	*x = ProcInstStartReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcInstStartReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcInstStartReq) ProtoMessage() {}

func (x *ProcInstStartReq) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcInstStartReq.ProtoReflect.Descriptor instead.
func (*ProcInstStartReq) Descriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{12}
}

func (x *ProcInstStartReq) GetProcId() int64 {
	if x != nil {
		return x.ProcId
	}
	return 0
}

func (x *ProcInstStartReq) GetBusinessId() string {
	if x != nil {
		return x.BusinessId
	}
	return ""
}

func (x *ProcInstStartReq) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *ProcInstStartReq) GetVariablesJson() string {
	if x != nil {
		return x.VariablesJson
	}
	return ""
}

func (x *ProcInstStartReq) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *ProcInstStartReq) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *ProcInstStartReq) GetCreatedName() string {
	if x != nil {
		return x.CreatedName
	}
	return ""
}

// ProcInst 删除
type ProcInstDeleteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                     // 流程实例ID
	TenantId    string `protobuf:"bytes,2,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`          // 租户ID
	DeletedName string `protobuf:"bytes,3,opt,name=deleted_name,json=deletedName,proto3" json:"deleted_name,omitempty"` // 删除人
}

func (x *ProcInstDeleteReq) Reset() {
	*x = ProcInstDeleteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcInstDeleteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcInstDeleteReq) ProtoMessage() {}

func (x *ProcInstDeleteReq) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcInstDeleteReq.ProtoReflect.Descriptor instead.
func (*ProcInstDeleteReq) Descriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{13}
}

func (x *ProcInstDeleteReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProcInstDeleteReq) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *ProcInstDeleteReq) GetDeletedName() string {
	if x != nil {
		return x.DeletedName
	}
	return ""
}

// ProcInst 撤销流程
type ProcInstRevokeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                          // 流程实例ID
	RevokeUserId string `protobuf:"bytes,2,opt,name=revoke_user_id,json=revokeUserId,proto3" json:"revoke_user_id,omitempty"` // 撤销发起用户ID
	Force        int64  `protobuf:"varint,3,opt,name=force,proto3" json:"force,omitempty"`                                    // 是否强制撤销
	TenantId     string `protobuf:"bytes,10,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`              // 租户ID
	Data         string `protobuf:"bytes,11,opt,name=data,proto3" json:"data,omitempty"`                                      //
	UpdatedName  string `protobuf:"bytes,12,opt,name=updated_name,json=updatedName,proto3" json:"updated_name,omitempty"`     // 更新人
}

func (x *ProcInstRevokeReq) Reset() {
	*x = ProcInstRevokeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcInstRevokeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcInstRevokeReq) ProtoMessage() {}

func (x *ProcInstRevokeReq) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcInstRevokeReq.ProtoReflect.Descriptor instead.
func (*ProcInstRevokeReq) Descriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{14}
}

func (x *ProcInstRevokeReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProcInstRevokeReq) GetRevokeUserId() string {
	if x != nil {
		return x.RevokeUserId
	}
	return ""
}

func (x *ProcInstRevokeReq) GetForce() int64 {
	if x != nil {
		return x.Force
	}
	return 0
}

func (x *ProcInstRevokeReq) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *ProcInstRevokeReq) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *ProcInstRevokeReq) GetUpdatedName() string {
	if x != nil {
		return x.UpdatedName
	}
	return ""
}

// ProcInst 更新
type ProcInstUpdateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                             // 流程实例ID
	ProcId        int64  `protobuf:"varint,2,opt,name=proc_id,json=procId,proto3" json:"proc_id,omitempty"`                       // 流程ID
	ProcName      string `protobuf:"bytes,3,opt,name=proc_name,json=procName,proto3" json:"proc_name,omitempty"`                  // 流程名称
	ProcVersion   int64  `protobuf:"varint,4,opt,name=proc_version,json=procVersion,proto3" json:"proc_version,omitempty"`        // 流程版本号
	BusinessId    string `protobuf:"bytes,5,opt,name=business_id,json=businessId,proto3" json:"business_id,omitempty"`            // 业务ID
	Starter       string `protobuf:"bytes,6,opt,name=starter,proto3" json:"starter,omitempty"`                                    // 流程发起人用户ID
	CurrentNodeId string `protobuf:"bytes,7,opt,name=current_node_id,json=currentNodeId,proto3" json:"current_node_id,omitempty"` // 当前进行节点ID
	VariablesJson string `protobuf:"bytes,8,opt,name=variables_json,json=variablesJson,proto3" json:"variables_json,omitempty"`   // 变量(Json)
	Status        int64  `protobuf:"varint,9,opt,name=status,proto3" json:"status,omitempty"`                                     // 状态 0 未完成（审批中） 1 已完成 2 撤销
	TenantId      string `protobuf:"bytes,10,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`                 // 租户ID
	Data          string `protobuf:"bytes,11,opt,name=data,proto3" json:"data,omitempty"`                                         //
	UpdatedName   string `protobuf:"bytes,12,opt,name=updated_name,json=updatedName,proto3" json:"updated_name,omitempty"`        // 更新人
}

func (x *ProcInstUpdateReq) Reset() {
	*x = ProcInstUpdateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcInstUpdateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcInstUpdateReq) ProtoMessage() {}

func (x *ProcInstUpdateReq) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcInstUpdateReq.ProtoReflect.Descriptor instead.
func (*ProcInstUpdateReq) Descriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{15}
}

func (x *ProcInstUpdateReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProcInstUpdateReq) GetProcId() int64 {
	if x != nil {
		return x.ProcId
	}
	return 0
}

func (x *ProcInstUpdateReq) GetProcName() string {
	if x != nil {
		return x.ProcName
	}
	return ""
}

func (x *ProcInstUpdateReq) GetProcVersion() int64 {
	if x != nil {
		return x.ProcVersion
	}
	return 0
}

func (x *ProcInstUpdateReq) GetBusinessId() string {
	if x != nil {
		return x.BusinessId
	}
	return ""
}

func (x *ProcInstUpdateReq) GetStarter() string {
	if x != nil {
		return x.Starter
	}
	return ""
}

func (x *ProcInstUpdateReq) GetCurrentNodeId() string {
	if x != nil {
		return x.CurrentNodeId
	}
	return ""
}

func (x *ProcInstUpdateReq) GetVariablesJson() string {
	if x != nil {
		return x.VariablesJson
	}
	return ""
}

func (x *ProcInstUpdateReq) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ProcInstUpdateReq) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *ProcInstUpdateReq) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *ProcInstUpdateReq) GetUpdatedName() string {
	if x != nil {
		return x.UpdatedName
	}
	return ""
}

// ProcInst 单个查询
type ProcInstFindOneReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                            // 流程实例ID
	TenantId string `protobuf:"bytes,2,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"` // 租户ID
}

func (x *ProcInstFindOneReq) Reset() {
	*x = ProcInstFindOneReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcInstFindOneReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcInstFindOneReq) ProtoMessage() {}

func (x *ProcInstFindOneReq) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcInstFindOneReq.ProtoReflect.Descriptor instead.
func (*ProcInstFindOneReq) Descriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{16}
}

func (x *ProcInstFindOneReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProcInstFindOneReq) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

// ProcInst 单个查询返回
type ProcInstFindOneResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                             // 流程实例ID
	ProcId        int64  `protobuf:"varint,2,opt,name=proc_id,json=procId,proto3" json:"proc_id,omitempty"`                       // 流程ID
	ProcName      string `protobuf:"bytes,3,opt,name=proc_name,json=procName,proto3" json:"proc_name,omitempty"`                  // 流程名称
	ProcVersion   int64  `protobuf:"varint,4,opt,name=proc_version,json=procVersion,proto3" json:"proc_version,omitempty"`        // 流程版本号
	BusinessId    string `protobuf:"bytes,5,opt,name=business_id,json=businessId,proto3" json:"business_id,omitempty"`            // 业务ID
	Starter       string `protobuf:"bytes,6,opt,name=starter,proto3" json:"starter,omitempty"`                                    // 流程发起人用户ID
	CurrentNodeId string `protobuf:"bytes,7,opt,name=current_node_id,json=currentNodeId,proto3" json:"current_node_id,omitempty"` // 当前进行节点ID
	VariablesJson string `protobuf:"bytes,8,opt,name=variables_json,json=variablesJson,proto3" json:"variables_json,omitempty"`   // 变量(Json)
	Status        int64  `protobuf:"varint,9,opt,name=status,proto3" json:"status,omitempty"`                                     // 状态 0 未完成（审批中） 1 已完成 2 撤销
	Data          string `protobuf:"bytes,10,opt,name=data,proto3" json:"data,omitempty"`                                         //
	CreatedAt     int64  `protobuf:"varint,11,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`             // 创建时间
	UpdatedAt     int64  `protobuf:"varint,12,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`             // 更新时间
	CreatedName   string `protobuf:"bytes,13,opt,name=created_name,json=createdName,proto3" json:"created_name,omitempty"`        // 创建人
	UpdatedName   string `protobuf:"bytes,14,opt,name=updated_name,json=updatedName,proto3" json:"updated_name,omitempty"`        // 更新人
}

func (x *ProcInstFindOneResp) Reset() {
	*x = ProcInstFindOneResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcInstFindOneResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcInstFindOneResp) ProtoMessage() {}

func (x *ProcInstFindOneResp) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcInstFindOneResp.ProtoReflect.Descriptor instead.
func (*ProcInstFindOneResp) Descriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{17}
}

func (x *ProcInstFindOneResp) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProcInstFindOneResp) GetProcId() int64 {
	if x != nil {
		return x.ProcId
	}
	return 0
}

func (x *ProcInstFindOneResp) GetProcName() string {
	if x != nil {
		return x.ProcName
	}
	return ""
}

func (x *ProcInstFindOneResp) GetProcVersion() int64 {
	if x != nil {
		return x.ProcVersion
	}
	return 0
}

func (x *ProcInstFindOneResp) GetBusinessId() string {
	if x != nil {
		return x.BusinessId
	}
	return ""
}

func (x *ProcInstFindOneResp) GetStarter() string {
	if x != nil {
		return x.Starter
	}
	return ""
}

func (x *ProcInstFindOneResp) GetCurrentNodeId() string {
	if x != nil {
		return x.CurrentNodeId
	}
	return ""
}

func (x *ProcInstFindOneResp) GetVariablesJson() string {
	if x != nil {
		return x.VariablesJson
	}
	return ""
}

func (x *ProcInstFindOneResp) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ProcInstFindOneResp) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *ProcInstFindOneResp) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *ProcInstFindOneResp) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *ProcInstFindOneResp) GetCreatedName() string {
	if x != nil {
		return x.CreatedName
	}
	return ""
}

func (x *ProcInstFindOneResp) GetUpdatedName() string {
	if x != nil {
		return x.UpdatedName
	}
	return ""
}

// ProcInst 分页查询
type ProcInstListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Current       int64  `protobuf:"varint,1,opt,name=current,proto3" json:"current,omitempty"`                                   // 页码
	PageSize      int64  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`                 // 页数
	ProcId        int64  `protobuf:"varint,3,opt,name=proc_id,json=procId,proto3" json:"proc_id,omitempty"`                       // 流程ID
	ProcName      string `protobuf:"bytes,4,opt,name=proc_name,json=procName,proto3" json:"proc_name,omitempty"`                  // 流程名称
	ProcVersion   int64  `protobuf:"varint,5,opt,name=proc_version,json=procVersion,proto3" json:"proc_version,omitempty"`        // 流程版本号
	BusinessId    string `protobuf:"bytes,6,opt,name=business_id,json=businessId,proto3" json:"business_id,omitempty"`            // 业务ID
	Starter       string `protobuf:"bytes,7,opt,name=starter,proto3" json:"starter,omitempty"`                                    // 流程发起人用户ID
	CurrentNodeId string `protobuf:"bytes,8,opt,name=current_node_id,json=currentNodeId,proto3" json:"current_node_id,omitempty"` // 当前进行节点ID
	VariablesJson string `protobuf:"bytes,9,opt,name=variables_json,json=variablesJson,proto3" json:"variables_json,omitempty"`   // 变量(Json)
	Status        int64  `protobuf:"varint,10,opt,name=status,proto3" json:"status,omitempty"`                                    // 状态 0 未完成（审批中） 1 已完成 2 撤销
	TenantId      string `protobuf:"bytes,11,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`                 // 租户ID
	Data          string `protobuf:"bytes,12,opt,name=data,proto3" json:"data,omitempty"`                                         //
}

func (x *ProcInstListReq) Reset() {
	*x = ProcInstListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcInstListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcInstListReq) ProtoMessage() {}

func (x *ProcInstListReq) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcInstListReq.ProtoReflect.Descriptor instead.
func (*ProcInstListReq) Descriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{18}
}

func (x *ProcInstListReq) GetCurrent() int64 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *ProcInstListReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ProcInstListReq) GetProcId() int64 {
	if x != nil {
		return x.ProcId
	}
	return 0
}

func (x *ProcInstListReq) GetProcName() string {
	if x != nil {
		return x.ProcName
	}
	return ""
}

func (x *ProcInstListReq) GetProcVersion() int64 {
	if x != nil {
		return x.ProcVersion
	}
	return 0
}

func (x *ProcInstListReq) GetBusinessId() string {
	if x != nil {
		return x.BusinessId
	}
	return ""
}

func (x *ProcInstListReq) GetStarter() string {
	if x != nil {
		return x.Starter
	}
	return ""
}

func (x *ProcInstListReq) GetCurrentNodeId() string {
	if x != nil {
		return x.CurrentNodeId
	}
	return ""
}

func (x *ProcInstListReq) GetVariablesJson() string {
	if x != nil {
		return x.VariablesJson
	}
	return ""
}

func (x *ProcInstListReq) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ProcInstListReq) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *ProcInstListReq) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

// ProcInst 分页查询返回
type ProcInstListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64               `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"` // 总数
	List  []*ProcInstListData `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`    // 内容
}

func (x *ProcInstListResp) Reset() {
	*x = ProcInstListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcInstListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcInstListResp) ProtoMessage() {}

func (x *ProcInstListResp) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcInstListResp.ProtoReflect.Descriptor instead.
func (*ProcInstListResp) Descriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{19}
}

func (x *ProcInstListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ProcInstListResp) GetList() []*ProcInstListData {
	if x != nil {
		return x.List
	}
	return nil
}

// ProcInst 列表信息
type ProcInstListData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                             // 流程实例ID
	ProcId        int64  `protobuf:"varint,2,opt,name=proc_id,json=procId,proto3" json:"proc_id,omitempty"`                       // 流程ID
	ProcName      string `protobuf:"bytes,3,opt,name=proc_name,json=procName,proto3" json:"proc_name,omitempty"`                  // 流程名称
	ProcVersion   int64  `protobuf:"varint,4,opt,name=proc_version,json=procVersion,proto3" json:"proc_version,omitempty"`        // 流程版本号
	BusinessId    string `protobuf:"bytes,5,opt,name=business_id,json=businessId,proto3" json:"business_id,omitempty"`            // 业务ID
	Starter       string `protobuf:"bytes,6,opt,name=starter,proto3" json:"starter,omitempty"`                                    // 流程发起人用户ID
	CurrentNodeId string `protobuf:"bytes,7,opt,name=current_node_id,json=currentNodeId,proto3" json:"current_node_id,omitempty"` // 当前进行节点ID
	VariablesJson string `protobuf:"bytes,8,opt,name=variables_json,json=variablesJson,proto3" json:"variables_json,omitempty"`   // 变量(Json)
	Status        int64  `protobuf:"varint,9,opt,name=status,proto3" json:"status,omitempty"`                                     // 状态 0 未完成（审批中） 1 已完成 2 撤销
	Data          string `protobuf:"bytes,10,opt,name=data,proto3" json:"data,omitempty"`                                         //
	CreatedAt     int64  `protobuf:"varint,11,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`             // 创建时间
	UpdatedAt     int64  `protobuf:"varint,12,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`             // 更新时间
	CreatedName   string `protobuf:"bytes,13,opt,name=created_name,json=createdName,proto3" json:"created_name,omitempty"`        // 创建人
	UpdatedName   string `protobuf:"bytes,14,opt,name=updated_name,json=updatedName,proto3" json:"updated_name,omitempty"`        // 更新人
}

func (x *ProcInstListData) Reset() {
	*x = ProcInstListData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcInstListData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcInstListData) ProtoMessage() {}

func (x *ProcInstListData) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcInstListData.ProtoReflect.Descriptor instead.
func (*ProcInstListData) Descriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{20}
}

func (x *ProcInstListData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProcInstListData) GetProcId() int64 {
	if x != nil {
		return x.ProcId
	}
	return 0
}

func (x *ProcInstListData) GetProcName() string {
	if x != nil {
		return x.ProcName
	}
	return ""
}

func (x *ProcInstListData) GetProcVersion() int64 {
	if x != nil {
		return x.ProcVersion
	}
	return 0
}

func (x *ProcInstListData) GetBusinessId() string {
	if x != nil {
		return x.BusinessId
	}
	return ""
}

func (x *ProcInstListData) GetStarter() string {
	if x != nil {
		return x.Starter
	}
	return ""
}

func (x *ProcInstListData) GetCurrentNodeId() string {
	if x != nil {
		return x.CurrentNodeId
	}
	return ""
}

func (x *ProcInstListData) GetVariablesJson() string {
	if x != nil {
		return x.VariablesJson
	}
	return ""
}

func (x *ProcInstListData) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ProcInstListData) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *ProcInstListData) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *ProcInstListData) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *ProcInstListData) GetCreatedName() string {
	if x != nil {
		return x.CreatedName
	}
	return ""
}

func (x *ProcInstListData) GetUpdatedName() string {
	if x != nil {
		return x.UpdatedName
	}
	return ""
}

// ProcExecution start-------------------
// ProcExecution 分页查询
type ProcExecutionListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Current     int64  `protobuf:"varint,1,opt,name=current,proto3" json:"current,omitempty"`                            // 页码
	PageSize    int64  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`          // 页数
	ProcId      int64  `protobuf:"varint,3,opt,name=proc_id,json=procId,proto3" json:"proc_id,omitempty"`                // 实例ID
	ProcVersion int64  `protobuf:"varint,4,opt,name=proc_version,json=procVersion,proto3" json:"proc_version,omitempty"` // 流程版本号
	ProcName    string `protobuf:"bytes,5,opt,name=proc_name,json=procName,proto3" json:"proc_name,omitempty"`           // 流程名
	NodeId      string `protobuf:"bytes,6,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`                 // 节点ID
	NodeName    string `protobuf:"bytes,7,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`           // 节点名称
	PrevNodeId  string `protobuf:"bytes,8,opt,name=prev_node_id,json=prevNodeId,proto3" json:"prev_node_id,omitempty"`   // 上级节点ID
	NodeType    int64  `protobuf:"varint,9,opt,name=node_type,json=nodeType,proto3" json:"node_type,omitempty"`          // 节点类型 0 开始节点，1 任务节点 ，2 网关节点，3 结束节点
	IsCosigned  int64  `protobuf:"varint,10,opt,name=is_cosigned,json=isCosigned,proto3" json:"is_cosigned,omitempty"`   // 是否会签  0 不会签  1 会签
	TenantId    string `protobuf:"bytes,11,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`          // 租户ID
	Data        string `protobuf:"bytes,12,opt,name=data,proto3" json:"data,omitempty"`                                  //
}

func (x *ProcExecutionListReq) Reset() {
	*x = ProcExecutionListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcExecutionListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcExecutionListReq) ProtoMessage() {}

func (x *ProcExecutionListReq) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcExecutionListReq.ProtoReflect.Descriptor instead.
func (*ProcExecutionListReq) Descriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{21}
}

func (x *ProcExecutionListReq) GetCurrent() int64 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *ProcExecutionListReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ProcExecutionListReq) GetProcId() int64 {
	if x != nil {
		return x.ProcId
	}
	return 0
}

func (x *ProcExecutionListReq) GetProcVersion() int64 {
	if x != nil {
		return x.ProcVersion
	}
	return 0
}

func (x *ProcExecutionListReq) GetProcName() string {
	if x != nil {
		return x.ProcName
	}
	return ""
}

func (x *ProcExecutionListReq) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *ProcExecutionListReq) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *ProcExecutionListReq) GetPrevNodeId() string {
	if x != nil {
		return x.PrevNodeId
	}
	return ""
}

func (x *ProcExecutionListReq) GetNodeType() int64 {
	if x != nil {
		return x.NodeType
	}
	return 0
}

func (x *ProcExecutionListReq) GetIsCosigned() int64 {
	if x != nil {
		return x.IsCosigned
	}
	return 0
}

func (x *ProcExecutionListReq) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *ProcExecutionListReq) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

// ProcExecution 分页查询返回
type ProcExecutionListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64                    `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"` // 总数
	List  []*ProcExecutionListData `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`    // 内容
}

func (x *ProcExecutionListResp) Reset() {
	*x = ProcExecutionListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcExecutionListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcExecutionListResp) ProtoMessage() {}

func (x *ProcExecutionListResp) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcExecutionListResp.ProtoReflect.Descriptor instead.
func (*ProcExecutionListResp) Descriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{22}
}

func (x *ProcExecutionListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ProcExecutionListResp) GetList() []*ProcExecutionListData {
	if x != nil {
		return x.List
	}
	return nil
}

// ProcExecution 列表信息
type ProcExecutionListData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                      // 执行ID
	ProcId      int64  `protobuf:"varint,2,opt,name=proc_id,json=procId,proto3" json:"proc_id,omitempty"`                // 实例ID
	ProcVersion int64  `protobuf:"varint,3,opt,name=proc_version,json=procVersion,proto3" json:"proc_version,omitempty"` // 流程版本号
	ProcName    string `protobuf:"bytes,4,opt,name=proc_name,json=procName,proto3" json:"proc_name,omitempty"`           // 流程名
	NodeId      string `protobuf:"bytes,5,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`                 // 节点ID
	NodeName    string `protobuf:"bytes,6,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`           // 节点名称
	PrevNodeId  string `protobuf:"bytes,7,opt,name=prev_node_id,json=prevNodeId,proto3" json:"prev_node_id,omitempty"`   // 上级节点ID
	NodeType    int64  `protobuf:"varint,8,opt,name=node_type,json=nodeType,proto3" json:"node_type,omitempty"`          // 节点类型 0 开始节点，1 任务节点 ，2 网关节点，3 结束节点
	IsCosigned  int64  `protobuf:"varint,9,opt,name=is_cosigned,json=isCosigned,proto3" json:"is_cosigned,omitempty"`    // 是否会签  0 不会签  1 会签
	Data        string `protobuf:"bytes,10,opt,name=data,proto3" json:"data,omitempty"`                                  //
	CreatedAt   int64  `protobuf:"varint,11,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`      // 创建时间
	UpdatedAt   int64  `protobuf:"varint,12,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`      // 更新时间
	CreatedName string `protobuf:"bytes,13,opt,name=created_name,json=createdName,proto3" json:"created_name,omitempty"` // 创建人
	UpdatedName string `protobuf:"bytes,14,opt,name=updated_name,json=updatedName,proto3" json:"updated_name,omitempty"` // 更新人
}

func (x *ProcExecutionListData) Reset() {
	*x = ProcExecutionListData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcExecutionListData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcExecutionListData) ProtoMessage() {}

func (x *ProcExecutionListData) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcExecutionListData.ProtoReflect.Descriptor instead.
func (*ProcExecutionListData) Descriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{23}
}

func (x *ProcExecutionListData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProcExecutionListData) GetProcId() int64 {
	if x != nil {
		return x.ProcId
	}
	return 0
}

func (x *ProcExecutionListData) GetProcVersion() int64 {
	if x != nil {
		return x.ProcVersion
	}
	return 0
}

func (x *ProcExecutionListData) GetProcName() string {
	if x != nil {
		return x.ProcName
	}
	return ""
}

func (x *ProcExecutionListData) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *ProcExecutionListData) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *ProcExecutionListData) GetPrevNodeId() string {
	if x != nil {
		return x.PrevNodeId
	}
	return ""
}

func (x *ProcExecutionListData) GetNodeType() int64 {
	if x != nil {
		return x.NodeType
	}
	return 0
}

func (x *ProcExecutionListData) GetIsCosigned() int64 {
	if x != nil {
		return x.IsCosigned
	}
	return 0
}

func (x *ProcExecutionListData) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *ProcExecutionListData) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *ProcExecutionListData) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *ProcExecutionListData) GetCreatedName() string {
	if x != nil {
		return x.CreatedName
	}
	return ""
}

func (x *ProcExecutionListData) GetUpdatedName() string {
	if x != nil {
		return x.UpdatedName
	}
	return ""
}

// ProcExecution end---------------------
// HistProcExecution start-------------------
// HistProcExecution 分页查询
type HistProcExecutionListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Current     int64  `protobuf:"varint,1,opt,name=current,proto3" json:"current,omitempty"`                            // 页码
	PageSize    int64  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`          // 页数
	ProcId      int64  `protobuf:"varint,3,opt,name=proc_id,json=procId,proto3" json:"proc_id,omitempty"`                // 实例ID
	ProcVersion int64  `protobuf:"varint,4,opt,name=proc_version,json=procVersion,proto3" json:"proc_version,omitempty"` // 流程版本号
	ProcName    string `protobuf:"bytes,5,opt,name=proc_name,json=procName,proto3" json:"proc_name,omitempty"`           // 流程名
	NodeId      string `protobuf:"bytes,6,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`                 // 节点ID
	NodeName    string `protobuf:"bytes,7,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`           // 节点名称
	PrevNodeId  string `protobuf:"bytes,8,opt,name=prev_node_id,json=prevNodeId,proto3" json:"prev_node_id,omitempty"`   // 上级节点ID
	NodeType    int64  `protobuf:"varint,9,opt,name=node_type,json=nodeType,proto3" json:"node_type,omitempty"`          // 节点类型 0 开始节点，1 任务节点 ，2 网关节点，3 结束节点
	IsCosigned  int64  `protobuf:"varint,10,opt,name=is_cosigned,json=isCosigned,proto3" json:"is_cosigned,omitempty"`   // 是否会签  0 不会签  1 会签
	TenantId    string `protobuf:"bytes,11,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`          // 租户ID
	Data        string `protobuf:"bytes,12,opt,name=data,proto3" json:"data,omitempty"`                                  //
}

func (x *HistProcExecutionListReq) Reset() {
	*x = HistProcExecutionListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistProcExecutionListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistProcExecutionListReq) ProtoMessage() {}

func (x *HistProcExecutionListReq) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistProcExecutionListReq.ProtoReflect.Descriptor instead.
func (*HistProcExecutionListReq) Descriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{24}
}

func (x *HistProcExecutionListReq) GetCurrent() int64 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *HistProcExecutionListReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *HistProcExecutionListReq) GetProcId() int64 {
	if x != nil {
		return x.ProcId
	}
	return 0
}

func (x *HistProcExecutionListReq) GetProcVersion() int64 {
	if x != nil {
		return x.ProcVersion
	}
	return 0
}

func (x *HistProcExecutionListReq) GetProcName() string {
	if x != nil {
		return x.ProcName
	}
	return ""
}

func (x *HistProcExecutionListReq) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *HistProcExecutionListReq) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *HistProcExecutionListReq) GetPrevNodeId() string {
	if x != nil {
		return x.PrevNodeId
	}
	return ""
}

func (x *HistProcExecutionListReq) GetNodeType() int64 {
	if x != nil {
		return x.NodeType
	}
	return 0
}

func (x *HistProcExecutionListReq) GetIsCosigned() int64 {
	if x != nil {
		return x.IsCosigned
	}
	return 0
}

func (x *HistProcExecutionListReq) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *HistProcExecutionListReq) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

// HistProcExecution 分页查询返回
type HistProcExecutionListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64                        `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"` // 总数
	List  []*HistProcExecutionListData `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`    // 内容
}

func (x *HistProcExecutionListResp) Reset() {
	*x = HistProcExecutionListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistProcExecutionListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistProcExecutionListResp) ProtoMessage() {}

func (x *HistProcExecutionListResp) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistProcExecutionListResp.ProtoReflect.Descriptor instead.
func (*HistProcExecutionListResp) Descriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{25}
}

func (x *HistProcExecutionListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *HistProcExecutionListResp) GetList() []*HistProcExecutionListData {
	if x != nil {
		return x.List
	}
	return nil
}

// HistProcExecution 列表信息
type HistProcExecutionListData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                      // 执行ID
	ProcId      int64  `protobuf:"varint,2,opt,name=proc_id,json=procId,proto3" json:"proc_id,omitempty"`                // 实例ID
	ProcVersion int64  `protobuf:"varint,3,opt,name=proc_version,json=procVersion,proto3" json:"proc_version,omitempty"` // 流程版本号
	ProcName    string `protobuf:"bytes,4,opt,name=proc_name,json=procName,proto3" json:"proc_name,omitempty"`           // 流程名
	NodeId      string `protobuf:"bytes,5,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`                 // 节点ID
	NodeName    string `protobuf:"bytes,6,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`           // 节点名称
	PrevNodeId  string `protobuf:"bytes,7,opt,name=prev_node_id,json=prevNodeId,proto3" json:"prev_node_id,omitempty"`   // 上级节点ID
	NodeType    int64  `protobuf:"varint,8,opt,name=node_type,json=nodeType,proto3" json:"node_type,omitempty"`          // 节点类型 0 开始节点，1 任务节点 ，2 网关节点，3 结束节点
	IsCosigned  int64  `protobuf:"varint,9,opt,name=is_cosigned,json=isCosigned,proto3" json:"is_cosigned,omitempty"`    // 是否会签  0 不会签  1 会签
	Data        string `protobuf:"bytes,10,opt,name=data,proto3" json:"data,omitempty"`                                  //
	CreatedAt   int64  `protobuf:"varint,11,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`      // 创建时间
	UpdatedAt   int64  `protobuf:"varint,12,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`      // 更新时间
	CreatedName string `protobuf:"bytes,13,opt,name=created_name,json=createdName,proto3" json:"created_name,omitempty"` // 创建人
	UpdatedName string `protobuf:"bytes,14,opt,name=updated_name,json=updatedName,proto3" json:"updated_name,omitempty"` // 更新人
}

func (x *HistProcExecutionListData) Reset() {
	*x = HistProcExecutionListData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistProcExecutionListData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistProcExecutionListData) ProtoMessage() {}

func (x *HistProcExecutionListData) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistProcExecutionListData.ProtoReflect.Descriptor instead.
func (*HistProcExecutionListData) Descriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{26}
}

func (x *HistProcExecutionListData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *HistProcExecutionListData) GetProcId() int64 {
	if x != nil {
		return x.ProcId
	}
	return 0
}

func (x *HistProcExecutionListData) GetProcVersion() int64 {
	if x != nil {
		return x.ProcVersion
	}
	return 0
}

func (x *HistProcExecutionListData) GetProcName() string {
	if x != nil {
		return x.ProcName
	}
	return ""
}

func (x *HistProcExecutionListData) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *HistProcExecutionListData) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *HistProcExecutionListData) GetPrevNodeId() string {
	if x != nil {
		return x.PrevNodeId
	}
	return ""
}

func (x *HistProcExecutionListData) GetNodeType() int64 {
	if x != nil {
		return x.NodeType
	}
	return 0
}

func (x *HistProcExecutionListData) GetIsCosigned() int64 {
	if x != nil {
		return x.IsCosigned
	}
	return 0
}

func (x *HistProcExecutionListData) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *HistProcExecutionListData) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *HistProcExecutionListData) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *HistProcExecutionListData) GetCreatedName() string {
	if x != nil {
		return x.CreatedName
	}
	return ""
}

func (x *HistProcExecutionListData) GetUpdatedName() string {
	if x != nil {
		return x.UpdatedName
	}
	return ""
}

// 任务通过
type TaskPassReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId                  int64  `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`                                                          // 任务ID
	Comment                 string `protobuf:"bytes,2,opt,name=comment,proto3" json:"comment,omitempty"`                                                                       // 评论意见
	VariablesJson           string `protobuf:"bytes,3,opt,name=variables_json,json=variablesJson,proto3" json:"variables_json,omitempty"`                                      // 变量(Json)
	TenantId                string `protobuf:"bytes,4,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`                                                     // 租户ID
	Data                    string `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`                                                                             //
	CreatedName             string `protobuf:"bytes,6,opt,name=created_name,json=createdName,proto3" json:"created_name,omitempty"`                                            // 创建人
	DirectlyToWhoRejectedMe int64  `protobuf:"varint,7,opt,name=directly_to_who_rejected_me,json=directlyToWhoRejectedMe,proto3" json:"directly_to_who_rejected_me,omitempty"` //任务通过(pass)时直接返回到上一个驳回我的节点 0不返回  1 返回
}

func (x *TaskPassReq) Reset() {
	*x = TaskPassReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskPassReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskPassReq) ProtoMessage() {}

func (x *TaskPassReq) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskPassReq.ProtoReflect.Descriptor instead.
func (*TaskPassReq) Descriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{27}
}

func (x *TaskPassReq) GetTaskId() int64 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *TaskPassReq) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *TaskPassReq) GetVariablesJson() string {
	if x != nil {
		return x.VariablesJson
	}
	return ""
}

func (x *TaskPassReq) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *TaskPassReq) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *TaskPassReq) GetCreatedName() string {
	if x != nil {
		return x.CreatedName
	}
	return ""
}

func (x *TaskPassReq) GetDirectlyToWhoRejectedMe() int64 {
	if x != nil {
		return x.DirectlyToWhoRejectedMe
	}
	return 0
}

// 任务通过后流程直接返回到上一个驳回我的节点
type TaskPassDirectlyToWhoRejectedMeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId        int64  `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`                     // 任务ID
	Comment       string `protobuf:"bytes,2,opt,name=comment,proto3" json:"comment,omitempty"`                                  // 评论意见
	VariablesJson string `protobuf:"bytes,3,opt,name=variables_json,json=variablesJson,proto3" json:"variables_json,omitempty"` // 变量(Json)
	TenantId      string `protobuf:"bytes,4,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`                // 租户ID
	Data          string `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`                                        //
	CreatedName   string `protobuf:"bytes,6,opt,name=created_name,json=createdName,proto3" json:"created_name,omitempty"`       // 创建人
}

func (x *TaskPassDirectlyToWhoRejectedMeReq) Reset() {
	*x = TaskPassDirectlyToWhoRejectedMeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskPassDirectlyToWhoRejectedMeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskPassDirectlyToWhoRejectedMeReq) ProtoMessage() {}

func (x *TaskPassDirectlyToWhoRejectedMeReq) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskPassDirectlyToWhoRejectedMeReq.ProtoReflect.Descriptor instead.
func (*TaskPassDirectlyToWhoRejectedMeReq) Descriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{28}
}

func (x *TaskPassDirectlyToWhoRejectedMeReq) GetTaskId() int64 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *TaskPassDirectlyToWhoRejectedMeReq) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *TaskPassDirectlyToWhoRejectedMeReq) GetVariablesJson() string {
	if x != nil {
		return x.VariablesJson
	}
	return ""
}

func (x *TaskPassDirectlyToWhoRejectedMeReq) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *TaskPassDirectlyToWhoRejectedMeReq) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *TaskPassDirectlyToWhoRejectedMeReq) GetCreatedName() string {
	if x != nil {
		return x.CreatedName
	}
	return ""
}

// 任务驳回
type TaskRejectReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId        int64  `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`                     // 任务ID
	Comment       string `protobuf:"bytes,2,opt,name=comment,proto3" json:"comment,omitempty"`                                  // 评论意见
	VariablesJson string `protobuf:"bytes,3,opt,name=variables_json,json=variablesJson,proto3" json:"variables_json,omitempty"` // 变量(Json)
	TenantId      string `protobuf:"bytes,4,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`                // 租户ID
	Data          string `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`                                        //
	CreatedName   string `protobuf:"bytes,6,opt,name=created_name,json=createdName,proto3" json:"created_name,omitempty"`       // 创建人
}

func (x *TaskRejectReq) Reset() {
	*x = TaskRejectReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskRejectReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskRejectReq) ProtoMessage() {}

func (x *TaskRejectReq) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskRejectReq.ProtoReflect.Descriptor instead.
func (*TaskRejectReq) Descriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{29}
}

func (x *TaskRejectReq) GetTaskId() int64 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *TaskRejectReq) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *TaskRejectReq) GetVariablesJson() string {
	if x != nil {
		return x.VariablesJson
	}
	return ""
}

func (x *TaskRejectReq) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *TaskRejectReq) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *TaskRejectReq) GetCreatedName() string {
	if x != nil {
		return x.CreatedName
	}
	return ""
}

// 自由任务驳回
type TaskFreeRejectToUpstreamNodeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId         int64  `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`                            // 任务ID
	Comment        string `protobuf:"bytes,2,opt,name=comment,proto3" json:"comment,omitempty"`                                         // 评论意见
	VariablesJson  string `protobuf:"bytes,3,opt,name=variables_json,json=variablesJson,proto3" json:"variables_json,omitempty"`        // 变量(Json)
	TenantId       string `protobuf:"bytes,4,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`                       // 租户ID
	Data           string `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`                                               //
	CreatedName    string `protobuf:"bytes,6,opt,name=created_name,json=createdName,proto3" json:"created_name,omitempty"`              // 创建人
	RejectToNodeId string `protobuf:"bytes,7,opt,name=reject_to_node_id,json=rejectToNodeId,proto3" json:"reject_to_node_id,omitempty"` // 驳回到哪个节点
}

func (x *TaskFreeRejectToUpstreamNodeReq) Reset() {
	*x = TaskFreeRejectToUpstreamNodeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskFreeRejectToUpstreamNodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskFreeRejectToUpstreamNodeReq) ProtoMessage() {}

func (x *TaskFreeRejectToUpstreamNodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskFreeRejectToUpstreamNodeReq.ProtoReflect.Descriptor instead.
func (*TaskFreeRejectToUpstreamNodeReq) Descriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{30}
}

func (x *TaskFreeRejectToUpstreamNodeReq) GetTaskId() int64 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *TaskFreeRejectToUpstreamNodeReq) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *TaskFreeRejectToUpstreamNodeReq) GetVariablesJson() string {
	if x != nil {
		return x.VariablesJson
	}
	return ""
}

func (x *TaskFreeRejectToUpstreamNodeReq) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *TaskFreeRejectToUpstreamNodeReq) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *TaskFreeRejectToUpstreamNodeReq) GetCreatedName() string {
	if x != nil {
		return x.CreatedName
	}
	return ""
}

func (x *TaskFreeRejectToUpstreamNodeReq) GetRejectToNodeId() string {
	if x != nil {
		return x.RejectToNodeId
	}
	return ""
}

// 将任务转交给他人处理
type TaskTransferReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId         int64    `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`                            // 任务ID
	Users          []string `protobuf:"bytes,2,rep,name=users,proto3" json:"users,omitempty"`                                             // 用户
	TenantId       string   `protobuf:"bytes,3,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`                       // 租户ID
	Data           string   `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`                                               //
	CreatedName    string   `protobuf:"bytes,5,opt,name=created_name,json=createdName,proto3" json:"created_name,omitempty"`              // 创建人
	RejectToNodeId string   `protobuf:"bytes,6,opt,name=reject_to_node_id,json=rejectToNodeId,proto3" json:"reject_to_node_id,omitempty"` // 驳回到哪个节点
}

func (x *TaskTransferReq) Reset() {
	*x = TaskTransferReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskTransferReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskTransferReq) ProtoMessage() {}

func (x *TaskTransferReq) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskTransferReq.ProtoReflect.Descriptor instead.
func (*TaskTransferReq) Descriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{31}
}

func (x *TaskTransferReq) GetTaskId() int64 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *TaskTransferReq) GetUsers() []string {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *TaskTransferReq) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *TaskTransferReq) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *TaskTransferReq) GetCreatedName() string {
	if x != nil {
		return x.CreatedName
	}
	return ""
}

func (x *TaskTransferReq) GetRejectToNodeId() string {
	if x != nil {
		return x.RejectToNodeId
	}
	return ""
}

// 获取待办任务
type TaskToDoListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Current     int64  `protobuf:"varint,1,opt,name=current,proto3" json:"current,omitempty"`                           // 页码
	PageSize    int64  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`         // 页数
	UserId      string `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                // 用户ID
	ProceId     int64  `protobuf:"varint,4,opt,name=proce_id,json=proceId,proto3" json:"proce_id,omitempty"`            // 指定流程名称
	TenantId    string `protobuf:"bytes,5,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`          // 租户ID
	Data        string `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`                                  //
	CreatedName string `protobuf:"bytes,7,opt,name=created_name,json=createdName,proto3" json:"created_name,omitempty"` // 创建人
	SortByAsc   int64  `protobuf:"varint,8,opt,name=sort_by_asc,json=sortByAsc,proto3" json:"sort_by_asc,omitempty"`    // 驳回到哪个节点
}

func (x *TaskToDoListReq) Reset() {
	*x = TaskToDoListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskToDoListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskToDoListReq) ProtoMessage() {}

func (x *TaskToDoListReq) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskToDoListReq.ProtoReflect.Descriptor instead.
func (*TaskToDoListReq) Descriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{32}
}

func (x *TaskToDoListReq) GetCurrent() int64 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *TaskToDoListReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *TaskToDoListReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *TaskToDoListReq) GetProceId() int64 {
	if x != nil {
		return x.ProceId
	}
	return 0
}

func (x *TaskToDoListReq) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *TaskToDoListReq) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *TaskToDoListReq) GetCreatedName() string {
	if x != nil {
		return x.CreatedName
	}
	return ""
}

func (x *TaskToDoListReq) GetSortByAsc() int64 {
	if x != nil {
		return x.SortByAsc
	}
	return 0
}

// 获取待办任务返回
type TaskToDoListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64               `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"` // 总数
	List  []*ProcTaskListData `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`    // 内容
}

func (x *TaskToDoListResp) Reset() {
	*x = TaskToDoListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskToDoListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskToDoListResp) ProtoMessage() {}

func (x *TaskToDoListResp) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskToDoListResp.ProtoReflect.Descriptor instead.
func (*TaskToDoListResp) Descriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{33}
}

func (x *TaskToDoListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *TaskToDoListResp) GetList() []*ProcTaskListData {
	if x != nil {
		return x.List
	}
	return nil
}

// ProcTask 列表信息
type ProcTaskListData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                                // 任务ID
	ProcId             int64  `protobuf:"varint,2,opt,name=proc_id,json=procId,proto3" json:"proc_id,omitempty"`                                          // 流程ID
	ProcInstId         int64  `protobuf:"varint,3,opt,name=proc_inst_id,json=procInstId,proto3" json:"proc_inst_id,omitempty"`                            // 流程实例ID
	BusinessId         string `protobuf:"bytes,4,opt,name=business_id,json=businessId,proto3" json:"business_id,omitempty"`                               // 业务ID
	Starter            string `protobuf:"bytes,5,opt,name=starter,proto3" json:"starter,omitempty"`                                                       // 流程发起人用户ID
	NodeId             string `protobuf:"bytes,6,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`                                           // 节点ID
	NodeName           string `protobuf:"bytes,7,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`                                     // 节点名称
	PrevNodeId         string `protobuf:"bytes,8,opt,name=prev_node_id,json=prevNodeId,proto3" json:"prev_node_id,omitempty"`                             // 上个处理节点ID
	IsCosigned         int64  `protobuf:"varint,9,opt,name=is_cosigned,json=isCosigned,proto3" json:"is_cosigned,omitempty"`                              // 任意一人通过即可 1:会签
	BatchCode          string `protobuf:"bytes,10,opt,name=batch_code,json=batchCode,proto3" json:"batch_code,omitempty"`                                 // 批次码.节点会被驳回，一个节点可能产生多批task,用此码做分别\"
	UserId             string `protobuf:"bytes,11,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                          // 分配用户ID
	Status             int64  `protobuf:"varint,12,opt,name=status,proto3" json:"status,omitempty"`                                                       // 任务状态:0:初始 1:通过 2:驳回
	IsFinished         int64  `protobuf:"varint,13,opt,name=is_finished,json=isFinished,proto3" json:"is_finished,omitempty"`                             // 0:任务未完成 1:处理完成
	Comment            string `protobuf:"bytes,14,opt,name=comment,proto3" json:"comment,omitempty"`                                                      // 任务备注
	ProcInstCreateTime int64  `protobuf:"varint,15,opt,name=proc_inst_create_time,json=procInstCreateTime,proto3" json:"proc_inst_create_time,omitempty"` // 流程实例创建时间
	FinishedTime       int64  `protobuf:"varint,16,opt,name=finished_time,json=finishedTime,proto3" json:"finished_time,omitempty"`                       // 处理任务时间
	Data               string `protobuf:"bytes,17,opt,name=data,proto3" json:"data,omitempty"`                                                            //
	CreatedAt          int64  `protobuf:"varint,18,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                                // 创建时间
	UpdatedAt          int64  `protobuf:"varint,19,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`                                // 更新时间
	CreatedName        string `protobuf:"bytes,20,opt,name=created_name,json=createdName,proto3" json:"created_name,omitempty"`                           // 创建人
	UpdatedName        string `protobuf:"bytes,21,opt,name=updated_name,json=updatedName,proto3" json:"updated_name,omitempty"`                           // 更新人
}

func (x *ProcTaskListData) Reset() {
	*x = ProcTaskListData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcTaskListData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcTaskListData) ProtoMessage() {}

func (x *ProcTaskListData) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcTaskListData.ProtoReflect.Descriptor instead.
func (*ProcTaskListData) Descriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{34}
}

func (x *ProcTaskListData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProcTaskListData) GetProcId() int64 {
	if x != nil {
		return x.ProcId
	}
	return 0
}

func (x *ProcTaskListData) GetProcInstId() int64 {
	if x != nil {
		return x.ProcInstId
	}
	return 0
}

func (x *ProcTaskListData) GetBusinessId() string {
	if x != nil {
		return x.BusinessId
	}
	return ""
}

func (x *ProcTaskListData) GetStarter() string {
	if x != nil {
		return x.Starter
	}
	return ""
}

func (x *ProcTaskListData) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *ProcTaskListData) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *ProcTaskListData) GetPrevNodeId() string {
	if x != nil {
		return x.PrevNodeId
	}
	return ""
}

func (x *ProcTaskListData) GetIsCosigned() int64 {
	if x != nil {
		return x.IsCosigned
	}
	return 0
}

func (x *ProcTaskListData) GetBatchCode() string {
	if x != nil {
		return x.BatchCode
	}
	return ""
}

func (x *ProcTaskListData) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ProcTaskListData) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ProcTaskListData) GetIsFinished() int64 {
	if x != nil {
		return x.IsFinished
	}
	return 0
}

func (x *ProcTaskListData) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *ProcTaskListData) GetProcInstCreateTime() int64 {
	if x != nil {
		return x.ProcInstCreateTime
	}
	return 0
}

func (x *ProcTaskListData) GetFinishedTime() int64 {
	if x != nil {
		return x.FinishedTime
	}
	return 0
}

func (x *ProcTaskListData) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *ProcTaskListData) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *ProcTaskListData) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *ProcTaskListData) GetCreatedName() string {
	if x != nil {
		return x.CreatedName
	}
	return ""
}

func (x *ProcTaskListData) GetUpdatedName() string {
	if x != nil {
		return x.UpdatedName
	}
	return ""
}

// 获取已办任务
type TaskFinishedListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Current         int64  `protobuf:"varint,1,opt,name=current,proto3" json:"current,omitempty"`                                            // 页码
	PageSize        int64  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`                          // 页数
	UserId          string `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                 // 用户ID
	ProceName       string `protobuf:"bytes,4,opt,name=proce_name,json=proceName,proto3" json:"proce_name,omitempty"`                        // 指定流程名称
	TenantId        string `protobuf:"bytes,5,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`                           // 租户ID
	Data            string `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`                                                   //
	CreatedName     string `protobuf:"bytes,7,opt,name=created_name,json=createdName,proto3" json:"created_name,omitempty"`                  // 创建人
	SortByAsc       int64  `protobuf:"varint,8,opt,name=sort_by_asc,json=sortByAsc,proto3" json:"sort_by_asc,omitempty"`                     // 驳回到哪个节点
	IgnoreStartByMe int64  `protobuf:"varint,9,opt,name=ignore_start_by_me,json=ignoreStartByMe,proto3" json:"ignore_start_by_me,omitempty"` // 是否忽略由我开启流程,而生成处理人是我自己的任务
}

func (x *TaskFinishedListReq) Reset() {
	*x = TaskFinishedListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskFinishedListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskFinishedListReq) ProtoMessage() {}

func (x *TaskFinishedListReq) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskFinishedListReq.ProtoReflect.Descriptor instead.
func (*TaskFinishedListReq) Descriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{35}
}

func (x *TaskFinishedListReq) GetCurrent() int64 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *TaskFinishedListReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *TaskFinishedListReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *TaskFinishedListReq) GetProceName() string {
	if x != nil {
		return x.ProceName
	}
	return ""
}

func (x *TaskFinishedListReq) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *TaskFinishedListReq) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *TaskFinishedListReq) GetCreatedName() string {
	if x != nil {
		return x.CreatedName
	}
	return ""
}

func (x *TaskFinishedListReq) GetSortByAsc() int64 {
	if x != nil {
		return x.SortByAsc
	}
	return 0
}

func (x *TaskFinishedListReq) GetIgnoreStartByMe() int64 {
	if x != nil {
		return x.IgnoreStartByMe
	}
	return 0
}

// 获取已办任务返回
type TaskFinishedListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64               `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"` // 总数
	List  []*ProcTaskListData `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`    // 内容
}

func (x *TaskFinishedListResp) Reset() {
	*x = TaskFinishedListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskFinishedListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskFinishedListResp) ProtoMessage() {}

func (x *TaskFinishedListResp) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskFinishedListResp.ProtoReflect.Descriptor instead.
func (*TaskFinishedListResp) Descriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{36}
}

func (x *TaskFinishedListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *TaskFinishedListResp) GetList() []*ProcTaskListData {
	if x != nil {
		return x.List
	}
	return nil
}

// 获取本任务所在节点的所有上游节点
type TaskUpstreamNodeListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Taskid   int64  `protobuf:"varint,1,opt,name=taskid,proto3" json:"taskid,omitempty"`                    // 页码
	TenantId string `protobuf:"bytes,2,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"` // 租户ID
}

func (x *TaskUpstreamNodeListReq) Reset() {
	*x = TaskUpstreamNodeListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskUpstreamNodeListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskUpstreamNodeListReq) ProtoMessage() {}

func (x *TaskUpstreamNodeListReq) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskUpstreamNodeListReq.ProtoReflect.Descriptor instead.
func (*TaskUpstreamNodeListReq) Descriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{37}
}

func (x *TaskUpstreamNodeListReq) GetTaskid() int64 {
	if x != nil {
		return x.Taskid
	}
	return 0
}

func (x *TaskUpstreamNodeListReq) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

type TaskUpstreamNodeListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64                       `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"` // 总数
	List  []*TaskUpstreamNodeListDate `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`    // 内容
}

func (x *TaskUpstreamNodeListResp) Reset() {
	*x = TaskUpstreamNodeListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskUpstreamNodeListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskUpstreamNodeListResp) ProtoMessage() {}

func (x *TaskUpstreamNodeListResp) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskUpstreamNodeListResp.ProtoReflect.Descriptor instead.
func (*TaskUpstreamNodeListResp) Descriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{38}
}

func (x *TaskUpstreamNodeListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *TaskUpstreamNodeListResp) GetList() []*TaskUpstreamNodeListDate {
	if x != nil {
		return x.List
	}
	return nil
}

// 获取本任务所在节点的所有上游节点返回
type TaskUpstreamNodeListDate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                                // 任务ID
	ProcId             int64  `protobuf:"varint,2,opt,name=proc_id,json=procId,proto3" json:"proc_id,omitempty"`                                          // 流程ID
	ProcInstId         int64  `protobuf:"varint,3,opt,name=proc_inst_id,json=procInstId,proto3" json:"proc_inst_id,omitempty"`                            // 流程实例ID
	BusinessId         string `protobuf:"bytes,4,opt,name=business_id,json=businessId,proto3" json:"business_id,omitempty"`                               // 业务ID
	Starter            string `protobuf:"bytes,5,opt,name=starter,proto3" json:"starter,omitempty"`                                                       // 流程发起人用户ID
	NodeId             string `protobuf:"bytes,6,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`                                           // 节点ID
	NodeName           string `protobuf:"bytes,7,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`                                     // 节点名称
	PrevNodeId         string `protobuf:"bytes,8,opt,name=prev_node_id,json=prevNodeId,proto3" json:"prev_node_id,omitempty"`                             // 上个处理节点ID
	IsCosigned         int64  `protobuf:"varint,9,opt,name=is_cosigned,json=isCosigned,proto3" json:"is_cosigned,omitempty"`                              // 任意一人通过即可 1:会签
	BatchCode          string `protobuf:"bytes,10,opt,name=batch_code,json=batchCode,proto3" json:"batch_code,omitempty"`                                 // 批次码.节点会被驳回，一个节点可能产生多批task,用此码做分别\"
	UserId             string `protobuf:"bytes,11,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                          // 分配用户ID
	Status             int64  `protobuf:"varint,12,opt,name=status,proto3" json:"status,omitempty"`                                                       // 任务状态:0:初始 1:通过 2:驳回
	IsFinished         int64  `protobuf:"varint,13,opt,name=is_finished,json=isFinished,proto3" json:"is_finished,omitempty"`                             // 0:任务未完成 1:处理完成
	Comment            string `protobuf:"bytes,14,opt,name=comment,proto3" json:"comment,omitempty"`                                                      // 任务备注
	ProcInstCreateTime int64  `protobuf:"varint,15,opt,name=proc_inst_create_time,json=procInstCreateTime,proto3" json:"proc_inst_create_time,omitempty"` // 流程实例创建时间
	FinishedTime       int64  `protobuf:"varint,16,opt,name=finished_time,json=finishedTime,proto3" json:"finished_time,omitempty"`                       // 处理任务时间
	Data               string `protobuf:"bytes,17,opt,name=data,proto3" json:"data,omitempty"`                                                            //
	CreatedAt          int64  `protobuf:"varint,18,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                                // 创建时间
	UpdatedAt          int64  `protobuf:"varint,19,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`                                // 更新时间
	CreatedName        string `protobuf:"bytes,20,opt,name=created_name,json=createdName,proto3" json:"created_name,omitempty"`                           // 创建人
	UpdatedName        string `protobuf:"bytes,21,opt,name=updated_name,json=updatedName,proto3" json:"updated_name,omitempty"`                           // 更新人
}

func (x *TaskUpstreamNodeListDate) Reset() {
	*x = TaskUpstreamNodeListDate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskUpstreamNodeListDate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskUpstreamNodeListDate) ProtoMessage() {}

func (x *TaskUpstreamNodeListDate) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskUpstreamNodeListDate.ProtoReflect.Descriptor instead.
func (*TaskUpstreamNodeListDate) Descriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{39}
}

func (x *TaskUpstreamNodeListDate) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TaskUpstreamNodeListDate) GetProcId() int64 {
	if x != nil {
		return x.ProcId
	}
	return 0
}

func (x *TaskUpstreamNodeListDate) GetProcInstId() int64 {
	if x != nil {
		return x.ProcInstId
	}
	return 0
}

func (x *TaskUpstreamNodeListDate) GetBusinessId() string {
	if x != nil {
		return x.BusinessId
	}
	return ""
}

func (x *TaskUpstreamNodeListDate) GetStarter() string {
	if x != nil {
		return x.Starter
	}
	return ""
}

func (x *TaskUpstreamNodeListDate) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *TaskUpstreamNodeListDate) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *TaskUpstreamNodeListDate) GetPrevNodeId() string {
	if x != nil {
		return x.PrevNodeId
	}
	return ""
}

func (x *TaskUpstreamNodeListDate) GetIsCosigned() int64 {
	if x != nil {
		return x.IsCosigned
	}
	return 0
}

func (x *TaskUpstreamNodeListDate) GetBatchCode() string {
	if x != nil {
		return x.BatchCode
	}
	return ""
}

func (x *TaskUpstreamNodeListDate) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *TaskUpstreamNodeListDate) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *TaskUpstreamNodeListDate) GetIsFinished() int64 {
	if x != nil {
		return x.IsFinished
	}
	return 0
}

func (x *TaskUpstreamNodeListDate) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *TaskUpstreamNodeListDate) GetProcInstCreateTime() int64 {
	if x != nil {
		return x.ProcInstCreateTime
	}
	return 0
}

func (x *TaskUpstreamNodeListDate) GetFinishedTime() int64 {
	if x != nil {
		return x.FinishedTime
	}
	return 0
}

func (x *TaskUpstreamNodeListDate) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *TaskUpstreamNodeListDate) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *TaskUpstreamNodeListDate) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *TaskUpstreamNodeListDate) GetCreatedName() string {
	if x != nil {
		return x.CreatedName
	}
	return ""
}

func (x *TaskUpstreamNodeListDate) GetUpdatedName() string {
	if x != nil {
		return x.UpdatedName
	}
	return ""
}

// 当前任务可以执行哪些操作
type TaskWhatCanIDoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Taskid   int64  `protobuf:"varint,1,opt,name=taskid,proto3" json:"taskid,omitempty"`                    // 页码
	TenantId string `protobuf:"bytes,2,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"` // 租户ID
}

func (x *TaskWhatCanIDoReq) Reset() {
	*x = TaskWhatCanIDoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskWhatCanIDoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskWhatCanIDoReq) ProtoMessage() {}

func (x *TaskWhatCanIDoReq) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskWhatCanIDoReq.ProtoReflect.Descriptor instead.
func (*TaskWhatCanIDoReq) Descriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{40}
}

func (x *TaskWhatCanIDoReq) GetTaskid() int64 {
	if x != nil {
		return x.Taskid
	}
	return 0
}

func (x *TaskWhatCanIDoReq) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

// 当前任务可以执行哪些操作返回
type TaskWhatCanIDoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                                // 任务ID
	ProcId             int64  `protobuf:"varint,2,opt,name=proc_id,json=procId,proto3" json:"proc_id,omitempty"`                                          // 流程ID
	ProcInstId         int64  `protobuf:"varint,3,opt,name=proc_inst_id,json=procInstId,proto3" json:"proc_inst_id,omitempty"`                            // 流程实例ID
	BusinessId         string `protobuf:"bytes,4,opt,name=business_id,json=businessId,proto3" json:"business_id,omitempty"`                               // 业务ID
	Starter            string `protobuf:"bytes,5,opt,name=starter,proto3" json:"starter,omitempty"`                                                       // 流程发起人用户ID
	NodeId             string `protobuf:"bytes,6,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`                                           // 节点ID
	NodeName           string `protobuf:"bytes,7,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`                                     // 节点名称
	PrevNodeId         string `protobuf:"bytes,8,opt,name=prev_node_id,json=prevNodeId,proto3" json:"prev_node_id,omitempty"`                             // 上个处理节点ID
	IsCosigned         int64  `protobuf:"varint,9,opt,name=is_cosigned,json=isCosigned,proto3" json:"is_cosigned,omitempty"`                              // 任意一人通过即可 1:会签
	BatchCode          string `protobuf:"bytes,10,opt,name=batch_code,json=batchCode,proto3" json:"batch_code,omitempty"`                                 // 批次码.节点会被驳回，一个节点可能产生多批task,用此码做分别\"
	UserId             string `protobuf:"bytes,11,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                          // 分配用户ID
	Status             int64  `protobuf:"varint,12,opt,name=status,proto3" json:"status,omitempty"`                                                       // 任务状态:0:初始 1:通过 2:驳回
	IsFinished         int64  `protobuf:"varint,13,opt,name=is_finished,json=isFinished,proto3" json:"is_finished,omitempty"`                             // 0:任务未完成 1:处理完成
	Comment            string `protobuf:"bytes,14,opt,name=comment,proto3" json:"comment,omitempty"`                                                      // 任务备注
	ProcInstCreateTime int64  `protobuf:"varint,15,opt,name=proc_inst_create_time,json=procInstCreateTime,proto3" json:"proc_inst_create_time,omitempty"` // 流程实例创建时间
	FinishedTime       int64  `protobuf:"varint,16,opt,name=finished_time,json=finishedTime,proto3" json:"finished_time,omitempty"`                       // 处理任务时间
	Data               string `protobuf:"bytes,17,opt,name=data,proto3" json:"data,omitempty"`                                                            //
	CreatedAt          int64  `protobuf:"varint,18,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                                // 创建时间
	UpdatedAt          int64  `protobuf:"varint,19,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`                                // 更新时间
	CreatedName        string `protobuf:"bytes,20,opt,name=created_name,json=createdName,proto3" json:"created_name,omitempty"`                           // 创建人
	UpdatedName        string `protobuf:"bytes,21,opt,name=updated_name,json=updatedName,proto3" json:"updated_name,omitempty"`                           // 更新人
}

func (x *TaskWhatCanIDoResp) Reset() {
	*x = TaskWhatCanIDoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskWhatCanIDoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskWhatCanIDoResp) ProtoMessage() {}

func (x *TaskWhatCanIDoResp) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskWhatCanIDoResp.ProtoReflect.Descriptor instead.
func (*TaskWhatCanIDoResp) Descriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{41}
}

func (x *TaskWhatCanIDoResp) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TaskWhatCanIDoResp) GetProcId() int64 {
	if x != nil {
		return x.ProcId
	}
	return 0
}

func (x *TaskWhatCanIDoResp) GetProcInstId() int64 {
	if x != nil {
		return x.ProcInstId
	}
	return 0
}

func (x *TaskWhatCanIDoResp) GetBusinessId() string {
	if x != nil {
		return x.BusinessId
	}
	return ""
}

func (x *TaskWhatCanIDoResp) GetStarter() string {
	if x != nil {
		return x.Starter
	}
	return ""
}

func (x *TaskWhatCanIDoResp) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *TaskWhatCanIDoResp) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *TaskWhatCanIDoResp) GetPrevNodeId() string {
	if x != nil {
		return x.PrevNodeId
	}
	return ""
}

func (x *TaskWhatCanIDoResp) GetIsCosigned() int64 {
	if x != nil {
		return x.IsCosigned
	}
	return 0
}

func (x *TaskWhatCanIDoResp) GetBatchCode() string {
	if x != nil {
		return x.BatchCode
	}
	return ""
}

func (x *TaskWhatCanIDoResp) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *TaskWhatCanIDoResp) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *TaskWhatCanIDoResp) GetIsFinished() int64 {
	if x != nil {
		return x.IsFinished
	}
	return 0
}

func (x *TaskWhatCanIDoResp) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *TaskWhatCanIDoResp) GetProcInstCreateTime() int64 {
	if x != nil {
		return x.ProcInstCreateTime
	}
	return 0
}

func (x *TaskWhatCanIDoResp) GetFinishedTime() int64 {
	if x != nil {
		return x.FinishedTime
	}
	return 0
}

func (x *TaskWhatCanIDoResp) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *TaskWhatCanIDoResp) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *TaskWhatCanIDoResp) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *TaskWhatCanIDoResp) GetCreatedName() string {
	if x != nil {
		return x.CreatedName
	}
	return ""
}

func (x *TaskWhatCanIDoResp) GetUpdatedName() string {
	if x != nil {
		return x.UpdatedName
	}
	return ""
}

// 任务信息
type TaskInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Taskid   int64  `protobuf:"varint,1,opt,name=taskid,proto3" json:"taskid,omitempty"`                    // 页码
	TenantId string `protobuf:"bytes,2,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"` // 租户ID
}

func (x *TaskInfoReq) Reset() {
	*x = TaskInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskInfoReq) ProtoMessage() {}

func (x *TaskInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskInfoReq.ProtoReflect.Descriptor instead.
func (*TaskInfoReq) Descriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{42}
}

func (x *TaskInfoReq) GetTaskid() int64 {
	if x != nil {
		return x.Taskid
	}
	return 0
}

func (x *TaskInfoReq) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

// 任务信息返回
type TaskInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                                // 任务ID
	ProcId             int64  `protobuf:"varint,2,opt,name=proc_id,json=procId,proto3" json:"proc_id,omitempty"`                                          // 流程ID
	ProcInstId         int64  `protobuf:"varint,3,opt,name=proc_inst_id,json=procInstId,proto3" json:"proc_inst_id,omitempty"`                            // 流程实例ID
	BusinessId         string `protobuf:"bytes,4,opt,name=business_id,json=businessId,proto3" json:"business_id,omitempty"`                               // 业务ID
	Starter            string `protobuf:"bytes,5,opt,name=starter,proto3" json:"starter,omitempty"`                                                       // 流程发起人用户ID
	NodeId             string `protobuf:"bytes,6,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`                                           // 节点ID
	NodeName           string `protobuf:"bytes,7,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`                                     // 节点名称
	PrevNodeId         string `protobuf:"bytes,8,opt,name=prev_node_id,json=prevNodeId,proto3" json:"prev_node_id,omitempty"`                             // 上个处理节点ID
	IsCosigned         int64  `protobuf:"varint,9,opt,name=is_cosigned,json=isCosigned,proto3" json:"is_cosigned,omitempty"`                              // 任意一人通过即可 1:会签
	BatchCode          string `protobuf:"bytes,10,opt,name=batch_code,json=batchCode,proto3" json:"batch_code,omitempty"`                                 // 批次码.节点会被驳回，一个节点可能产生多批task,用此码做分别\"
	UserId             string `protobuf:"bytes,11,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                          // 分配用户ID
	Status             int64  `protobuf:"varint,12,opt,name=status,proto3" json:"status,omitempty"`                                                       // 任务状态:0:初始 1:通过 2:驳回
	IsFinished         int64  `protobuf:"varint,13,opt,name=is_finished,json=isFinished,proto3" json:"is_finished,omitempty"`                             // 0:任务未完成 1:处理完成
	Comment            string `protobuf:"bytes,14,opt,name=comment,proto3" json:"comment,omitempty"`                                                      // 任务备注
	ProcInstCreateTime int64  `protobuf:"varint,15,opt,name=proc_inst_create_time,json=procInstCreateTime,proto3" json:"proc_inst_create_time,omitempty"` // 流程实例创建时间
	FinishedTime       int64  `protobuf:"varint,16,opt,name=finished_time,json=finishedTime,proto3" json:"finished_time,omitempty"`                       // 处理任务时间
	Data               string `protobuf:"bytes,17,opt,name=data,proto3" json:"data,omitempty"`                                                            //
	CreatedAt          int64  `protobuf:"varint,18,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                                // 创建时间
	UpdatedAt          int64  `protobuf:"varint,19,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`                                // 更新时间
	CreatedName        string `protobuf:"bytes,20,opt,name=created_name,json=createdName,proto3" json:"created_name,omitempty"`                           // 创建人
	UpdatedName        string `protobuf:"bytes,21,opt,name=updated_name,json=updatedName,proto3" json:"updated_name,omitempty"`                           // 更新人
}

func (x *TaskInfoResp) Reset() {
	*x = TaskInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskInfoResp) ProtoMessage() {}

func (x *TaskInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskInfoResp.ProtoReflect.Descriptor instead.
func (*TaskInfoResp) Descriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{43}
}

func (x *TaskInfoResp) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TaskInfoResp) GetProcId() int64 {
	if x != nil {
		return x.ProcId
	}
	return 0
}

func (x *TaskInfoResp) GetProcInstId() int64 {
	if x != nil {
		return x.ProcInstId
	}
	return 0
}

func (x *TaskInfoResp) GetBusinessId() string {
	if x != nil {
		return x.BusinessId
	}
	return ""
}

func (x *TaskInfoResp) GetStarter() string {
	if x != nil {
		return x.Starter
	}
	return ""
}

func (x *TaskInfoResp) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *TaskInfoResp) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *TaskInfoResp) GetPrevNodeId() string {
	if x != nil {
		return x.PrevNodeId
	}
	return ""
}

func (x *TaskInfoResp) GetIsCosigned() int64 {
	if x != nil {
		return x.IsCosigned
	}
	return 0
}

func (x *TaskInfoResp) GetBatchCode() string {
	if x != nil {
		return x.BatchCode
	}
	return ""
}

func (x *TaskInfoResp) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *TaskInfoResp) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *TaskInfoResp) GetIsFinished() int64 {
	if x != nil {
		return x.IsFinished
	}
	return 0
}

func (x *TaskInfoResp) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *TaskInfoResp) GetProcInstCreateTime() int64 {
	if x != nil {
		return x.ProcInstCreateTime
	}
	return 0
}

func (x *TaskInfoResp) GetFinishedTime() int64 {
	if x != nil {
		return x.FinishedTime
	}
	return 0
}

func (x *TaskInfoResp) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *TaskInfoResp) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *TaskInfoResp) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *TaskInfoResp) GetCreatedName() string {
	if x != nil {
		return x.CreatedName
	}
	return ""
}

func (x *TaskInfoResp) GetUpdatedName() string {
	if x != nil {
		return x.UpdatedName
	}
	return ""
}

// ProcTask 分页查询
type ProcTaskListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Current            int64  `protobuf:"varint,1,opt,name=current,proto3" json:"current,omitempty"`                                                      // 页码
	PageSize           int64  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`                                    // 页数
	ProcId             int64  `protobuf:"varint,3,opt,name=proc_id,json=procId,proto3" json:"proc_id,omitempty"`                                          // 流程ID
	ProcInstId         int64  `protobuf:"varint,4,opt,name=proc_inst_id,json=procInstId,proto3" json:"proc_inst_id,omitempty"`                            // 流程实例ID
	BusinessId         string `protobuf:"bytes,5,opt,name=business_id,json=businessId,proto3" json:"business_id,omitempty"`                               // 业务ID
	Starter            string `protobuf:"bytes,6,opt,name=starter,proto3" json:"starter,omitempty"`                                                       // 流程发起人用户ID
	NodeId             string `protobuf:"bytes,7,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`                                           // 节点ID
	NodeName           string `protobuf:"bytes,8,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`                                     // 节点名称
	PrevNodeId         string `protobuf:"bytes,9,opt,name=prev_node_id,json=prevNodeId,proto3" json:"prev_node_id,omitempty"`                             // 上个处理节点ID
	IsCosigned         int64  `protobuf:"varint,10,opt,name=is_cosigned,json=isCosigned,proto3" json:"is_cosigned,omitempty"`                             // 任意一人通过即可 1:会签
	BatchCode          string `protobuf:"bytes,11,opt,name=batch_code,json=batchCode,proto3" json:"batch_code,omitempty"`                                 // 批次码.节点会被驳回，一个节点可能产生多批task,用此码做分别\"
	UserId             string `protobuf:"bytes,12,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                          // 分配用户ID
	Status             int64  `protobuf:"varint,13,opt,name=status,proto3" json:"status,omitempty"`                                                       // 任务状态:0:初始 1:通过 2:驳回
	IsFinished         int64  `protobuf:"varint,14,opt,name=is_finished,json=isFinished,proto3" json:"is_finished,omitempty"`                             // 0:任务未完成 1:处理完成
	Comment            string `protobuf:"bytes,15,opt,name=comment,proto3" json:"comment,omitempty"`                                                      // 任务备注
	ProcInstCreateTime int64  `protobuf:"varint,16,opt,name=proc_inst_create_time,json=procInstCreateTime,proto3" json:"proc_inst_create_time,omitempty"` // 流程实例创建时间
	FinishedTime       int64  `protobuf:"varint,17,opt,name=finished_time,json=finishedTime,proto3" json:"finished_time,omitempty"`                       // 处理任务时间
	TenantId           string `protobuf:"bytes,18,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`                                    // 租户ID
	Data               string `protobuf:"bytes,19,opt,name=data,proto3" json:"data,omitempty"`                                                            //
}

func (x *ProcTaskListReq) Reset() {
	*x = ProcTaskListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcTaskListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcTaskListReq) ProtoMessage() {}

func (x *ProcTaskListReq) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcTaskListReq.ProtoReflect.Descriptor instead.
func (*ProcTaskListReq) Descriptor() ([]byte, []int) {
	return file_workflow_proto_rawDescGZIP(), []int{44}
}

func (x *ProcTaskListReq) GetCurrent() int64 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *ProcTaskListReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ProcTaskListReq) GetProcId() int64 {
	if x != nil {
		return x.ProcId
	}
	return 0
}

func (x *ProcTaskListReq) GetProcInstId() int64 {
	if x != nil {
		return x.ProcInstId
	}
	return 0
}

func (x *ProcTaskListReq) GetBusinessId() string {
	if x != nil {
		return x.BusinessId
	}
	return ""
}

func (x *ProcTaskListReq) GetStarter() string {
	if x != nil {
		return x.Starter
	}
	return ""
}

func (x *ProcTaskListReq) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *ProcTaskListReq) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *ProcTaskListReq) GetPrevNodeId() string {
	if x != nil {
		return x.PrevNodeId
	}
	return ""
}

func (x *ProcTaskListReq) GetIsCosigned() int64 {
	if x != nil {
		return x.IsCosigned
	}
	return 0
}

func (x *ProcTaskListReq) GetBatchCode() string {
	if x != nil {
		return x.BatchCode
	}
	return ""
}

func (x *ProcTaskListReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ProcTaskListReq) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ProcTaskListReq) GetIsFinished() int64 {
	if x != nil {
		return x.IsFinished
	}
	return 0
}

func (x *ProcTaskListReq) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *ProcTaskListReq) GetProcInstCreateTime() int64 {
	if x != nil {
		return x.ProcInstCreateTime
	}
	return 0
}

func (x *ProcTaskListReq) GetFinishedTime() int64 {
	if x != nil {
		return x.FinishedTime
	}
	return 0
}

func (x *ProcTaskListReq) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *ProcTaskListReq) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

var File_workflow_proto protoreflect.FileDescriptor

var file_workflow_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x22, 0x0c, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0xa6,
	0x01, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x63, 0x44, 0x65, 0x66, 0x53, 0x61, 0x76, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x24, 0x0a,
	0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x62, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x63, 0x44,
	0x65, 0x66, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x9b, 0x02, 0x0a, 0x10,
	0x50, 0x72, 0x6f, 0x63, 0x44, 0x65, 0x66, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x40, 0x0a, 0x11, 0x50, 0x72, 0x6f,
	0x63, 0x44, 0x65, 0x66, 0x46, 0x69, 0x6e, 0x64, 0x4f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xe1, 0x02, 0x0a, 0x12,
	0x50, 0x72, 0x6f, 0x63, 0x44, 0x65, 0x66, 0x46, 0x69, 0x6e, 0x64, 0x4f, 0x6e, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x9d, 0x02, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x63, 0x44, 0x65, 0x66, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x63,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x24, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x5c, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x63, 0x44, 0x65, 0x66, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x33, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x44, 0x65, 0x66, 0x4c,
	0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xde, 0x02,
	0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x63, 0x44, 0x65, 0x66, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xba,
	0x02, 0x0a, 0x12, 0x48, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x44, 0x65, 0x66, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x70, 0x72, 0x6f, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70,
	0x72, 0x6f, 0x63, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x63, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0e,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x64, 0x0a, 0x13, 0x48,
	0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x44, 0x65, 0x66, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x37, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63,
	0x44, 0x65, 0x66, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x22, 0xfb, 0x02, 0x0a, 0x13, 0x48, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x44, 0x65,
	0x66, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x72, 0x6f,
	0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x63,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0xe1, 0x01, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x63, 0x49, 0x6e, 0x73, 0x74, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x63, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x76, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x4a, 0x73, 0x6f, 0x6e, 0x12,
	0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x21, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x63, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x63, 0x49, 0x6e, 0x73, 0x74, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xb3, 0x01, 0x0a, 0x11, 0x50, 0x72, 0x6f,
	0x63, 0x49, 0x6e, 0x73, 0x74, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x24,
	0x0a, 0x0e, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x0c, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xf2,
	0x02, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x63, 0x49, 0x6e, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x63, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x72, 0x6f, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x72, 0x6f, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72,
	0x6f, 0x63, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a,
	0x0b, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64,
	0x12, 0x25, 0x0a, 0x0e, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x5f, 0x6a, 0x73,
	0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x21, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x41, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x63, 0x49, 0x6e, 0x73, 0x74, 0x46,
	0x69, 0x6e, 0x64, 0x4f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xb8, 0x03, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x63, 0x49,
	0x6e, 0x73, 0x74, 0x46, 0x69, 0x6e, 0x64, 0x4f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x70, 0x72, 0x6f, 0x63, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x63,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x65, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x76, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x4a, 0x73, 0x6f,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0xf4, 0x02, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x63, 0x49, 0x6e, 0x73, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x70, 0x72, 0x6f, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70,
	0x72, 0x6f, 0x63, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x63, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x72,
	0x12, 0x26, 0x0a, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x76, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x4a, 0x73, 0x6f, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x5e, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x63,
	0x49, 0x6e, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x34, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x49, 0x6e, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xb5, 0x03, 0x0a, 0x10, 0x50, 0x72, 0x6f,
	0x63, 0x49, 0x6e, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x70, 0x72, 0x6f, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x70, 0x72, 0x6f, 0x63, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x63, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65,
	0x72, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x76, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x4a, 0x73, 0x6f, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0xed, 0x02, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x63, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x63, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f,
	0x63, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x70, 0x72, 0x6f, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x72, 0x6f, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x72, 0x6f, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x76, 0x4e, 0x6f, 0x64, 0x65, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x69, 0x73, 0x43, 0x6f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x68, 0x0a, 0x15, 0x50, 0x72, 0x6f, 0x63, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x39, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x50,
	0x72, 0x6f, 0x63, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xae, 0x03, 0x0a, 0x15, 0x50,
	0x72, 0x6f, 0x63, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x63, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x70, 0x72, 0x6f, 0x63, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x76, 0x4e,
	0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x69, 0x73, 0x43, 0x6f, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xf1, 0x02, 0x0a, 0x18,
	0x48, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x70, 0x72, 0x6f, 0x63, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x63,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x72, 0x6f, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x72, 0x6f, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0c, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x76, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x69, 0x73, 0x43, 0x6f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x70, 0x0a, 0x19, 0x48, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x3d, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x22, 0xb2, 0x03, 0x0a, 0x19, 0x48, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x70, 0x72, 0x6f, 0x63, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x63,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x72, 0x6f, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x72, 0x6f, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0c, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x76, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x69, 0x73, 0x43, 0x6f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xf9, 0x01, 0x0a, 0x0b, 0x54, 0x61, 0x73, 0x6b, 0x50,
	0x61, 0x73, 0x73, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x76, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x4a, 0x73, 0x6f, 0x6e,
	0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x1b, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6c, 0x79,
	0x5f, 0x74, 0x6f, 0x5f, 0x77, 0x68, 0x6f, 0x5f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x5f, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x6c, 0x79, 0x54, 0x6f, 0x57, 0x68, 0x6f, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x4d, 0x65, 0x22, 0xd2, 0x01, 0x0a, 0x22, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x61, 0x73, 0x73, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x6c, 0x79, 0x54, 0x6f, 0x57, 0x68, 0x6f, 0x52, 0x65, 0x6a, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e,
	0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x4a,
	0x73, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xbd, 0x01, 0x0a, 0x0d, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e,
	0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x4a,
	0x73, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xfa, 0x01, 0x0a, 0x1f, 0x54, 0x61, 0x73, 0x6b,
	0x46, 0x72, 0x65, 0x65, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x6f, 0x55, 0x70, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x61,
	0x73, 0x6b, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x25,
	0x0a, 0x0e, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x5f, 0x6a, 0x73, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x11, 0x72, 0x65, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x6f, 0x4e, 0x6f,
	0x64, 0x65, 0x49, 0x64, 0x22, 0xbf, 0x01, 0x0a, 0x0f, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x11, 0x72,
	0x65, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x6f,
	0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x22, 0xf0, 0x01, 0x0a, 0x0f, 0x54, 0x61, 0x73, 0x6b, 0x54,
	0x6f, 0x44, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x73, 0x6f, 0x72,
	0x74, 0x5f, 0x62, 0x79, 0x5f, 0x61, 0x73, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x73, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x41, 0x73, 0x63, 0x22, 0x5e, 0x0a, 0x10, 0x54, 0x61, 0x73,
	0x6b, 0x54, 0x6f, 0x44, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x34, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x8c, 0x05, 0x0a, 0x10, 0x50, 0x72,
	0x6f, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x70, 0x72, 0x6f, 0x63, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70,
	0x72, 0x6f, 0x63, 0x49, 0x6e, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x70, 0x72,
	0x65, 0x76, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x70, 0x72, 0x65, 0x76, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x69, 0x73, 0x5f, 0x63, 0x6f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x69, 0x73, 0x43, 0x6f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x69, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x15, 0x70, 0x72, 0x6f, 0x63,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x63, 0x49, 0x6e, 0x73,
	0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x66,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xa5, 0x02, 0x0a, 0x13, 0x54, 0x61, 0x73,
	0x6b, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x21, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x61,
	0x73, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x79,
	0x41, 0x73, 0x63, 0x12, 0x2b, 0x0a, 0x12, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0f, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x42, 0x79, 0x4d, 0x65,
	0x22, 0x62, 0x0a, 0x14, 0x54, 0x61, 0x73, 0x6b, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x34,
	0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x77,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x72,
	0x6f, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x22, 0x4e, 0x0a, 0x17, 0x54, 0x61, 0x73, 0x6b, 0x55, 0x70, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12,
	0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x74, 0x61, 0x73, 0x6b, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x49, 0x64, 0x22, 0x6e, 0x0a, 0x18, 0x54, 0x61, 0x73, 0x6b, 0x55, 0x70, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x3c, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x65, 0x52, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x22, 0x94, 0x05, 0x0a, 0x18, 0x54, 0x61, 0x73, 0x6b, 0x55, 0x70, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x63, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x70, 0x72,
	0x6f, 0x63, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x70, 0x72, 0x6f, 0x63, 0x49, 0x6e, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0c, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x76, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x69, 0x73, 0x43, 0x6f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x69, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x15, 0x70,
	0x72, 0x6f, 0x63, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x63,
	0x49, 0x6e, 0x73, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x48, 0x0a, 0x11, 0x54,
	0x61, 0x73, 0x6b, 0x57, 0x68, 0x61, 0x74, 0x43, 0x61, 0x6e, 0x49, 0x44, 0x6f, 0x52, 0x65, 0x71,
	0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x8e, 0x05, 0x0a, 0x12, 0x54, 0x61, 0x73, 0x6b, 0x57, 0x68,
	0x61, 0x74, 0x43, 0x61, 0x6e, 0x49, 0x44, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x70, 0x72, 0x6f, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70,
	0x72, 0x6f, 0x63, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x72, 0x6f,
	0x63, 0x49, 0x6e, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x76,
	0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x70, 0x72, 0x65, 0x76, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73,
	0x5f, 0x63, 0x6f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x69, 0x73, 0x43, 0x6f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x62, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69,
	0x73, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x69, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x15, 0x70, 0x72, 0x6f, 0x63, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x63, 0x49, 0x6e, 0x73, 0x74, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x42, 0x0a, 0x0b, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x69, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x88, 0x05, 0x0a, 0x0c, 0x54,
	0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x70,
	0x72, 0x6f, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x72,
	0x6f, 0x63, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x63,
	0x49, 0x6e, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65,
	0x72, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e,
	0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x76, 0x5f,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70,
	0x72, 0x65, 0x76, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f,
	0x63, 0x6f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x69, 0x73, 0x43, 0x6f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73,
	0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x69, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x15, 0x70, 0x72, 0x6f, 0x63, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x63, 0x49, 0x6e, 0x73, 0x74, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xcb, 0x04, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x63, 0x54, 0x61,
	0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x63, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x70, 0x72, 0x6f,
	0x63, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x70, 0x72, 0x6f, 0x63, 0x49, 0x6e, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x62,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0c,
	0x70, 0x72, 0x65, 0x76, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x76, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x69, 0x73, 0x43, 0x6f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x69, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x15, 0x70, 0x72,
	0x6f, 0x63, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x63, 0x49,
	0x6e, 0x73, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x32, 0xb1, 0x10, 0x0a, 0x08, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x12, 0x49, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x63, 0x44, 0x65, 0x66, 0x53, 0x61, 0x76, 0x65, 0x12,
	0x1e, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x50, 0x72, 0x6f, 0x63, 0x44, 0x65, 0x66, 0x53, 0x61, 0x76, 0x65, 0x52, 0x65, 0x71, 0x1a,
	0x1a, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4d, 0x0a, 0x0d, 0x50,
	0x72, 0x6f, 0x63, 0x44, 0x65, 0x66, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x20, 0x2e, 0x77,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x72,
	0x6f, 0x63, 0x44, 0x65, 0x66, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1a,
	0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4d, 0x0a, 0x0d, 0x50, 0x72,
	0x6f, 0x63, 0x44, 0x65, 0x66, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x20, 0x2e, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x6f,
	0x63, 0x44, 0x65, 0x66, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x57, 0x0a, 0x0e, 0x50, 0x72, 0x6f,
	0x63, 0x44, 0x65, 0x66, 0x46, 0x69, 0x6e, 0x64, 0x4f, 0x6e, 0x65, 0x12, 0x21, 0x2e, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x6f,
	0x63, 0x44, 0x65, 0x66, 0x46, 0x69, 0x6e, 0x64, 0x4f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x22,
	0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x50, 0x72, 0x6f, 0x63, 0x44, 0x65, 0x66, 0x46, 0x69, 0x6e, 0x64, 0x4f, 0x6e, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x4e, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x63, 0x44, 0x65, 0x66, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x1e, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x44, 0x65, 0x66, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x1a, 0x1f, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x44, 0x65, 0x66, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x5a, 0x0a, 0x0f, 0x48, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x44, 0x65,
	0x66, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x44,
	0x65, 0x66, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x50,
	0x72, 0x6f, 0x63, 0x44, 0x65, 0x66, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4d,
	0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x63, 0x49, 0x6e, 0x73, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12,
	0x20, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x50, 0x72, 0x6f, 0x63, 0x49, 0x6e, 0x73, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65,
	0x71, 0x1a, 0x1a, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4f, 0x0a,
	0x0e, 0x50, 0x72, 0x6f, 0x63, 0x49, 0x6e, 0x73, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12,
	0x21, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x50, 0x72, 0x6f, 0x63, 0x49, 0x6e, 0x73, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4f,
	0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x63, 0x49, 0x6e, 0x73, 0x74, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65,
	0x12, 0x21, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x49, 0x6e, 0x73, 0x74, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65,
	0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x4f, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x63, 0x49, 0x6e, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x21, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x49, 0x6e, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x5a, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x63, 0x49, 0x6e, 0x73, 0x74, 0x46, 0x69, 0x6e, 0x64,
	0x4f, 0x6e, 0x65, 0x12, 0x22, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x49, 0x6e, 0x73, 0x74, 0x46, 0x69, 0x6e,
	0x64, 0x4f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x49, 0x6e, 0x73,
	0x74, 0x46, 0x69, 0x6e, 0x64, 0x4f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x51, 0x0a, 0x0c,
	0x50, 0x72, 0x6f, 0x63, 0x49, 0x6e, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1f, 0x2e, 0x77,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x72,
	0x6f, 0x63, 0x49, 0x6e, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x50,
	0x72, 0x6f, 0x63, 0x49, 0x6e, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x60, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x63, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x63,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x6c, 0x0a, 0x15, 0x48, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x2e, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x48, 0x69, 0x73, 0x74,
	0x50, 0x72, 0x6f, 0x63, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x43, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x61, 0x73, 0x73, 0x12, 0x1b, 0x2e, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x50, 0x61, 0x73, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x71, 0x0a, 0x1f, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x61, 0x73, 0x73,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6c, 0x79, 0x54, 0x6f, 0x57, 0x68, 0x6f, 0x52, 0x65, 0x6a,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x12, 0x32, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x61, 0x73,
	0x73, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6c, 0x79, 0x54, 0x6f, 0x57, 0x68, 0x6f, 0x52, 0x65,
	0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x47, 0x0a, 0x0a, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1d, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x6b, 0x0a, 0x1c, 0x54, 0x61, 0x73, 0x6b, 0x46, 0x72, 0x65, 0x65, 0x52, 0x65, 0x6a, 0x65,
	0x63, 0x74, 0x54, 0x6f, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4e, 0x6f, 0x64, 0x65,
	0x12, 0x2f, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x46, 0x72, 0x65, 0x65, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74,
	0x54, 0x6f, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x71, 0x1a, 0x1a, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4b, 0x0a,
	0x0c, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x1f, 0x2e,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x1a,
	0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x51, 0x0a, 0x0c, 0x54, 0x61,
	0x73, 0x6b, 0x54, 0x6f, 0x44, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1f, 0x2e, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x61, 0x73, 0x6b,
	0x54, 0x6f, 0x44, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x54, 0x6f, 0x44, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5d, 0x0a,
	0x10, 0x54, 0x61, 0x73, 0x6b, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x23, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x46, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x69, 0x0a, 0x14,
	0x54, 0x61, 0x73, 0x6b, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4e, 0x6f, 0x64, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x27, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x57, 0x0a, 0x0e, 0x54, 0x61, 0x73, 0x6b, 0x57,
	0x68, 0x61, 0x74, 0x43, 0x61, 0x6e, 0x49, 0x44, 0x6f, 0x12, 0x21, 0x2e, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x57,
	0x68, 0x61, 0x74, 0x43, 0x61, 0x6e, 0x49, 0x44, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x77,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x57, 0x68, 0x61, 0x74, 0x43, 0x61, 0x6e, 0x49, 0x44, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x45, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x2e, 0x77,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x42, 0x12, 0x5a, 0x10, 0x2e, 0x2f, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_workflow_proto_rawDescOnce sync.Once
	file_workflow_proto_rawDescData = file_workflow_proto_rawDesc
)

func file_workflow_proto_rawDescGZIP() []byte {
	file_workflow_proto_rawDescOnce.Do(func() {
		file_workflow_proto_rawDescData = protoimpl.X.CompressGZIP(file_workflow_proto_rawDescData)
	})
	return file_workflow_proto_rawDescData
}

var file_workflow_proto_msgTypes = make([]protoimpl.MessageInfo, 45)
var file_workflow_proto_goTypes = []interface{}{
	(*CommonResp)(nil),                         // 0: workflowclient.CommonResp
	(*ProcDefSaveReq)(nil),                     // 1: workflowclient.ProcDefSaveReq
	(*ProcDefDeleteReq)(nil),                   // 2: workflowclient.ProcDefDeleteReq
	(*ProcDefUpdateReq)(nil),                   // 3: workflowclient.ProcDefUpdateReq
	(*ProcDefFindOneReq)(nil),                  // 4: workflowclient.ProcDefFindOneReq
	(*ProcDefFindOneResp)(nil),                 // 5: workflowclient.ProcDefFindOneResp
	(*ProcDefListReq)(nil),                     // 6: workflowclient.ProcDefListReq
	(*ProcDefListResp)(nil),                    // 7: workflowclient.ProcDefListResp
	(*ProcDefListData)(nil),                    // 8: workflowclient.ProcDefListData
	(*HistProcDefListReq)(nil),                 // 9: workflowclient.HistProcDefListReq
	(*HistProcDefListResp)(nil),                // 10: workflowclient.HistProcDefListResp
	(*HistProcDefListData)(nil),                // 11: workflowclient.HistProcDefListData
	(*ProcInstStartReq)(nil),                   // 12: workflowclient.ProcInstStartReq
	(*ProcInstDeleteReq)(nil),                  // 13: workflowclient.ProcInstDeleteReq
	(*ProcInstRevokeReq)(nil),                  // 14: workflowclient.ProcInstRevokeReq
	(*ProcInstUpdateReq)(nil),                  // 15: workflowclient.ProcInstUpdateReq
	(*ProcInstFindOneReq)(nil),                 // 16: workflowclient.ProcInstFindOneReq
	(*ProcInstFindOneResp)(nil),                // 17: workflowclient.ProcInstFindOneResp
	(*ProcInstListReq)(nil),                    // 18: workflowclient.ProcInstListReq
	(*ProcInstListResp)(nil),                   // 19: workflowclient.ProcInstListResp
	(*ProcInstListData)(nil),                   // 20: workflowclient.ProcInstListData
	(*ProcExecutionListReq)(nil),               // 21: workflowclient.ProcExecutionListReq
	(*ProcExecutionListResp)(nil),              // 22: workflowclient.ProcExecutionListResp
	(*ProcExecutionListData)(nil),              // 23: workflowclient.ProcExecutionListData
	(*HistProcExecutionListReq)(nil),           // 24: workflowclient.HistProcExecutionListReq
	(*HistProcExecutionListResp)(nil),          // 25: workflowclient.HistProcExecutionListResp
	(*HistProcExecutionListData)(nil),          // 26: workflowclient.HistProcExecutionListData
	(*TaskPassReq)(nil),                        // 27: workflowclient.TaskPassReq
	(*TaskPassDirectlyToWhoRejectedMeReq)(nil), // 28: workflowclient.TaskPassDirectlyToWhoRejectedMeReq
	(*TaskRejectReq)(nil),                      // 29: workflowclient.TaskRejectReq
	(*TaskFreeRejectToUpstreamNodeReq)(nil),    // 30: workflowclient.TaskFreeRejectToUpstreamNodeReq
	(*TaskTransferReq)(nil),                    // 31: workflowclient.TaskTransferReq
	(*TaskToDoListReq)(nil),                    // 32: workflowclient.TaskToDoListReq
	(*TaskToDoListResp)(nil),                   // 33: workflowclient.TaskToDoListResp
	(*ProcTaskListData)(nil),                   // 34: workflowclient.ProcTaskListData
	(*TaskFinishedListReq)(nil),                // 35: workflowclient.TaskFinishedListReq
	(*TaskFinishedListResp)(nil),               // 36: workflowclient.TaskFinishedListResp
	(*TaskUpstreamNodeListReq)(nil),            // 37: workflowclient.TaskUpstreamNodeListReq
	(*TaskUpstreamNodeListResp)(nil),           // 38: workflowclient.TaskUpstreamNodeListResp
	(*TaskUpstreamNodeListDate)(nil),           // 39: workflowclient.TaskUpstreamNodeListDate
	(*TaskWhatCanIDoReq)(nil),                  // 40: workflowclient.TaskWhatCanIDoReq
	(*TaskWhatCanIDoResp)(nil),                 // 41: workflowclient.TaskWhatCanIDoResp
	(*TaskInfoReq)(nil),                        // 42: workflowclient.TaskInfoReq
	(*TaskInfoResp)(nil),                       // 43: workflowclient.TaskInfoResp
	(*ProcTaskListReq)(nil),                    // 44: workflowclient.ProcTaskListReq
}
var file_workflow_proto_depIdxs = []int32{
	8,  // 0: workflowclient.ProcDefListResp.list:type_name -> workflowclient.ProcDefListData
	11, // 1: workflowclient.HistProcDefListResp.list:type_name -> workflowclient.HistProcDefListData
	20, // 2: workflowclient.ProcInstListResp.list:type_name -> workflowclient.ProcInstListData
	23, // 3: workflowclient.ProcExecutionListResp.list:type_name -> workflowclient.ProcExecutionListData
	26, // 4: workflowclient.HistProcExecutionListResp.list:type_name -> workflowclient.HistProcExecutionListData
	34, // 5: workflowclient.TaskToDoListResp.list:type_name -> workflowclient.ProcTaskListData
	34, // 6: workflowclient.TaskFinishedListResp.list:type_name -> workflowclient.ProcTaskListData
	39, // 7: workflowclient.TaskUpstreamNodeListResp.list:type_name -> workflowclient.TaskUpstreamNodeListDate
	1,  // 8: workflowclient.Workflow.ProcDefSave:input_type -> workflowclient.ProcDefSaveReq
	2,  // 9: workflowclient.Workflow.ProcDefDelete:input_type -> workflowclient.ProcDefDeleteReq
	3,  // 10: workflowclient.Workflow.ProcDefUpdate:input_type -> workflowclient.ProcDefUpdateReq
	4,  // 11: workflowclient.Workflow.ProcDefFindOne:input_type -> workflowclient.ProcDefFindOneReq
	6,  // 12: workflowclient.Workflow.ProcDefList:input_type -> workflowclient.ProcDefListReq
	9,  // 13: workflowclient.Workflow.HistProcDefList:input_type -> workflowclient.HistProcDefListReq
	12, // 14: workflowclient.Workflow.ProcInstStart:input_type -> workflowclient.ProcInstStartReq
	13, // 15: workflowclient.Workflow.ProcInstDelete:input_type -> workflowclient.ProcInstDeleteReq
	14, // 16: workflowclient.Workflow.ProcInstRevoke:input_type -> workflowclient.ProcInstRevokeReq
	15, // 17: workflowclient.Workflow.ProcInstUpdate:input_type -> workflowclient.ProcInstUpdateReq
	16, // 18: workflowclient.Workflow.ProcInstFindOne:input_type -> workflowclient.ProcInstFindOneReq
	18, // 19: workflowclient.Workflow.ProcInstList:input_type -> workflowclient.ProcInstListReq
	21, // 20: workflowclient.Workflow.ProcExecutionList:input_type -> workflowclient.ProcExecutionListReq
	24, // 21: workflowclient.Workflow.HistProcExecutionList:input_type -> workflowclient.HistProcExecutionListReq
	27, // 22: workflowclient.Workflow.TaskPass:input_type -> workflowclient.TaskPassReq
	28, // 23: workflowclient.Workflow.TaskPassDirectlyToWhoRejectedMe:input_type -> workflowclient.TaskPassDirectlyToWhoRejectedMeReq
	29, // 24: workflowclient.Workflow.TaskReject:input_type -> workflowclient.TaskRejectReq
	30, // 25: workflowclient.Workflow.TaskFreeRejectToUpstreamNode:input_type -> workflowclient.TaskFreeRejectToUpstreamNodeReq
	31, // 26: workflowclient.Workflow.TaskTransfer:input_type -> workflowclient.TaskTransferReq
	32, // 27: workflowclient.Workflow.TaskToDoList:input_type -> workflowclient.TaskToDoListReq
	35, // 28: workflowclient.Workflow.TaskFinishedList:input_type -> workflowclient.TaskFinishedListReq
	37, // 29: workflowclient.Workflow.TaskUpstreamNodeList:input_type -> workflowclient.TaskUpstreamNodeListReq
	40, // 30: workflowclient.Workflow.TaskWhatCanIDo:input_type -> workflowclient.TaskWhatCanIDoReq
	42, // 31: workflowclient.Workflow.TaskInfo:input_type -> workflowclient.TaskInfoReq
	0,  // 32: workflowclient.Workflow.ProcDefSave:output_type -> workflowclient.CommonResp
	0,  // 33: workflowclient.Workflow.ProcDefDelete:output_type -> workflowclient.CommonResp
	0,  // 34: workflowclient.Workflow.ProcDefUpdate:output_type -> workflowclient.CommonResp
	5,  // 35: workflowclient.Workflow.ProcDefFindOne:output_type -> workflowclient.ProcDefFindOneResp
	7,  // 36: workflowclient.Workflow.ProcDefList:output_type -> workflowclient.ProcDefListResp
	10, // 37: workflowclient.Workflow.HistProcDefList:output_type -> workflowclient.HistProcDefListResp
	0,  // 38: workflowclient.Workflow.ProcInstStart:output_type -> workflowclient.CommonResp
	0,  // 39: workflowclient.Workflow.ProcInstDelete:output_type -> workflowclient.CommonResp
	0,  // 40: workflowclient.Workflow.ProcInstRevoke:output_type -> workflowclient.CommonResp
	0,  // 41: workflowclient.Workflow.ProcInstUpdate:output_type -> workflowclient.CommonResp
	17, // 42: workflowclient.Workflow.ProcInstFindOne:output_type -> workflowclient.ProcInstFindOneResp
	19, // 43: workflowclient.Workflow.ProcInstList:output_type -> workflowclient.ProcInstListResp
	22, // 44: workflowclient.Workflow.ProcExecutionList:output_type -> workflowclient.ProcExecutionListResp
	25, // 45: workflowclient.Workflow.HistProcExecutionList:output_type -> workflowclient.HistProcExecutionListResp
	0,  // 46: workflowclient.Workflow.TaskPass:output_type -> workflowclient.CommonResp
	0,  // 47: workflowclient.Workflow.TaskPassDirectlyToWhoRejectedMe:output_type -> workflowclient.CommonResp
	0,  // 48: workflowclient.Workflow.TaskReject:output_type -> workflowclient.CommonResp
	0,  // 49: workflowclient.Workflow.TaskFreeRejectToUpstreamNode:output_type -> workflowclient.CommonResp
	0,  // 50: workflowclient.Workflow.TaskTransfer:output_type -> workflowclient.CommonResp
	33, // 51: workflowclient.Workflow.TaskToDoList:output_type -> workflowclient.TaskToDoListResp
	36, // 52: workflowclient.Workflow.TaskFinishedList:output_type -> workflowclient.TaskFinishedListResp
	38, // 53: workflowclient.Workflow.TaskUpstreamNodeList:output_type -> workflowclient.TaskUpstreamNodeListResp
	41, // 54: workflowclient.Workflow.TaskWhatCanIDo:output_type -> workflowclient.TaskWhatCanIDoResp
	43, // 55: workflowclient.Workflow.TaskInfo:output_type -> workflowclient.TaskInfoResp
	32, // [32:56] is the sub-list for method output_type
	8,  // [8:32] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_workflow_proto_init() }
func file_workflow_proto_init() {
	if File_workflow_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_workflow_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcDefSaveReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcDefDeleteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcDefUpdateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcDefFindOneReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcDefFindOneResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcDefListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcDefListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcDefListData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistProcDefListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistProcDefListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistProcDefListData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcInstStartReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcInstDeleteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcInstRevokeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcInstUpdateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcInstFindOneReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcInstFindOneResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcInstListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcInstListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcInstListData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcExecutionListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcExecutionListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcExecutionListData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistProcExecutionListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistProcExecutionListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistProcExecutionListData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskPassReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskPassDirectlyToWhoRejectedMeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskRejectReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskFreeRejectToUpstreamNodeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskTransferReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskToDoListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskToDoListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcTaskListData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskFinishedListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskFinishedListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskUpstreamNodeListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskUpstreamNodeListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskUpstreamNodeListDate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskWhatCanIDoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskWhatCanIDoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcTaskListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_workflow_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   45,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_workflow_proto_goTypes,
		DependencyIndexes: file_workflow_proto_depIdxs,
		MessageInfos:      file_workflow_proto_msgTypes,
	}.Build()
	File_workflow_proto = out.File
	file_workflow_proto_rawDesc = nil
	file_workflow_proto_goTypes = nil
	file_workflow_proto_depIdxs = nil
}
