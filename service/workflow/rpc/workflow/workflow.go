// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.2
// Source: workflow.proto

package workflow

import (
	"context"

	"Scheduler_go/service/workflow/rpc/workflowclient"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CommonResp                         = workflowclient.CommonResp
	HistProcDefListData                = workflowclient.HistProcDefListData
	HistProcDefListReq                 = workflowclient.HistProcDefListReq
	HistProcDefListResp                = workflowclient.HistProcDefListResp
	HistProcExecutionListData          = workflowclient.HistProcExecutionListData
	HistProcExecutionListReq           = workflowclient.HistProcExecutionListReq
	HistProcExecutionListResp          = workflowclient.HistProcExecutionListResp
	ProcDefDeleteReq                   = workflowclient.ProcDefDeleteReq
	ProcDefFindOneReq                  = workflowclient.ProcDefFindOneReq
	ProcDefFindOneResp                 = workflowclient.ProcDefFindOneResp
	ProcDefListData                    = workflowclient.ProcDefListData
	ProcDefListReq                     = workflowclient.ProcDefListReq
	ProcDefListResp                    = workflowclient.ProcDefListResp
	ProcDefSaveReq                     = workflowclient.ProcDefSaveReq
	ProcDefUpdateReq                   = workflowclient.ProcDefUpdateReq
	ProcExecutionListData              = workflowclient.ProcExecutionListData
	ProcExecutionListReq               = workflowclient.ProcExecutionListReq
	ProcExecutionListResp              = workflowclient.ProcExecutionListResp
	ProcInstDeleteReq                  = workflowclient.ProcInstDeleteReq
	ProcInstFindOneReq                 = workflowclient.ProcInstFindOneReq
	ProcInstFindOneResp                = workflowclient.ProcInstFindOneResp
	ProcInstListData                   = workflowclient.ProcInstListData
	ProcInstListReq                    = workflowclient.ProcInstListReq
	ProcInstListResp                   = workflowclient.ProcInstListResp
	ProcInstRevokeReq                  = workflowclient.ProcInstRevokeReq
	ProcInstStartReq                   = workflowclient.ProcInstStartReq
	ProcInstUpdateReq                  = workflowclient.ProcInstUpdateReq
	ProcTaskListData                   = workflowclient.ProcTaskListData
	ProcTaskListReq                    = workflowclient.ProcTaskListReq
	TaskFinishedListReq                = workflowclient.TaskFinishedListReq
	TaskFinishedListResp               = workflowclient.TaskFinishedListResp
	TaskFreeRejectToUpstreamNodeReq    = workflowclient.TaskFreeRejectToUpstreamNodeReq
	TaskInfoReq                        = workflowclient.TaskInfoReq
	TaskInfoResp                       = workflowclient.TaskInfoResp
	TaskPassDirectlyToWhoRejectedMeReq = workflowclient.TaskPassDirectlyToWhoRejectedMeReq
	TaskPassReq                        = workflowclient.TaskPassReq
	TaskRejectReq                      = workflowclient.TaskRejectReq
	TaskToDoListReq                    = workflowclient.TaskToDoListReq
	TaskToDoListResp                   = workflowclient.TaskToDoListResp
	TaskTransferReq                    = workflowclient.TaskTransferReq
	TaskUpstreamNodeListDate           = workflowclient.TaskUpstreamNodeListDate
	TaskUpstreamNodeListReq            = workflowclient.TaskUpstreamNodeListReq
	TaskUpstreamNodeListResp           = workflowclient.TaskUpstreamNodeListResp
	TaskWhatCanIDoReq                  = workflowclient.TaskWhatCanIDoReq
	TaskWhatCanIDoResp                 = workflowclient.TaskWhatCanIDoResp

	Workflow interface {
		// 流程定义
		ProcDefSave(ctx context.Context, in *ProcDefSaveReq, opts ...grpc.CallOption) (*CommonResp, error)
		ProcDefDelete(ctx context.Context, in *ProcDefDeleteReq, opts ...grpc.CallOption) (*CommonResp, error)
		ProcDefUpdate(ctx context.Context, in *ProcDefUpdateReq, opts ...grpc.CallOption) (*CommonResp, error)
		ProcDefFindOne(ctx context.Context, in *ProcDefFindOneReq, opts ...grpc.CallOption) (*ProcDefFindOneResp, error)
		ProcDefList(ctx context.Context, in *ProcDefListReq, opts ...grpc.CallOption) (*ProcDefListResp, error)
		// 流程定义历史
		HistProcDefList(ctx context.Context, in *HistProcDefListReq, opts ...grpc.CallOption) (*HistProcDefListResp, error)
		// 流程实例
		ProcInstStart(ctx context.Context, in *ProcInstStartReq, opts ...grpc.CallOption) (*CommonResp, error)
		ProcInstDelete(ctx context.Context, in *ProcInstDeleteReq, opts ...grpc.CallOption) (*CommonResp, error)
		ProcInstRevoke(ctx context.Context, in *ProcInstRevokeReq, opts ...grpc.CallOption) (*CommonResp, error)
		ProcInstUpdate(ctx context.Context, in *ProcInstUpdateReq, opts ...grpc.CallOption) (*CommonResp, error)
		ProcInstFindOne(ctx context.Context, in *ProcInstFindOneReq, opts ...grpc.CallOption) (*ProcInstFindOneResp, error)
		ProcInstList(ctx context.Context, in *ProcInstListReq, opts ...grpc.CallOption) (*ProcInstListResp, error)
		// 执行任务
		ProcExecutionList(ctx context.Context, in *ProcExecutionListReq, opts ...grpc.CallOption) (*ProcExecutionListResp, error)
		// 执行任务历史
		HistProcExecutionList(ctx context.Context, in *HistProcExecutionListReq, opts ...grpc.CallOption) (*HistProcExecutionListResp, error)
		// 任务通过
		TaskPass(ctx context.Context, in *TaskPassReq, opts ...grpc.CallOption) (*CommonResp, error)
		// 任务通过后流程直接返回到上一个驳回我的节点
		TaskPassDirectlyToWhoRejectedMe(ctx context.Context, in *TaskPassDirectlyToWhoRejectedMeReq, opts ...grpc.CallOption) (*CommonResp, error)
		// 任务驳回
		TaskReject(ctx context.Context, in *TaskRejectReq, opts ...grpc.CallOption) (*CommonResp, error)
		// 自由任务驳回
		TaskFreeRejectToUpstreamNode(ctx context.Context, in *TaskFreeRejectToUpstreamNodeReq, opts ...grpc.CallOption) (*CommonResp, error)
		// 将任务转交给他人处理
		TaskTransfer(ctx context.Context, in *TaskTransferReq, opts ...grpc.CallOption) (*CommonResp, error)
		// 获取待办任务
		TaskToDoList(ctx context.Context, in *TaskToDoListReq, opts ...grpc.CallOption) (*TaskToDoListResp, error)
		// 获取已办任务
		TaskFinishedList(ctx context.Context, in *TaskFinishedListReq, opts ...grpc.CallOption) (*TaskFinishedListResp, error)
		// 获取本任务所在节点的所有上游节点
		TaskUpstreamNodeList(ctx context.Context, in *TaskUpstreamNodeListReq, opts ...grpc.CallOption) (*TaskUpstreamNodeListResp, error)
		// 当前任务可以执行哪些操作
		TaskWhatCanIDo(ctx context.Context, in *TaskWhatCanIDoReq, opts ...grpc.CallOption) (*TaskWhatCanIDoResp, error)
		// 任务信息
		TaskInfo(ctx context.Context, in *TaskInfoReq, opts ...grpc.CallOption) (*TaskInfoResp, error)
	}

	defaultWorkflow struct {
		cli zrpc.Client
	}
)

func NewWorkflow(cli zrpc.Client) Workflow {
	return &defaultWorkflow{
		cli: cli,
	}
}

// 流程定义
func (m *defaultWorkflow) ProcDefSave(ctx context.Context, in *ProcDefSaveReq, opts ...grpc.CallOption) (*CommonResp, error) {
	client := workflowclient.NewWorkflowClient(m.cli.Conn())
	return client.ProcDefSave(ctx, in, opts...)
}

func (m *defaultWorkflow) ProcDefDelete(ctx context.Context, in *ProcDefDeleteReq, opts ...grpc.CallOption) (*CommonResp, error) {
	client := workflowclient.NewWorkflowClient(m.cli.Conn())
	return client.ProcDefDelete(ctx, in, opts...)
}

func (m *defaultWorkflow) ProcDefUpdate(ctx context.Context, in *ProcDefUpdateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	client := workflowclient.NewWorkflowClient(m.cli.Conn())
	return client.ProcDefUpdate(ctx, in, opts...)
}

func (m *defaultWorkflow) ProcDefFindOne(ctx context.Context, in *ProcDefFindOneReq, opts ...grpc.CallOption) (*ProcDefFindOneResp, error) {
	client := workflowclient.NewWorkflowClient(m.cli.Conn())
	return client.ProcDefFindOne(ctx, in, opts...)
}

func (m *defaultWorkflow) ProcDefList(ctx context.Context, in *ProcDefListReq, opts ...grpc.CallOption) (*ProcDefListResp, error) {
	client := workflowclient.NewWorkflowClient(m.cli.Conn())
	return client.ProcDefList(ctx, in, opts...)
}

// 流程定义历史
func (m *defaultWorkflow) HistProcDefList(ctx context.Context, in *HistProcDefListReq, opts ...grpc.CallOption) (*HistProcDefListResp, error) {
	client := workflowclient.NewWorkflowClient(m.cli.Conn())
	return client.HistProcDefList(ctx, in, opts...)
}

// 流程实例
func (m *defaultWorkflow) ProcInstStart(ctx context.Context, in *ProcInstStartReq, opts ...grpc.CallOption) (*CommonResp, error) {
	client := workflowclient.NewWorkflowClient(m.cli.Conn())
	return client.ProcInstStart(ctx, in, opts...)
}

func (m *defaultWorkflow) ProcInstDelete(ctx context.Context, in *ProcInstDeleteReq, opts ...grpc.CallOption) (*CommonResp, error) {
	client := workflowclient.NewWorkflowClient(m.cli.Conn())
	return client.ProcInstDelete(ctx, in, opts...)
}

func (m *defaultWorkflow) ProcInstRevoke(ctx context.Context, in *ProcInstRevokeReq, opts ...grpc.CallOption) (*CommonResp, error) {
	client := workflowclient.NewWorkflowClient(m.cli.Conn())
	return client.ProcInstRevoke(ctx, in, opts...)
}

func (m *defaultWorkflow) ProcInstUpdate(ctx context.Context, in *ProcInstUpdateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	client := workflowclient.NewWorkflowClient(m.cli.Conn())
	return client.ProcInstUpdate(ctx, in, opts...)
}

func (m *defaultWorkflow) ProcInstFindOne(ctx context.Context, in *ProcInstFindOneReq, opts ...grpc.CallOption) (*ProcInstFindOneResp, error) {
	client := workflowclient.NewWorkflowClient(m.cli.Conn())
	return client.ProcInstFindOne(ctx, in, opts...)
}

func (m *defaultWorkflow) ProcInstList(ctx context.Context, in *ProcInstListReq, opts ...grpc.CallOption) (*ProcInstListResp, error) {
	client := workflowclient.NewWorkflowClient(m.cli.Conn())
	return client.ProcInstList(ctx, in, opts...)
}

// 执行任务
func (m *defaultWorkflow) ProcExecutionList(ctx context.Context, in *ProcExecutionListReq, opts ...grpc.CallOption) (*ProcExecutionListResp, error) {
	client := workflowclient.NewWorkflowClient(m.cli.Conn())
	return client.ProcExecutionList(ctx, in, opts...)
}

// 执行任务历史
func (m *defaultWorkflow) HistProcExecutionList(ctx context.Context, in *HistProcExecutionListReq, opts ...grpc.CallOption) (*HistProcExecutionListResp, error) {
	client := workflowclient.NewWorkflowClient(m.cli.Conn())
	return client.HistProcExecutionList(ctx, in, opts...)
}

// 任务通过
func (m *defaultWorkflow) TaskPass(ctx context.Context, in *TaskPassReq, opts ...grpc.CallOption) (*CommonResp, error) {
	client := workflowclient.NewWorkflowClient(m.cli.Conn())
	return client.TaskPass(ctx, in, opts...)
}

// 任务通过后流程直接返回到上一个驳回我的节点
func (m *defaultWorkflow) TaskPassDirectlyToWhoRejectedMe(ctx context.Context, in *TaskPassDirectlyToWhoRejectedMeReq, opts ...grpc.CallOption) (*CommonResp, error) {
	client := workflowclient.NewWorkflowClient(m.cli.Conn())
	return client.TaskPassDirectlyToWhoRejectedMe(ctx, in, opts...)
}

// 任务驳回
func (m *defaultWorkflow) TaskReject(ctx context.Context, in *TaskRejectReq, opts ...grpc.CallOption) (*CommonResp, error) {
	client := workflowclient.NewWorkflowClient(m.cli.Conn())
	return client.TaskReject(ctx, in, opts...)
}

// 自由任务驳回
func (m *defaultWorkflow) TaskFreeRejectToUpstreamNode(ctx context.Context, in *TaskFreeRejectToUpstreamNodeReq, opts ...grpc.CallOption) (*CommonResp, error) {
	client := workflowclient.NewWorkflowClient(m.cli.Conn())
	return client.TaskFreeRejectToUpstreamNode(ctx, in, opts...)
}

// 将任务转交给他人处理
func (m *defaultWorkflow) TaskTransfer(ctx context.Context, in *TaskTransferReq, opts ...grpc.CallOption) (*CommonResp, error) {
	client := workflowclient.NewWorkflowClient(m.cli.Conn())
	return client.TaskTransfer(ctx, in, opts...)
}

// 获取待办任务
func (m *defaultWorkflow) TaskToDoList(ctx context.Context, in *TaskToDoListReq, opts ...grpc.CallOption) (*TaskToDoListResp, error) {
	client := workflowclient.NewWorkflowClient(m.cli.Conn())
	return client.TaskToDoList(ctx, in, opts...)
}

// 获取已办任务
func (m *defaultWorkflow) TaskFinishedList(ctx context.Context, in *TaskFinishedListReq, opts ...grpc.CallOption) (*TaskFinishedListResp, error) {
	client := workflowclient.NewWorkflowClient(m.cli.Conn())
	return client.TaskFinishedList(ctx, in, opts...)
}

// 获取本任务所在节点的所有上游节点
func (m *defaultWorkflow) TaskUpstreamNodeList(ctx context.Context, in *TaskUpstreamNodeListReq, opts ...grpc.CallOption) (*TaskUpstreamNodeListResp, error) {
	client := workflowclient.NewWorkflowClient(m.cli.Conn())
	return client.TaskUpstreamNodeList(ctx, in, opts...)
}

// 当前任务可以执行哪些操作
func (m *defaultWorkflow) TaskWhatCanIDo(ctx context.Context, in *TaskWhatCanIDoReq, opts ...grpc.CallOption) (*TaskWhatCanIDoResp, error) {
	client := workflowclient.NewWorkflowClient(m.cli.Conn())
	return client.TaskWhatCanIDo(ctx, in, opts...)
}

// 任务信息
func (m *defaultWorkflow) TaskInfo(ctx context.Context, in *TaskInfoReq, opts ...grpc.CallOption) (*TaskInfoResp, error) {
	client := workflowclient.NewWorkflowClient(m.cli.Conn())
	return client.TaskInfo(ctx, in, opts...)
}
