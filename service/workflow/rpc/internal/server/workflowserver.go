// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.2
// Source: workflow.proto

package server

import (
	"context"

	"Scheduler_go/service/workflow/rpc/internal/logic"
	"Scheduler_go/service/workflow/rpc/internal/svc"
	"Scheduler_go/service/workflow/rpc/workflowclient"
)

type WorkflowServer struct {
	svcCtx *svc.ServiceContext
	workflowclient.UnimplementedWorkflowServer
}

func NewWorkflowServer(svcCtx *svc.ServiceContext) *WorkflowServer {
	return &WorkflowServer{
		svcCtx: svcCtx,
	}
}

// 流程定义
func (s *WorkflowServer) ProcDefSave(ctx context.Context, in *workflowclient.ProcDefSaveReq) (*workflowclient.CommonResp, error) {
	l := logic.NewProcDefSaveLogic(ctx, s.svcCtx)
	return l.ProcDefSave(in)
}

func (s *WorkflowServer) ProcDefDelete(ctx context.Context, in *workflowclient.ProcDefDeleteReq) (*workflowclient.CommonResp, error) {
	l := logic.NewProcDefDeleteLogic(ctx, s.svcCtx)
	return l.ProcDefDelete(in)
}

func (s *WorkflowServer) ProcDefUpdate(ctx context.Context, in *workflowclient.ProcDefUpdateReq) (*workflowclient.CommonResp, error) {
	l := logic.NewProcDefUpdateLogic(ctx, s.svcCtx)
	return l.ProcDefUpdate(in)
}

func (s *WorkflowServer) ProcDefFindOne(ctx context.Context, in *workflowclient.ProcDefFindOneReq) (*workflowclient.ProcDefFindOneResp, error) {
	l := logic.NewProcDefFindOneLogic(ctx, s.svcCtx)
	return l.ProcDefFindOne(in)
}

func (s *WorkflowServer) ProcDefList(ctx context.Context, in *workflowclient.ProcDefListReq) (*workflowclient.ProcDefListResp, error) {
	l := logic.NewProcDefListLogic(ctx, s.svcCtx)
	return l.ProcDefList(in)
}

// 流程定义历史
func (s *WorkflowServer) HistProcDefList(ctx context.Context, in *workflowclient.HistProcDefListReq) (*workflowclient.HistProcDefListResp, error) {
	l := logic.NewHistProcDefListLogic(ctx, s.svcCtx)
	return l.HistProcDefList(in)
}

// 流程实例
func (s *WorkflowServer) ProcInstStart(ctx context.Context, in *workflowclient.ProcInstStartReq) (*workflowclient.CommonResp, error) {
	l := logic.NewProcInstStartLogic(ctx, s.svcCtx)
	return l.ProcInstStart(in)
}

func (s *WorkflowServer) ProcInstDelete(ctx context.Context, in *workflowclient.ProcInstDeleteReq) (*workflowclient.CommonResp, error) {
	l := logic.NewProcInstDeleteLogic(ctx, s.svcCtx)
	return l.ProcInstDelete(in)
}

func (s *WorkflowServer) ProcInstRevoke(ctx context.Context, in *workflowclient.ProcInstRevokeReq) (*workflowclient.CommonResp, error) {
	l := logic.NewProcInstRevokeLogic(ctx, s.svcCtx)
	return l.ProcInstRevoke(in)
}

func (s *WorkflowServer) ProcInstUpdate(ctx context.Context, in *workflowclient.ProcInstUpdateReq) (*workflowclient.CommonResp, error) {
	l := logic.NewProcInstUpdateLogic(ctx, s.svcCtx)
	return l.ProcInstUpdate(in)
}

func (s *WorkflowServer) ProcInstFindOne(ctx context.Context, in *workflowclient.ProcInstFindOneReq) (*workflowclient.ProcInstFindOneResp, error) {
	l := logic.NewProcInstFindOneLogic(ctx, s.svcCtx)
	return l.ProcInstFindOne(in)
}

func (s *WorkflowServer) ProcInstList(ctx context.Context, in *workflowclient.ProcInstListReq) (*workflowclient.ProcInstListResp, error) {
	l := logic.NewProcInstListLogic(ctx, s.svcCtx)
	return l.ProcInstList(in)
}

// 执行任务
func (s *WorkflowServer) ProcExecutionList(ctx context.Context, in *workflowclient.ProcExecutionListReq) (*workflowclient.ProcExecutionListResp, error) {
	l := logic.NewProcExecutionListLogic(ctx, s.svcCtx)
	return l.ProcExecutionList(in)
}

// 执行任务历史
func (s *WorkflowServer) HistProcExecutionList(ctx context.Context, in *workflowclient.HistProcExecutionListReq) (*workflowclient.HistProcExecutionListResp, error) {
	l := logic.NewHistProcExecutionListLogic(ctx, s.svcCtx)
	return l.HistProcExecutionList(in)
}

// 任务通过
func (s *WorkflowServer) TaskPass(ctx context.Context, in *workflowclient.TaskPassReq) (*workflowclient.CommonResp, error) {
	l := logic.NewTaskPassLogic(ctx, s.svcCtx)
	return l.TaskPass(in)
}

// 任务通过后流程直接返回到上一个驳回我的节点
func (s *WorkflowServer) TaskPassDirectlyToWhoRejectedMe(ctx context.Context, in *workflowclient.TaskPassDirectlyToWhoRejectedMeReq) (*workflowclient.CommonResp, error) {
	l := logic.NewTaskPassDirectlyToWhoRejectedMeLogic(ctx, s.svcCtx)
	return l.TaskPassDirectlyToWhoRejectedMe(in)
}

// 任务驳回
func (s *WorkflowServer) TaskReject(ctx context.Context, in *workflowclient.TaskRejectReq) (*workflowclient.CommonResp, error) {
	l := logic.NewTaskRejectLogic(ctx, s.svcCtx)
	return l.TaskReject(in)
}

// 自由任务驳回
func (s *WorkflowServer) TaskFreeRejectToUpstreamNode(ctx context.Context, in *workflowclient.TaskFreeRejectToUpstreamNodeReq) (*workflowclient.CommonResp, error) {
	l := logic.NewTaskFreeRejectToUpstreamNodeLogic(ctx, s.svcCtx)
	return l.TaskFreeRejectToUpstreamNode(in)
}

// 将任务转交给他人处理
func (s *WorkflowServer) TaskTransfer(ctx context.Context, in *workflowclient.TaskTransferReq) (*workflowclient.CommonResp, error) {
	l := logic.NewTaskTransferLogic(ctx, s.svcCtx)
	return l.TaskTransfer(in)
}

// 获取待办任务
func (s *WorkflowServer) TaskToDoList(ctx context.Context, in *workflowclient.TaskToDoListReq) (*workflowclient.TaskToDoListResp, error) {
	l := logic.NewTaskToDoListLogic(ctx, s.svcCtx)
	return l.TaskToDoList(in)
}

// 获取已办任务
func (s *WorkflowServer) TaskFinishedList(ctx context.Context, in *workflowclient.TaskFinishedListReq) (*workflowclient.TaskFinishedListResp, error) {
	l := logic.NewTaskFinishedListLogic(ctx, s.svcCtx)
	return l.TaskFinishedList(in)
}

// 获取本任务所在节点的所有上游节点
func (s *WorkflowServer) TaskUpstreamNodeList(ctx context.Context, in *workflowclient.TaskUpstreamNodeListReq) (*workflowclient.TaskUpstreamNodeListResp, error) {
	l := logic.NewTaskUpstreamNodeListLogic(ctx, s.svcCtx)
	return l.TaskUpstreamNodeList(in)
}

// 当前任务可以执行哪些操作
func (s *WorkflowServer) TaskWhatCanIDo(ctx context.Context, in *workflowclient.TaskWhatCanIDoReq) (*workflowclient.TaskWhatCanIDoResp, error) {
	l := logic.NewTaskWhatCanIDoLogic(ctx, s.svcCtx)
	return l.TaskWhatCanIDo(in)
}

// 任务信息
func (s *WorkflowServer) TaskInfo(ctx context.Context, in *workflowclient.TaskInfoReq) (*workflowclient.TaskInfoResp, error) {
	l := logic.NewTaskInfoLogic(ctx, s.svcCtx)
	return l.TaskInfo(in)
}
