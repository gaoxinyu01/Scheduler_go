// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.2

package model

import (
	"context"
	"database/sql"
	"fmt"
	"github.com/Masterminds/squirrel"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	histProcInstFieldNames          = builder.RawFieldNames(&HistProcInst{})
	histProcInstRows                = strings.Join(histProcInstFieldNames, ",")
	histProcInstRowsExpectAutoSet   = strings.Join(stringx.Remove(histProcInstFieldNames, "`id`", "`create_at`", "`create_time`", "`update_at`", "`update_time`"), ",")
	histProcInstRowsWithPlaceHolder = strings.Join(stringx.Remove(histProcInstFieldNames, "`id`", "`create_at`", "`create_time`", "`update_at`", "`update_time`"), "=?,") + "=?"

	cacheHistProcInstIdPrefix = "cache:histProcInst:id:"
)

type (
	histProcInstModel interface {
		Insert(ctx context.Context, data *HistProcInst) (sql.Result, error)
		TransInsert(ctx context.Context, sqlx sqlx.Session,data *HistProcInst) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*HistProcInst, error)
		Update(ctx context.Context, data *HistProcInst) error
		Delete(ctx context.Context, id int64) error
		FindCount(ctx context.Context, countBuilder squirrel.SelectBuilder) (int64, error)
		FindList(ctx context.Context, rowBuilder squirrel.SelectBuilder, current, pageSize int64) ([]*HistProcInst, error)
		RowBuilder() squirrel.SelectBuilder
		CountBuilder(field string) squirrel.SelectBuilder
		SumBuilder(field string) squirrel.SelectBuilder
		TransCtx(ctx context.Context, fn func(ctx context.Context, sqlx sqlx.Session) error) error
	}

	defaultHistProcInstModel struct {
		sqlc.CachedConn
		table string
	}

	HistProcInst struct {
		Id            int64          `db:"id"`              // ID
		ProcInstId    sql.NullInt64  `db:"proc_inst_id"`    // 流程实例ID
		ProcId        int64          `db:"proc_id"`         // 流程ID
		ProcName      string         `db:"proc_name"`       // 流程名称
		ProcVersion   int64          `db:"proc_version"`    // 流程版本号
		BusinessId    string         `db:"business_id"`     // 业务ID
		Starter       string         `db:"starter"`         // 流程发起人用户ID
		CurrentNodeId string         `db:"current_node_id"` // 当前进行节点ID
		VariablesJson sql.NullString `db:"variables_json"`  // 变量(Json)
		Status        int64          `db:"status"`          // 状态 0 未完成（审批中） 1 已完成 2 撤销
		TenantId      string         `db:"tenant_id"`       // 租户ID
		Data          sql.NullString `db:"data"`
		CreatedAt     time.Time      `db:"created_at"`   // 创建时间
		UpdatedAt     sql.NullTime   `db:"updated_at"`   // 更新时间
		DeletedAt     sql.NullTime   `db:"deleted_at"`   // 删除时间
		CreatedName   string         `db:"created_name"` // 创建人
		UpdatedName   sql.NullString `db:"updated_name"` // 更新人
		DeletedName   sql.NullString `db:"deleted_name"` // 删除人
	}
)

func newHistProcInstModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultHistProcInstModel {
	return &defaultHistProcInstModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`hist_proc_inst`",
	}
}

func (m *defaultHistProcInstModel) Delete(ctx context.Context, id int64) error {
	histProcInstIdKey := fmt.Sprintf("%s%v", cacheHistProcInstIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, histProcInstIdKey)
	return err
}

func (m *defaultHistProcInstModel) FindOne(ctx context.Context, id int64) (*HistProcInst, error) {
	histProcInstIdKey := fmt.Sprintf("%s%v", cacheHistProcInstIdPrefix, id)
	var resp HistProcInst
	err := m.QueryRowCtx(ctx, &resp, histProcInstIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", histProcInstRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, sqlx.ErrNotFound
	default:
		return nil, err
	}

}

func (m *defaultHistProcInstModel) Insert(ctx context.Context, data *HistProcInst) (sql.Result, error) {
	histProcInstIdKey := fmt.Sprintf("%s%v", cacheHistProcInstIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, histProcInstRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ProcInstId, data.ProcId, data.ProcName, data.ProcVersion, data.BusinessId, data.Starter, data.CurrentNodeId, data.VariablesJson, data.Status, data.TenantId, data.Data, data.CreatedAt, data.UpdatedAt, data.DeletedAt, data.CreatedName, data.UpdatedName, data.DeletedName)
	}, histProcInstIdKey)
	return ret, err
}

func (m *defaultHistProcInstModel) TransInsert(ctx context.Context, session sqlx.Session,data *HistProcInst) (sql.Result, error) {
	histProcInstIdKey := fmt.Sprintf("%s%v", cacheHistProcInstIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, histProcInstRowsExpectAutoSet)
		return session.ExecCtx(ctx, query, data.ProcInstId, data.ProcId, data.ProcName, data.ProcVersion, data.BusinessId, data.Starter, data.CurrentNodeId, data.VariablesJson, data.Status, data.TenantId, data.Data, data.CreatedAt, data.UpdatedAt, data.DeletedAt, data.CreatedName, data.UpdatedName, data.DeletedName)
	}, histProcInstIdKey)
	return ret, err
}
func (m *defaultHistProcInstModel) Update(ctx context.Context, data *HistProcInst) error {
	histProcInstIdKey := fmt.Sprintf("%s%v", cacheHistProcInstIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, histProcInstRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.ProcInstId, data.ProcId, data.ProcName, data.ProcVersion, data.BusinessId, data.Starter, data.CurrentNodeId, data.VariablesJson, data.Status, data.TenantId, data.Data, data.CreatedAt, data.UpdatedAt, data.DeletedAt, data.CreatedName, data.UpdatedName, data.DeletedName, data.Id)
	}, histProcInstIdKey)
	return err
}

func (m *defaultHistProcInstModel) RowBuilder() squirrel.SelectBuilder {
	return squirrel.Select(histProcInstRows).From(m.table)
}

func (m *defaultHistProcInstModel) CountBuilder(field string) squirrel.SelectBuilder {
	return squirrel.Select("COUNT(" + field + ")").From(m.table)
}

func (m *defaultHistProcInstModel) SumBuilder(field string) squirrel.SelectBuilder {
	return squirrel.Select("IFNULL(SUM(" + field + "),0)").From(m.table)
}

func (m *defaultHistProcInstModel) FindCount(ctx context.Context, countBuilder squirrel.SelectBuilder) (int64, error) {

	query, values, err := countBuilder.ToSql()
	if err != nil {
		return 0, err
	}

	var resp int64
	err = m.QueryRowNoCacheCtx(ctx, &resp, query, values...)
	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return 0, nil
	default:
		return 0, err
	}
}

func (m *defaultHistProcInstModel) FindList(ctx context.Context, rowBuilder squirrel.SelectBuilder, current, pageSize int64) ([]*HistProcInst, error) {

	if current < 1 {
		current = 1
	}
	offset := (current - 1) * pageSize

	query, values, err := rowBuilder.Offset(uint64(offset)).Limit(uint64(pageSize)).ToSql()
	if err != nil {
		return nil, err
	}

	var resp []*HistProcInst
	err = m.QueryRowsNoCacheCtx(ctx, &resp, query, values...)
	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return nil, nil
	default:
		return nil, err
	}
}

func (m *defaultHistProcInstModel) TransCtx(ctx context.Context, fn func(ctx context.Context, sqlx sqlx.Session) error) error {
	return m.Transact(func(s sqlx.Session) error {
		return fn(ctx, s)
	})
}

func (m *defaultHistProcInstModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheHistProcInstIdPrefix, primary)
}

func (m *defaultHistProcInstModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", histProcInstRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultHistProcInstModel) tableName() string {
	return m.table
}
