// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.2

package model

import (
	"context"
	"database/sql"
	"fmt"
	"github.com/Masterminds/squirrel"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	histProcExecutionFieldNames          = builder.RawFieldNames(&HistProcExecution{})
	histProcExecutionRows                = strings.Join(histProcExecutionFieldNames, ",")
	histProcExecutionRowsExpectAutoSet   = strings.Join(stringx.Remove(histProcExecutionFieldNames, "`id`", "`create_at`", "`create_time`", "`update_at`", "`update_time`"), ",")
	histProcExecutionRowsWithPlaceHolder = strings.Join(stringx.Remove(histProcExecutionFieldNames, "`id`", "`create_at`", "`create_time`", "`update_at`", "`update_time`"), "=?,") + "=?"

	cacheHistProcExecutionIdPrefix = "cache:histProcExecution:id:"
)

type (
	histProcExecutionModel interface {
		Insert(ctx context.Context, data *HistProcExecution) (sql.Result, error)
		TransInsert(ctx context.Context,  session sqlx.Session,data *HistProcExecution) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*HistProcExecution, error)
		Update(ctx context.Context, data *HistProcExecution) error
		Delete(ctx context.Context, id int64) error
		FindCount(ctx context.Context, countBuilder squirrel.SelectBuilder) (int64, error)
		FindList(ctx context.Context, rowBuilder squirrel.SelectBuilder, current, pageSize int64) ([]*HistProcExecution, error)
		RowBuilder() squirrel.SelectBuilder
		CountBuilder(field string) squirrel.SelectBuilder
		SumBuilder(field string) squirrel.SelectBuilder
		TransCtx(ctx context.Context, fn func(ctx context.Context, sqlx sqlx.Session) error) error
	}

	defaultHistProcExecutionModel struct {
		sqlc.CachedConn
		table string
	}

	HistProcExecution struct {
		Id          int64          `db:"id"`           // 执行ID
		ProcId      int64          `db:"proc_id"`      // 实例ID
		ProcVersion int64          `db:"proc_version"` // 流程版本号
		ProcName    string         `db:"proc_name"`    // 流程名
		NodeId      string         `db:"node_id"`      // 节点ID
		NodeName    string         `db:"node_name"`    // 节点名称
		PrevNodeId  string         `db:"prev_node_id"` // 上级节点ID
		NodeType    int64          `db:"node_type"`    // 节点类型 0 开始节点，1 任务节点 ，2 网关节点，3 结束节点
		IsCosigned  int64          `db:"is_cosigned"`  // 是否会签  0 不会签  1 会签
		TenantId    string         `db:"tenant_id"`    // 租户ID
		Data        sql.NullString `db:"data"`
		CreatedAt   time.Time      `db:"created_at"`   // 创建时间
		UpdatedAt   sql.NullTime   `db:"updated_at"`   // 更新时间
		DeletedAt   sql.NullTime   `db:"deleted_at"`   // 删除时间
		CreatedName string         `db:"created_name"` // 创建人
		UpdatedName sql.NullString `db:"updated_name"` // 更新人
		DeletedName sql.NullString `db:"deleted_name"` // 删除人
	}
)

func newHistProcExecutionModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultHistProcExecutionModel {
	return &defaultHistProcExecutionModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`hist_proc_execution`",
	}
}

func (m *defaultHistProcExecutionModel) Delete(ctx context.Context, id int64) error {
	histProcExecutionIdKey := fmt.Sprintf("%s%v", cacheHistProcExecutionIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, histProcExecutionIdKey)
	return err
}

func (m *defaultHistProcExecutionModel) FindOne(ctx context.Context, id int64) (*HistProcExecution, error) {
	histProcExecutionIdKey := fmt.Sprintf("%s%v", cacheHistProcExecutionIdPrefix, id)
	var resp HistProcExecution
	err := m.QueryRowCtx(ctx, &resp, histProcExecutionIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", histProcExecutionRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, sqlx.ErrNotFound
	default:
		return nil, err
	}

}

func (m *defaultHistProcExecutionModel) Insert(ctx context.Context, data *HistProcExecution) (sql.Result, error) {
	histProcExecutionIdKey := fmt.Sprintf("%s%v", cacheHistProcExecutionIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, histProcExecutionRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ProcId, data.ProcVersion, data.ProcName, data.NodeId, data.NodeName, data.PrevNodeId, data.NodeType, data.IsCosigned, data.TenantId, data.Data, data.CreatedAt, data.UpdatedAt, data.DeletedAt, data.CreatedName, data.UpdatedName, data.DeletedName)
	}, histProcExecutionIdKey)
	return ret, err
}

func (m *defaultHistProcExecutionModel) TransInsert(ctx context.Context,  session sqlx.Session,data *HistProcExecution) (sql.Result, error) {
	histProcExecutionIdKey := fmt.Sprintf("%s%v", cacheHistProcExecutionIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, histProcExecutionRowsExpectAutoSet)
		return session.ExecCtx(ctx, query, data.ProcId, data.ProcVersion, data.ProcName, data.NodeId, data.NodeName, data.PrevNodeId, data.NodeType, data.IsCosigned, data.TenantId, data.Data, data.CreatedAt, data.UpdatedAt, data.DeletedAt, data.CreatedName, data.UpdatedName, data.DeletedName)
	}, histProcExecutionIdKey)
	return ret, err
}

func (m *defaultHistProcExecutionModel) Update(ctx context.Context, data *HistProcExecution) error {
	histProcExecutionIdKey := fmt.Sprintf("%s%v", cacheHistProcExecutionIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, histProcExecutionRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.ProcId, data.ProcVersion, data.ProcName, data.NodeId, data.NodeName, data.PrevNodeId, data.NodeType, data.IsCosigned, data.TenantId, data.Data, data.CreatedAt, data.UpdatedAt, data.DeletedAt, data.CreatedName, data.UpdatedName, data.DeletedName, data.Id)
	}, histProcExecutionIdKey)
	return err
}

func (m *defaultHistProcExecutionModel) RowBuilder() squirrel.SelectBuilder {
	return squirrel.Select(histProcExecutionRows).From(m.table)
}

func (m *defaultHistProcExecutionModel) CountBuilder(field string) squirrel.SelectBuilder {
	return squirrel.Select("COUNT(" + field + ")").From(m.table)
}

func (m *defaultHistProcExecutionModel) SumBuilder(field string) squirrel.SelectBuilder {
	return squirrel.Select("IFNULL(SUM(" + field + "),0)").From(m.table)
}

func (m *defaultHistProcExecutionModel) FindCount(ctx context.Context, countBuilder squirrel.SelectBuilder) (int64, error) {

	query, values, err := countBuilder.ToSql()
	if err != nil {
		return 0, err
	}

	var resp int64
	err = m.QueryRowNoCacheCtx(ctx, &resp, query, values...)
	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return 0, nil
	default:
		return 0, err
	}
}

func (m *defaultHistProcExecutionModel) FindList(ctx context.Context, rowBuilder squirrel.SelectBuilder, current, pageSize int64) ([]*HistProcExecution, error) {

	if current < 1 {
		current = 1
	}
	offset := (current - 1) * pageSize

	query, values, err := rowBuilder.Offset(uint64(offset)).Limit(uint64(pageSize)).ToSql()
	if err != nil {
		return nil, err
	}

	var resp []*HistProcExecution
	err = m.QueryRowsNoCacheCtx(ctx, &resp, query, values...)
	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return nil, nil
	default:
		return nil, err
	}
}

func (m *defaultHistProcExecutionModel) TransCtx(ctx context.Context, fn func(ctx context.Context, sqlx sqlx.Session) error) error {
	return m.Transact(func(s sqlx.Session) error {
		return fn(ctx, s)
	})
}

func (m *defaultHistProcExecutionModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheHistProcExecutionIdPrefix, primary)
}

func (m *defaultHistProcExecutionModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", histProcExecutionRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultHistProcExecutionModel) tableName() string {
	return m.table
}
