// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.2

package model

import (
	"context"
	"database/sql"
	"fmt"
	"github.com/Masterminds/squirrel"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	procTaskFieldNames          = builder.RawFieldNames(&ProcTask{})
	procTaskRows                = strings.Join(procTaskFieldNames, ",")
	procTaskRowsExpectAutoSet   = strings.Join(stringx.Remove(procTaskFieldNames, "`id`", "`create_at`", "`create_time`", "`update_at`", "`update_time`"), ",")
	procTaskRowsWithPlaceHolder = strings.Join(stringx.Remove(procTaskFieldNames, "`id`", "`create_at`", "`create_time`", "`update_at`", "`update_time`"), "=?,") + "=?"

	cacheProcTaskIdPrefix = "cache:procTask:id:"
	cacheProcTaskProcTaskProcInstIdKeyPrefix = "cache:procTask:proc_inst_id:"
	cacheProcTaskProcTaskProcBatchCodePrefix = "cache:procTask:batch_code:"
)

type (
	procTaskModel interface {
		Insert(ctx context.Context, data *ProcTask) (sql.Result, error)
		TransInsert(ctx context.Context,session sqlx.Session, data *ProcTask) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*ProcTask, error)
		FindOneByProcInstId(ctx context.Context, procInstId int64) (*ProcTask, error)
		FindOneByProcBatchCode(ctx context.Context, batchCode string) (*ProcTask, error)
		Update(ctx context.Context, data *ProcTask) error
		TransUpdate(ctx context.Context, session sqlx.Session,data *ProcTask) error
		Delete(ctx context.Context, id int64) error
		TransDelete(ctx context.Context, session sqlx.Session,id int64) error
		FindCount(ctx context.Context, countBuilder squirrel.SelectBuilder) (int64, error)
		FindList(ctx context.Context, rowBuilder squirrel.SelectBuilder, current, pageSize int64) ([]*ProcTask, error)
		RowBuilder() squirrel.SelectBuilder
		CountBuilder(field string) squirrel.SelectBuilder
		SumBuilder(field string) squirrel.SelectBuilder
		TransCtx(ctx context.Context, fn func(ctx context.Context, sqlx sqlx.Session) error) error
	}

	defaultProcTaskModel struct {
		sqlc.CachedConn
		table string
	}

	ProcTask struct {
		Id                 int64          `db:"id"`                    // 任务ID
		ProcId             int64          `db:"proc_id"`               // 流程ID
		ProcInstId         int64          `db:"proc_inst_id"`          // 流程实例ID
		BusinessId         string         `db:"business_id"`           // 业务ID
		Starter            string         `db:"starter"`               // 流程发起人用户ID
		NodeId             string         `db:"node_id"`               // 节点ID
		NodeName           string         `db:"node_name"`             // 节点名称
		PrevNodeId         string         `db:"prev_node_id"`          // 上个处理节点ID
		IsCosigned         int64          `db:"is_cosigned"`           // 任意一人通过即可 1:会签
		BatchCode          string         `db:"batch_code"`            // 批次码.节点会被驳回，一个节点可能产生多批task,用此码做分别\"
		UserId             string         `db:"user_id"`               // 分配用户ID
		Status             int64          `db:"status"`                // 任务状态:0:初始 1:通过 2:驳回
		IsFinished         int64          `db:"is_finished"`           // 0:任务未完成 1:处理完成
		Comment            sql.NullString `db:"comment"`               // 任务备注
		ProcInstCreateTime sql.NullTime   `db:"proc_inst_create_time"` // 流程实例创建时间
		FinishedTime       time.Time      `db:"finished_time"`         // 处理任务时间
		TenantId           string         `db:"tenant_id"`             // 租户ID
		Data               sql.NullString `db:"data"`
		CreatedAt          time.Time      `db:"created_at"`   // 创建时间
		UpdatedAt          sql.NullTime   `db:"updated_at"`   // 更新时间
		DeletedAt          sql.NullTime   `db:"deleted_at"`   // 删除时间
		CreatedName        string         `db:"created_name"` // 创建人
		UpdatedName        sql.NullString `db:"updated_name"` // 更新人
		DeletedName        sql.NullString `db:"deleted_name"` // 删除人
	}
)

func newProcTaskModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultProcTaskModel {
	return &defaultProcTaskModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`proc_task`",
	}
}

func (m *defaultProcTaskModel) Delete(ctx context.Context, id int64) error {
	procTaskIdKey := fmt.Sprintf("%s%v", cacheProcTaskIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, procTaskIdKey)
	return err
}

func (m *defaultProcTaskModel) TransDelete(ctx context.Context, session sqlx.Session,id int64) error {
	procTaskIdKey := fmt.Sprintf("%s%v", cacheProcTaskIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return session.ExecCtx(ctx, query, id)
	}, procTaskIdKey)
	return err
}

func (m *defaultProcTaskModel) FindOne(ctx context.Context, id int64) (*ProcTask, error) {
	procTaskIdKey := fmt.Sprintf("%s%v", cacheProcTaskIdPrefix, id)
	var resp ProcTask
	err := m.QueryRowCtx(ctx, &resp, procTaskIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", procTaskRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, sqlx.ErrNotFound
	default:
		return nil, err
	}

}


func (m *defaultProcTaskModel) FindOneByProcInstId(ctx context.Context, procInstId int64) (*ProcTask, error){
	procTaskProcInstIdKey := fmt.Sprintf("%s%v", cacheProcTaskProcTaskProcInstIdKeyPrefix, procInstId)
	var resp ProcTask
	err := m.QueryRowCtx(ctx, &resp, procTaskProcInstIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `proc_inst_id` = ? limit 1", procTaskRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, procInstId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, sqlx.ErrNotFound
	default:
		return nil, err
	}

}

func (m *defaultProcTaskModel)FindOneByProcBatchCode(ctx context.Context, batchCode string) (*ProcTask, error){
	procTaskProcBatchCodeKey := fmt.Sprintf("%s%v", cacheProcTaskProcTaskProcBatchCodePrefix, batchCode)
	var resp ProcTask
	err := m.QueryRowCtx(ctx, &resp, procTaskProcBatchCodeKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `batch_code` = ? limit 1", procTaskRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, batchCode)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, sqlx.ErrNotFound
	default:
		return nil, err
	}

}

func (m *defaultProcTaskModel) Insert(ctx context.Context, data *ProcTask) (sql.Result, error) {
	procTaskIdKey := fmt.Sprintf("%s%v", cacheProcTaskIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, procTaskRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ProcId, data.ProcInstId, data.BusinessId, data.Starter, data.NodeId, data.NodeName, data.PrevNodeId, data.IsCosigned, data.BatchCode, data.UserId, data.Status, data.IsFinished, data.Comment, data.ProcInstCreateTime, data.FinishedTime, data.TenantId, data.Data, data.CreatedAt, data.UpdatedAt, data.DeletedAt, data.CreatedName, data.UpdatedName, data.DeletedName)
	}, procTaskIdKey)
	return ret, err
}
func (m *defaultProcTaskModel) TransInsert(ctx context.Context,session sqlx.Session, data *ProcTask) (sql.Result, error) {
	procTaskIdKey := fmt.Sprintf("%s%v", cacheProcTaskIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, procTaskRowsExpectAutoSet)
		return session.ExecCtx(ctx, query, data.ProcId, data.ProcInstId, data.BusinessId, data.Starter, data.NodeId, data.NodeName, data.PrevNodeId, data.IsCosigned, data.BatchCode, data.UserId, data.Status, data.IsFinished, data.Comment, data.ProcInstCreateTime, data.FinishedTime, data.TenantId, data.Data, data.CreatedAt, data.UpdatedAt, data.DeletedAt, data.CreatedName, data.UpdatedName, data.DeletedName)
	}, procTaskIdKey)
	return ret, err
}

func (m *defaultProcTaskModel) Update(ctx context.Context, data *ProcTask) error {
	procTaskIdKey := fmt.Sprintf("%s%v", cacheProcTaskIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, procTaskRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.ProcId, data.ProcInstId, data.BusinessId, data.Starter, data.NodeId, data.NodeName, data.PrevNodeId, data.IsCosigned, data.BatchCode, data.UserId, data.Status, data.IsFinished, data.Comment, data.ProcInstCreateTime, data.FinishedTime, data.TenantId, data.Data, data.CreatedAt, data.UpdatedAt, data.DeletedAt, data.CreatedName, data.UpdatedName, data.DeletedName, data.Id)
	}, procTaskIdKey)
	return err
}

func (m *defaultProcTaskModel) TransUpdate(ctx context.Context, session sqlx.Session,data *ProcTask) error {
	procTaskIdKey := fmt.Sprintf("%s%v", cacheProcTaskIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, procTaskRowsWithPlaceHolder)
		return session.ExecCtx(ctx, query, data.ProcId, data.ProcInstId, data.BusinessId, data.Starter, data.NodeId, data.NodeName, data.PrevNodeId, data.IsCosigned, data.BatchCode, data.UserId, data.Status, data.IsFinished, data.Comment, data.ProcInstCreateTime, data.FinishedTime, data.TenantId, data.Data, data.CreatedAt, data.UpdatedAt, data.DeletedAt, data.CreatedName, data.UpdatedName, data.DeletedName, data.Id)
	}, procTaskIdKey)
	return err
}
func (m *defaultProcTaskModel) RowBuilder() squirrel.SelectBuilder {
	return squirrel.Select(procTaskRows).From(m.table)
}

func (m *defaultProcTaskModel) CountBuilder(field string) squirrel.SelectBuilder {
	return squirrel.Select("COUNT(" + field + ")").From(m.table)
}

func (m *defaultProcTaskModel) SumBuilder(field string) squirrel.SelectBuilder {
	return squirrel.Select("IFNULL(SUM(" + field + "),0)").From(m.table)
}

func (m *defaultProcTaskModel) FindCount(ctx context.Context, countBuilder squirrel.SelectBuilder) (int64, error) {

	query, values, err := countBuilder.ToSql()
	if err != nil {
		return 0, err
	}

	var resp int64
	err = m.QueryRowNoCacheCtx(ctx, &resp, query, values...)
	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return 0, nil
	default:
		return 0, err
	}
}

func (m *defaultProcTaskModel) FindList(ctx context.Context, rowBuilder squirrel.SelectBuilder, current, pageSize int64) ([]*ProcTask, error) {

	if current < 1 {
		current = 1
	}
	offset := (current - 1) * pageSize

	query, values, err := rowBuilder.Offset(uint64(offset)).Limit(uint64(pageSize)).ToSql()
	if err != nil {
		return nil, err
	}

	var resp []*ProcTask
	err = m.QueryRowsNoCacheCtx(ctx, &resp, query, values...)
	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return nil, nil
	default:
		return nil, err
	}
}

func (m *defaultProcTaskModel) TransCtx(ctx context.Context, fn func(ctx context.Context, sqlx sqlx.Session) error) error {
	return m.Transact(func(s sqlx.Session) error {
		return fn(ctx, s)
	})
}

func (m *defaultProcTaskModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheProcTaskIdPrefix, primary)
}

func (m *defaultProcTaskModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", procTaskRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultProcTaskModel) tableName() string {
	return m.table
}
