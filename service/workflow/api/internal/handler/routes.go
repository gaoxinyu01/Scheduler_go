// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.2

package handler

import (
	"net/http"

	procDef "Scheduler_go/service/workflow/api/internal/handler/procDef"
	procInst "Scheduler_go/service/workflow/api/internal/handler/procInst"
	procTask "Scheduler_go/service/workflow/api/internal/handler/procTask"
	"Scheduler_go/service/workflow/api/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/workflow/procDef",
				Handler: procDef.ProcDefSaveHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/workflow/procDef",
				Handler: procDef.ProcDefListHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/workflow/procDef",
				Handler: procDef.ProcDefUpHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/workflow/procDef/:id",
				Handler: procDef.ProcDefDelHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/workflow/procDefInfo",
				Handler: procDef.ProcDefInfoHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/workflow/procInst",
				Handler: procInst.ProcInstStartHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/workflow/procInst",
				Handler: procInst.ProcInstListHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/workflow/procInst",
				Handler: procInst.ProcInstUpHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/workflow/procInst/:id",
				Handler: procInst.ProcInstDelHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/workflow/procInstInfo",
				Handler: procInst.ProcInstInfoHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/workflow/procInstRevoke",
				Handler: procInst.ProcInstRevokeHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/workflow/procInstTaskHistory",
				Handler: procInst.ProcInstTaskHistoryHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/workflow/taskFinishedList",
				Handler: procTask.TaskFinishedListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/workflow/taskFreeRejectToUpstreamNode",
				Handler: procTask.TaskFreeRejectToUpstreamNodeHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/workflow/taskInfo",
				Handler: procTask.TaskInfoHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/workflow/taskPass",
				Handler: procTask.TaskPassHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/workflow/taskPassDirectlyToWhoRejectedMe",
				Handler: procTask.TaskPassDirectlyToWhoRejectedMeHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/workflow/taskReject",
				Handler: procTask.TaskRejectHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/workflow/taskToDoList",
				Handler: procTask.TaskToDoListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/workflow/taskTransfer",
				Handler: procTask.TaskTransferHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/workflow/taskUpstreamNodeList",
				Handler: procTask.TaskUpstreamNodeListHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/workflow/taskWhatCanIDo",
				Handler: procTask.TaskWhatCanIDoHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)
}
