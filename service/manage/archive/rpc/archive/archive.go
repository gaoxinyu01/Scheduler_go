// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.2
// Source: archive.proto

package archive

import (
	"context"

	"Scheduler_go/service/manage/archive/rpc/archiveclient"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AppLoggerAddReq       = archiveclient.AppLoggerAddReq
	AppLoggerFindListReq  = archiveclient.AppLoggerFindListReq
	AppLoggerFindListResp = archiveclient.AppLoggerFindListResp
	CommonResp            = archiveclient.CommonResp
	LoggerData            = archiveclient.LoggerData

	Archive interface {
		// 用户日志
		AppLoggerAdd(ctx context.Context, in *AppLoggerAddReq, opts ...grpc.CallOption) (*CommonResp, error)
		AppLoggerFindList(ctx context.Context, in *AppLoggerFindListReq, opts ...grpc.CallOption) (*AppLoggerFindListResp, error)
	}

	defaultArchive struct {
		cli zrpc.Client
	}
)

func NewArchive(cli zrpc.Client) Archive {
	return &defaultArchive{
		cli: cli,
	}
}

// 用户日志
func (m *defaultArchive) AppLoggerAdd(ctx context.Context, in *AppLoggerAddReq, opts ...grpc.CallOption) (*CommonResp, error) {
	client := archiveclient.NewArchiveClient(m.cli.Conn())
	return client.AppLoggerAdd(ctx, in, opts...)
}

func (m *defaultArchive) AppLoggerFindList(ctx context.Context, in *AppLoggerFindListReq, opts ...grpc.CallOption) (*AppLoggerFindListResp, error) {
	client := archiveclient.NewArchiveClient(m.cli.Conn())
	return client.AppLoggerFindList(ctx, in, opts...)
}
