// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.2

package model

import (
	"context"
	"database/sql"
	"fmt"
	"github.com/Masterminds/squirrel"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	sysInterfaceFieldNames          = builder.RawFieldNames(&SysInterface{})
	sysInterfaceRows                = strings.Join(sysInterfaceFieldNames, ",")
	sysInterfaceRowsExpectAutoSet   = strings.Join(stringx.Remove(sysInterfaceFieldNames, "`id`", "`create_at`", "`create_time`", "`update_at`", "`update_time`"), ",")
	sysInterfaceRowsWithPlaceHolder = strings.Join(stringx.Remove(sysInterfaceFieldNames, "`id`", "`create_at`", "`create_time`", "`update_at`", "`update_time`"), "=?,") + "=?"

	cacheSysInterfaceIdPrefix                            = "cache:sysInterface:id:"
	cacheSysProductInterfaceByPathAndInterfaceTypePrefix = "cache:sysProductInterface:ByPathAndInterfaceType:"
)

type (
	sysInterfaceModel interface {
		Insert(ctx context.Context, data *SysInterface) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*SysInterface, error)
		Update(ctx context.Context, data *SysInterface) error
		Delete(ctx context.Context, data *SysInterface) error
		FindCount(ctx context.Context, countBuilder squirrel.SelectBuilder) (int64, error)
		FindList(ctx context.Context, rowBuilder squirrel.SelectBuilder, current, pageSize int64) ([]*SysInterface, error)
		RowBuilder() squirrel.SelectBuilder
		CountBuilder(field string) squirrel.SelectBuilder
		SumBuilder(field string) squirrel.SelectBuilder
		TransCtx(ctx context.Context, fn func(ctx context.Context, sqlx sqlx.Session) error) error

		FindOneByPathAndInterfaceType(ctx context.Context, path string, interfaceType string) (*SysInterface, error)
	}

	defaultSysInterfaceModel struct {
		sqlc.CachedConn
		table string
	}

	SysInterface struct {
		Id                 int64          `db:"id"`                   // 接口ID
		CreatedAt          time.Time      `db:"created_at"`           // 创建时间
		UpdatedAt          sql.NullTime   `db:"updated_at"`           // 更新时间
		DeletedAt          sql.NullTime   `db:"deleted_at"`           // 删除时间
		CreatedName        string         `db:"created_name"`         // 创建人
		UpdatedName        sql.NullString `db:"updated_name"`         // 更新人
		DeletedName        sql.NullString `db:"deleted_name"`         // 删除人
		Name               string         `db:"name"`                 // 接口名称
		Path               string         `db:"path"`                 // 接口地址
		InterfaceType      string         `db:"interface_type"`       // 接口类型
		InterfaceGroupName sql.NullString `db:"interface_group_name"` // 接口分组名称
		Remark             sql.NullString `db:"remark"`               // 备注
		Sort               int64          `db:"sort"`                 // sort
	}
)

func newSysInterfaceModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultSysInterfaceModel {
	return &defaultSysInterfaceModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`sys_interface`",
	}
}

func (m *defaultSysInterfaceModel) Delete(ctx context.Context, data *SysInterface) error {
	sysInterfaceIdKey := fmt.Sprintf("%s%v", cacheSysInterfaceIdPrefix, data.Id)
	sysProductInterfaceByPathAndInterfaceTypeKey := fmt.Sprintf("%s%v%v", cacheSysProductInterfaceByPathAndInterfaceTypePrefix, data.Path, data.InterfaceType)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, data.Id)
	}, sysInterfaceIdKey, sysProductInterfaceByPathAndInterfaceTypeKey)
	return err
}

func (m *defaultSysInterfaceModel) FindOne(ctx context.Context, id int64) (*SysInterface, error) {
	sysInterfaceIdKey := fmt.Sprintf("%s%v", cacheSysInterfaceIdPrefix, id)
	var resp SysInterface
	err := m.QueryRowCtx(ctx, &resp, sysInterfaceIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", sysInterfaceRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, sqlx.ErrNotFound
	default:
		return nil, err
	}

}

func (m *defaultSysInterfaceModel) Insert(ctx context.Context, data *SysInterface) (sql.Result, error) {
	sysInterfaceIdKey := fmt.Sprintf("%s%v", cacheSysInterfaceIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, sysInterfaceRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.CreatedAt, data.UpdatedAt, data.DeletedAt, data.CreatedName, data.UpdatedName, data.DeletedName, data.Name, data.Path, data.InterfaceType, data.InterfaceGroupName, data.Remark, data.Sort)
	}, sysInterfaceIdKey)
	return ret, err
}

func (m *defaultSysInterfaceModel) Update(ctx context.Context, data *SysInterface) error {
	sysInterfaceIdKey := fmt.Sprintf("%s%v", cacheSysInterfaceIdPrefix, data.Id)
	sysProductInterfaceByPathAndInterfaceTypeKey := fmt.Sprintf("%s%v%v", cacheSysProductInterfaceByPathAndInterfaceTypePrefix, data.Path, data.InterfaceType)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, sysInterfaceRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.CreatedAt, data.UpdatedAt, data.DeletedAt, data.CreatedName, data.UpdatedName, data.DeletedName, data.Name, data.Path, data.InterfaceType, data.InterfaceGroupName, data.Remark, data.Sort, data.Id)
	}, sysInterfaceIdKey, sysProductInterfaceByPathAndInterfaceTypeKey)
	return err
}

func (m *defaultSysInterfaceModel) RowBuilder() squirrel.SelectBuilder {
	return squirrel.Select(sysInterfaceRows).From(m.table)
}

func (m *defaultSysInterfaceModel) CountBuilder(field string) squirrel.SelectBuilder {
	return squirrel.Select("COUNT(" + field + ")").From(m.table)
}

func (m *defaultSysInterfaceModel) SumBuilder(field string) squirrel.SelectBuilder {
	return squirrel.Select("IFNULL(SUM(" + field + "),0)").From(m.table)
}

func (m *defaultSysInterfaceModel) FindCount(ctx context.Context, countBuilder squirrel.SelectBuilder) (int64, error) {

	query, values, err := countBuilder.ToSql()
	if err != nil {
		return 0, err
	}

	var resp int64
	err = m.QueryRowNoCacheCtx(ctx, &resp, query, values...)
	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return 0, nil
	default:
		return 0, err
	}
}

func (m *defaultSysInterfaceModel) FindList(ctx context.Context, rowBuilder squirrel.SelectBuilder, current, pageSize int64) ([]*SysInterface, error) {

	if current < 1 {
		current = 1
	}
	offset := (current - 1) * pageSize

	query, values, err := rowBuilder.Offset(uint64(offset)).Limit(uint64(pageSize)).ToSql()
	if err != nil {
		return nil, err
	}

	var resp []*SysInterface
	err = m.QueryRowsNoCacheCtx(ctx, &resp, query, values...)
	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return nil, nil
	default:
		return nil, err
	}
}

func (m *defaultSysInterfaceModel) TransCtx(ctx context.Context, fn func(ctx context.Context, sqlx sqlx.Session) error) error {
	return m.Transact(func(s sqlx.Session) error {
		return fn(ctx, s)
	})
}

func (m *defaultSysInterfaceModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheSysInterfaceIdPrefix, primary)
}

func (m *defaultSysInterfaceModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", sysInterfaceRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultSysInterfaceModel) tableName() string {
	return m.table
}

func (m *defaultSysInterfaceModel) FindOneByPathAndInterfaceType(ctx context.Context, path string, interfaceType string) (*SysInterface, error) {
	sysProductInterfaceByPathAndInterfaceTypeKey := fmt.Sprintf("%s%v%v", cacheSysProductInterfaceByPathAndInterfaceTypePrefix, path, interfaceType)
	var resp SysInterface
	err := m.QueryRowCtx(ctx, &resp, sysProductInterfaceByPathAndInterfaceTypeKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where deleted_at is null AND `path` = ? AND `interface_type` = ?  limit 1", sysInterfaceRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, path, interfaceType)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, sqlx.ErrNotFound
	default:
		return nil, err
	}

}
