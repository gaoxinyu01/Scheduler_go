// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.2

package model

import (
	"context"
	"database/sql"
	"fmt"
	"github.com/Masterminds/squirrel"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	sysDictTypeFieldNames          = builder.RawFieldNames(&SysDictType{})
	sysDictTypeRows                = strings.Join(sysDictTypeFieldNames, ",")
	sysDictTypeRowsExpectAutoSet   = strings.Join(stringx.Remove(sysDictTypeFieldNames, "`id`", "`create_at`", "`create_time`", "`update_at`", "`update_time`"), ",")
	sysDictTypeRowsWithPlaceHolder = strings.Join(stringx.Remove(sysDictTypeFieldNames, "`id`", "`create_at`", "`create_time`", "`update_at`", "`update_time`"), "=?,") + "=?"

	cacheSysDictTypeIdPrefix = "cache:sysDictType:id:"
)

type (
	sysDictTypeModel interface {
		Insert(ctx context.Context, data *SysDictType) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*SysDictType, error)
		Update(ctx context.Context, data *SysDictType) error
		Delete(ctx context.Context, id int64) error
		FindCount(ctx context.Context, countBuilder squirrel.SelectBuilder) (int64, error)
		FindList(ctx context.Context, rowBuilder squirrel.SelectBuilder, current, pageSize int64) ([]*SysDictType, error)
		RowBuilder() squirrel.SelectBuilder
		CountBuilder(field string) squirrel.SelectBuilder
		SumBuilder(field string) squirrel.SelectBuilder
		TransCtx(ctx context.Context, fn func(ctx context.Context, sqlx sqlx.Session) error) error
	}

	defaultSysDictTypeModel struct {
		sqlc.CachedConn
		table string
	}

	SysDictType struct {
		Id          int64          `db:"id"`           // 字典类型ID
		CreatedAt   time.Time      `db:"created_at"`   // 创建时间
		UpdatedAt   sql.NullTime   `db:"updated_at"`   // 更新时间
		DeletedAt   sql.NullTime   `db:"deleted_at"`   // 删除时间
		CreatedName string         `db:"created_name"` // 创建人
		UpdatedName sql.NullString `db:"updated_name"` // 更新人
		DeletedName sql.NullString `db:"deleted_name"` // 删除人
		Name        string         `db:"name"`         // 字典名称
		DictType    string         `db:"dict_type"`    // 字典类型
		State       int64          `db:"state"`        // 状态
		Remark      sql.NullString `db:"remark"`       // 描述
		Sort        int64          `db:"sort"`         // 排序
	}
)

func newSysDictTypeModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultSysDictTypeModel {
	return &defaultSysDictTypeModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`sys_dict_type`",
	}
}

func (m *defaultSysDictTypeModel) Delete(ctx context.Context, id int64) error {
	sysDictTypeIdKey := fmt.Sprintf("%s%v", cacheSysDictTypeIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, sysDictTypeIdKey)
	return err
}

func (m *defaultSysDictTypeModel) FindOne(ctx context.Context, id int64) (*SysDictType, error) {
	sysDictTypeIdKey := fmt.Sprintf("%s%v", cacheSysDictTypeIdPrefix, id)
	var resp SysDictType
	err := m.QueryRowCtx(ctx, &resp, sysDictTypeIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", sysDictTypeRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, sqlx.ErrNotFound
	default:
		return nil, err
	}

}

func (m *defaultSysDictTypeModel) Insert(ctx context.Context, data *SysDictType) (sql.Result, error) {
	sysDictTypeIdKey := fmt.Sprintf("%s%v", cacheSysDictTypeIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, sysDictTypeRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.CreatedAt, data.UpdatedAt, data.DeletedAt, data.CreatedName, data.UpdatedName, data.DeletedName, data.Name, data.DictType, data.State, data.Remark, data.Sort)
	}, sysDictTypeIdKey)
	return ret, err
}

func (m *defaultSysDictTypeModel) Update(ctx context.Context, data *SysDictType) error {
	sysDictTypeIdKey := fmt.Sprintf("%s%v", cacheSysDictTypeIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, sysDictTypeRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.CreatedAt, data.UpdatedAt, data.DeletedAt, data.CreatedName, data.UpdatedName, data.DeletedName, data.Name, data.DictType, data.State, data.Remark, data.Sort, data.Id)
	}, sysDictTypeIdKey)
	return err
}

func (m *defaultSysDictTypeModel) RowBuilder() squirrel.SelectBuilder {
	return squirrel.Select(sysDictTypeRows).From(m.table)
}

func (m *defaultSysDictTypeModel) CountBuilder(field string) squirrel.SelectBuilder {
	return squirrel.Select("COUNT(" + field + ")").From(m.table)
}

func (m *defaultSysDictTypeModel) SumBuilder(field string) squirrel.SelectBuilder {
	return squirrel.Select("IFNULL(SUM(" + field + "),0)").From(m.table)
}

func (m *defaultSysDictTypeModel) FindCount(ctx context.Context, countBuilder squirrel.SelectBuilder) (int64, error) {

	query, values, err := countBuilder.ToSql()
	if err != nil {
		return 0, err
	}

	var resp int64
	err = m.QueryRowNoCacheCtx(ctx, &resp, query, values...)
	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return 0, nil
	default:
		return 0, err
	}
}

func (m *defaultSysDictTypeModel) FindList(ctx context.Context, rowBuilder squirrel.SelectBuilder, current, pageSize int64) ([]*SysDictType, error) {

	if current < 1 {
		current = 1
	}
	offset := (current - 1) * pageSize

	query, values, err := rowBuilder.Offset(uint64(offset)).Limit(uint64(pageSize)).ToSql()
	if err != nil {
		return nil, err
	}

	var resp []*SysDictType
	err = m.QueryRowsNoCacheCtx(ctx, &resp, query, values...)
	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return nil, nil
	default:
		return nil, err
	}
}

func (m *defaultSysDictTypeModel) TransCtx(ctx context.Context, fn func(ctx context.Context, sqlx sqlx.Session) error) error {
	return m.Transact(func(s sqlx.Session) error {
		return fn(ctx, s)
	})
}

func (m *defaultSysDictTypeModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheSysDictTypeIdPrefix, primary)
}

func (m *defaultSysDictTypeModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", sysDictTypeRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultSysDictTypeModel) tableName() string {
	return m.table
}
