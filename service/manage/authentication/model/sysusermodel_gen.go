// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.2

package model

import (
	"context"
	"database/sql"
	"fmt"
	"github.com/Masterminds/squirrel"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	sysUserFieldNames          = builder.RawFieldNames(&SysUser{})
	sysUserRows                = strings.Join(sysUserFieldNames, ",")
	sysUserRowsExpectAutoSet   = strings.Join(stringx.Remove(sysUserFieldNames, "`create_at`", "`create_time`", "`update_at`", "`update_time`"), ",")
	sysUserRowsWithPlaceHolder = strings.Join(stringx.Remove(sysUserFieldNames, "`id`", "`create_at`", "`create_time`", "`update_at`", "`update_time`"), "=?,") + "=?"

	cacheSysUserIdPrefix = "cache:sysUser:id:"
)

type (
	sysUserModel interface {
		Insert(ctx context.Context, data *SysUser) (sql.Result, error)
		TransInsert(ctx context.Context, session sqlx.Session, data *SysUser) (sql.Result, error)
		FindOne(ctx context.Context, id string) (*SysUser, error)
		Update(ctx context.Context, data *SysUser) error
		TransUpdate(ctx context.Context, session sqlx.Session, data *SysUser) error
		FindCount(ctx context.Context, countBuilder squirrel.SelectBuilder) (int64, error)
		FindList(ctx context.Context, rowBuilder squirrel.SelectBuilder, current, pageSize int64) ([]*SysUser, error)
		RowBuilder() squirrel.SelectBuilder
		CountBuilder(field string) squirrel.SelectBuilder
		SumBuilder(field string) squirrel.SelectBuilder
		TransCtx(ctx context.Context, fn func(ctx context.Context, sqlx sqlx.Session) error) error
		sysUserModelExtra
	}

	defaultSysUserModel struct {
		sqlc.CachedConn
		table string
	}

	SysUser struct {
		Id          string         `db:"id"`           // 用户ID
		Account     string         `db:"account"`      // 用户名
		NickName    string         `db:"nick_name"`    // 姓名
		Password    string         `db:"password"`     // 密码
		State       int64          `db:"state"`        // 状态 1:正常 2:停用 3:封禁
		CreatedName string         `db:"created_name"` // 创建人
		CreatedAt   time.Time      `db:"created_at"`   // 创建时间
		UpdatedName sql.NullString `db:"updated_name"` // 更新人
		UpdatedAt   sql.NullTime   `db:"updated_at"`   // 更新时间
		DeletedAt   sql.NullTime   `db:"deleted_at"`   // 删除时间
		DeletedName sql.NullString `db:"deleted_name"` // 删除人
	}
)

func newSysUserModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultSysUserModel {
	return &defaultSysUserModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`sys_user`",
	}
}

func (m *defaultSysUserModel) FindOne(ctx context.Context, id string) (*SysUser, error) {
	sysUserIdKey := fmt.Sprintf("%s%v", cacheSysUserIdPrefix, id)
	var resp SysUser
	err := m.QueryRowCtx(ctx, &resp, sysUserIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", sysUserRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, sqlx.ErrNotFound
	default:
		return nil, err
	}

}

func (m *defaultSysUserModel) Insert(ctx context.Context, data *SysUser) (sql.Result, error) {
	sysUserAccountKey := fmt.Sprintf("%s%v", cacheSysUserAccountPrefix, data.Account)
	sysUserIdKey := fmt.Sprintf("%s%v", cacheSysUserIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, sysUserRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Id, data.Account, data.NickName, data.Password, data.State, data.CreatedName, data.CreatedAt, data.UpdatedName, data.UpdatedAt, data.DeletedAt, data.DeletedName)
	}, sysUserIdKey, sysUserAccountKey)
	return ret, err
}

func (m *defaultSysUserModel) TransInsert(ctx context.Context, session sqlx.Session, data *SysUser) (sql.Result, error) {
	sysUserAccountKey := fmt.Sprintf("%s%v", cacheSysUserAccountPrefix, data.Account)
	sysUserIdKey := fmt.Sprintf("%s%v", cacheSysUserIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, sysUserRowsExpectAutoSet)
		return session.ExecCtx(ctx, query, data.Id, data.Account, data.NickName, data.Password, data.State, data.CreatedName, data.CreatedAt, data.UpdatedName, data.UpdatedAt, data.DeletedAt, data.DeletedName)
	}, sysUserIdKey, sysUserAccountKey)
	return ret, err
}

func (m *defaultSysUserModel) Update(ctx context.Context, data *SysUser) error {
	sysUserAccountKey := fmt.Sprintf("%s%v", cacheSysUserAccountPrefix, data.Account)
	sysUserIdKey := fmt.Sprintf("%s%v", cacheSysUserIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, sysUserRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Account, data.NickName, data.Password, data.State, data.CreatedName, data.CreatedAt, data.UpdatedName, data.UpdatedAt, data.DeletedAt, data.DeletedName, data.Id)
	}, sysUserIdKey, sysUserAccountKey)
	return err
}

func (m *defaultSysUserModel) TransUpdate(ctx context.Context, session sqlx.Session, data *SysUser) error {
	sysUserAccountKey := fmt.Sprintf("%s%v", cacheSysUserAccountPrefix, data.Account)
	sysUserIdKey := fmt.Sprintf("%s%v", cacheSysUserIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, sysUserRowsWithPlaceHolder)
		return session.ExecCtx(ctx, query, data.Account, data.NickName, data.Password, data.State, data.CreatedName, data.CreatedAt, data.UpdatedName, data.UpdatedAt, data.DeletedAt, data.DeletedName, data.Id)
	}, sysUserIdKey, sysUserAccountKey)
	return err
}

func (m *defaultSysUserModel) RowBuilder() squirrel.SelectBuilder {
	return squirrel.Select(sysUserRows).From(m.table)
}

func (m *defaultSysUserModel) CountBuilder(field string) squirrel.SelectBuilder {
	return squirrel.Select("COUNT(" + field + ")").From(m.table)
}

func (m *defaultSysUserModel) SumBuilder(field string) squirrel.SelectBuilder {
	return squirrel.Select("IFNULL(SUM(" + field + "),0)").From(m.table)
}

func (m *defaultSysUserModel) FindCount(ctx context.Context, countBuilder squirrel.SelectBuilder) (int64, error) {

	query, values, err := countBuilder.ToSql()
	if err != nil {
		return 0, err
	}

	var resp int64
	err = m.QueryRowNoCacheCtx(ctx, &resp, query, values...)
	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return 0, nil
	default:
		return 0, err
	}
}

func (m *defaultSysUserModel) FindList(ctx context.Context, rowBuilder squirrel.SelectBuilder, current, pageSize int64) ([]*SysUser, error) {

	if current < 1 {
		current = 1
	}
	offset := (current - 1) * pageSize

	query, values, err := rowBuilder.Offset(uint64(offset)).Limit(uint64(pageSize)).ToSql()
	if err != nil {
		return nil, err
	}

	var resp []*SysUser
	err = m.QueryRowsNoCacheCtx(ctx, &resp, query, values...)
	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return nil, nil
	default:
		return nil, err
	}
}

func (m *defaultSysUserModel) TransCtx(ctx context.Context, fn func(ctx context.Context, sqlx sqlx.Session) error) error {
	return m.Transact(func(s sqlx.Session) error {
		return fn(ctx, s)
	})
}

func (m *defaultSysUserModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheSysUserIdPrefix, primary)
}

func (m *defaultSysUserModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", sysUserRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultSysUserModel) tableName() string {
	return m.table
}
