// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.2

package model

import (
	"context"
	"database/sql"
	"fmt"
	"github.com/Masterminds/squirrel"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	sysMenuFieldNames          = builder.RawFieldNames(&SysMenu{})
	sysMenuRows                = strings.Join(sysMenuFieldNames, ",")
	sysMenuRowsExpectAutoSet   = strings.Join(stringx.Remove(sysMenuFieldNames, "`id`", "`create_at`", "`create_time`", "`update_at`", "`update_time`"), ",")
	sysMenuRowsWithPlaceHolder = strings.Join(stringx.Remove(sysMenuFieldNames, "`id`", "`create_at`", "`create_time`", "`update_at`", "`update_time`"), "=?,") + "=?"

	cacheSysMenuIdPrefix = "cache:sysMenu:id:"
)

type (
	sysMenuModel interface {
		Insert(ctx context.Context, data *SysMenu) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*SysMenu, error)
		Update(ctx context.Context, data *SysMenu) error
		Delete(ctx context.Context, id int64) error
		FindCount(ctx context.Context, countBuilder squirrel.SelectBuilder) (int64, error)
		FindList(ctx context.Context, rowBuilder squirrel.SelectBuilder, current, pageSize int64) ([]*SysMenu, error)
		RowBuilder() squirrel.SelectBuilder
		CountBuilder(field string) squirrel.SelectBuilder
		SumBuilder(field string) squirrel.SelectBuilder
		TransCtx(ctx context.Context, fn func(ctx context.Context, sqlx sqlx.Session) error) error
	}

	defaultSysMenuModel struct {
		sqlc.CachedConn
		table string
	}

	SysMenu struct {
		Id          int64          `db:"id"`            // 菜单ID
		MenuType    int64          `db:"menu_type"`     // 菜单类型(层级关系)
		Name        string         `db:"name"`          // 菜单名称
		Title       string         `db:"title"`         // 标题
		Path        string         `db:"path"`          // 路径
		Component   string         `db:"component"`     // 本地路径
		Redirect    sql.NullString `db:"redirect"`      // 跳转
		Sort        int64          `db:"sort"`          // sort
		Icon        sql.NullString `db:"icon"`          // 图标
		IsHide      int64          `db:"is_hide"`       // 是否隐藏
		IsKeepAlive int64          `db:"is_keep_alive"` // 是否缓存
		ParentId    int64          `db:"parent_id"`     // 父ID
		IsHome      int64          `db:"is_home"`       // 是否首页
		IsMain      int64          `db:"is_main"`       // 是否主菜单
		CreatedName string         `db:"created_name"`  // 创建人
		CreatedAt   time.Time      `db:"created_at"`    // 创建时间
		UpdatedName sql.NullString `db:"updated_name"`  // 更新人
		UpdatedAt   sql.NullTime   `db:"updated_at"`    // 更新时间
		DeletedAt   sql.NullTime   `db:"deleted_at"`    // 删除时间
		DeletedName sql.NullString `db:"deleted_name"`  // 删除人
	}
)

func newSysMenuModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultSysMenuModel {
	return &defaultSysMenuModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`sys_menu`",
	}
}

func (m *defaultSysMenuModel) Delete(ctx context.Context, id int64) error {
	sysMenuIdKey := fmt.Sprintf("%s%v", cacheSysMenuIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, sysMenuIdKey)
	return err
}

func (m *defaultSysMenuModel) FindOne(ctx context.Context, id int64) (*SysMenu, error) {
	sysMenuIdKey := fmt.Sprintf("%s%v", cacheSysMenuIdPrefix, id)
	var resp SysMenu
	err := m.QueryRowCtx(ctx, &resp, sysMenuIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", sysMenuRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, sqlx.ErrNotFound
	default:
		return nil, err
	}

}

func (m *defaultSysMenuModel) Insert(ctx context.Context, data *SysMenu) (sql.Result, error) {
	sysMenuIdKey := fmt.Sprintf("%s%v", cacheSysMenuIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, sysMenuRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.MenuType, data.Name, data.Title, data.Path, data.Component, data.Redirect, data.Sort, data.Icon, data.IsHide, data.IsKeepAlive, data.ParentId, data.IsHome, data.IsMain, data.CreatedName, data.CreatedAt, data.UpdatedName, data.UpdatedAt, data.DeletedAt, data.DeletedName)
	}, sysMenuIdKey)
	return ret, err
}

func (m *defaultSysMenuModel) Update(ctx context.Context, data *SysMenu) error {
	sysMenuIdKey := fmt.Sprintf("%s%v", cacheSysMenuIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, sysMenuRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.MenuType, data.Name, data.Title, data.Path, data.Component, data.Redirect, data.Sort, data.Icon, data.IsHide, data.IsKeepAlive, data.ParentId, data.IsHome, data.IsMain, data.CreatedName, data.CreatedAt, data.UpdatedName, data.UpdatedAt, data.DeletedAt, data.DeletedName, data.Id)
	}, sysMenuIdKey)
	return err
}

func (m *defaultSysMenuModel) RowBuilder() squirrel.SelectBuilder {
	return squirrel.Select(sysMenuRows).From(m.table)
}

func (m *defaultSysMenuModel) CountBuilder(field string) squirrel.SelectBuilder {
	return squirrel.Select("COUNT(" + field + ")").From(m.table)
}

func (m *defaultSysMenuModel) SumBuilder(field string) squirrel.SelectBuilder {
	return squirrel.Select("IFNULL(SUM(" + field + "),0)").From(m.table)
}

func (m *defaultSysMenuModel) FindCount(ctx context.Context, countBuilder squirrel.SelectBuilder) (int64, error) {

	query, values, err := countBuilder.ToSql()
	if err != nil {
		return 0, err
	}

	var resp int64
	err = m.QueryRowNoCacheCtx(ctx, &resp, query, values...)
	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return 0, nil
	default:
		return 0, err
	}
}

func (m *defaultSysMenuModel) FindList(ctx context.Context, rowBuilder squirrel.SelectBuilder, current, pageSize int64) ([]*SysMenu, error) {

	if current < 1 {
		current = 1
	}
	offset := (current - 1) * pageSize

	query, values, err := rowBuilder.Offset(uint64(offset)).Limit(uint64(pageSize)).ToSql()
	if err != nil {
		return nil, err
	}

	var resp []*SysMenu
	err = m.QueryRowsNoCacheCtx(ctx, &resp, query, values...)
	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return nil, nil
	default:
		return nil, err
	}
}

func (m *defaultSysMenuModel) TransCtx(ctx context.Context, fn func(ctx context.Context, sqlx sqlx.Session) error) error {
	return m.Transact(func(s sqlx.Session) error {
		return fn(ctx, s)
	})
}

func (m *defaultSysMenuModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheSysMenuIdPrefix, primary)
}

func (m *defaultSysMenuModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", sysMenuRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultSysMenuModel) tableName() string {
	return m.table
}
