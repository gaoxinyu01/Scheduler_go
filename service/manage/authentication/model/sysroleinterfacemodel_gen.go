// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.2

package model

import (
	"context"
	"database/sql"
	"fmt"
	"github.com/Masterminds/squirrel"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	sysRoleInterfaceFieldNames          = builder.RawFieldNames(&SysRoleInterface{})
	sysRoleInterfaceRows                = strings.Join(sysRoleInterfaceFieldNames, ",")
	sysRoleInterfaceRowsExpectAutoSet   = strings.Join(stringx.Remove(sysRoleInterfaceFieldNames, "`id`", "`create_at`", "`create_time`", "`update_at`", "`update_time`"), ",")
	sysRoleInterfaceRowsWithPlaceHolder = strings.Join(stringx.Remove(sysRoleInterfaceFieldNames, "`id`", "`create_at`", "`create_time`", "`update_at`", "`update_time`"), "=?,") + "=?"

	cacheSysRoleInterfaceIdPrefix = "cache:sysRoleInterface:id:"
)

type (
	sysRoleInterfaceModel interface {
		Insert(ctx context.Context, data *SysRoleInterface) (sql.Result, error)
		TransInsert(ctx context.Context, session sqlx.Session, data *SysRoleInterface) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*SysRoleInterface, error)
		Update(ctx context.Context, data *SysRoleInterface) error
		Delete(ctx context.Context, id int64) error
		TransDeleteByRoleId(ctx context.Context, session sqlx.Session, roleId int64) error
		FindCount(ctx context.Context, countBuilder squirrel.SelectBuilder) (int64, error)
		FindList(ctx context.Context, rowBuilder squirrel.SelectBuilder, current, pageSize int64) ([]*SysRoleInterface, error)
		FindAll(ctx context.Context, rowBuilder squirrel.SelectBuilder) ([]*SysRoleInterface, error)
		RowBuilder() squirrel.SelectBuilder
		CountBuilder(field string) squirrel.SelectBuilder
		SumBuilder(field string) squirrel.SelectBuilder
		TransCtx(ctx context.Context, fn func(ctx context.Context, sqlx sqlx.Session) error) error
	}

	defaultSysRoleInterfaceModel struct {
		sqlc.CachedConn
		table string
	}

	SysRoleInterface struct {
		Id          int64     `db:"id"`           // ID
		RoleId      int64     `db:"role_id"`      // 角色ID
		InterfaceId int64     `db:"interface_id"` // 接口ID
		CreatedName string    `db:"created_name"` // 创建人
		CreatedAt   time.Time `db:"created_at"`   // 创建时间
	}
)

func newSysRoleInterfaceModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultSysRoleInterfaceModel {
	return &defaultSysRoleInterfaceModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`sys_role_interface`",
	}
}

func (m *defaultSysRoleInterfaceModel) Delete(ctx context.Context, id int64) error {
	sysRoleInterfaceIdKey := fmt.Sprintf("%s%v", cacheSysRoleInterfaceIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, sysRoleInterfaceIdKey)
	return err
}

func (m *defaultSysRoleInterfaceModel) TransDeleteByRoleId(ctx context.Context, session sqlx.Session, roleId int64) error {
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `role_id` = ?", m.table)
		return session.ExecCtx(ctx, query, roleId)
	})
	return err
}

func (m *defaultSysRoleInterfaceModel) FindOne(ctx context.Context, id int64) (*SysRoleInterface, error) {
	sysRoleInterfaceIdKey := fmt.Sprintf("%s%v", cacheSysRoleInterfaceIdPrefix, id)
	var resp SysRoleInterface
	err := m.QueryRowCtx(ctx, &resp, sysRoleInterfaceIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", sysRoleInterfaceRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, sqlx.ErrNotFound
	default:
		return nil, err
	}

}

func (m *defaultSysRoleInterfaceModel) TransInsert(ctx context.Context, session sqlx.Session, data *SysRoleInterface) (sql.Result, error) {
	sysRoleInterfaceIdKey := fmt.Sprintf("%s%v", cacheSysRoleInterfaceIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, sysRoleInterfaceRowsExpectAutoSet)
		return session.ExecCtx(ctx, query, data.RoleId, data.InterfaceId, data.CreatedName, data.CreatedAt)
	}, sysRoleInterfaceIdKey)
	return ret, err
}

func (m *defaultSysRoleInterfaceModel) Insert(ctx context.Context, data *SysRoleInterface) (sql.Result, error) {
	sysRoleInterfaceIdKey := fmt.Sprintf("%s%v", cacheSysRoleInterfaceIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, sysRoleInterfaceRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.RoleId, data.InterfaceId, data.CreatedName, data.CreatedAt)
	}, sysRoleInterfaceIdKey)
	return ret, err
}

func (m *defaultSysRoleInterfaceModel) Update(ctx context.Context, data *SysRoleInterface) error {
	sysRoleInterfaceIdKey := fmt.Sprintf("%s%v", cacheSysRoleInterfaceIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, sysRoleInterfaceRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.RoleId, data.InterfaceId, data.CreatedName, data.CreatedAt, data.Id)
	}, sysRoleInterfaceIdKey)
	return err
}

func (m *defaultSysRoleInterfaceModel) RowBuilder() squirrel.SelectBuilder {
	return squirrel.Select(sysRoleInterfaceRows).From(m.table)
}

func (m *defaultSysRoleInterfaceModel) CountBuilder(field string) squirrel.SelectBuilder {
	return squirrel.Select("COUNT(" + field + ")").From(m.table)
}

func (m *defaultSysRoleInterfaceModel) SumBuilder(field string) squirrel.SelectBuilder {
	return squirrel.Select("IFNULL(SUM(" + field + "),0)").From(m.table)
}

func (m *defaultSysRoleInterfaceModel) FindCount(ctx context.Context, countBuilder squirrel.SelectBuilder) (int64, error) {

	query, values, err := countBuilder.ToSql()
	if err != nil {
		return 0, err
	}

	var resp int64
	err = m.QueryRowNoCacheCtx(ctx, &resp, query, values...)
	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return 0, nil
	default:
		return 0, err
	}
}

func (m *defaultSysRoleInterfaceModel) FindList(ctx context.Context, rowBuilder squirrel.SelectBuilder, current, pageSize int64) ([]*SysRoleInterface, error) {

	if current < 1 {
		current = 1
	}
	offset := (current - 1) * pageSize

	query, values, err := rowBuilder.Offset(uint64(offset)).Limit(uint64(pageSize)).ToSql()
	if err != nil {
		return nil, err
	}

	var resp []*SysRoleInterface
	err = m.QueryRowsNoCacheCtx(ctx, &resp, query, values...)
	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return nil, nil
	default:
		return nil, err
	}
}

func (m *defaultSysRoleInterfaceModel) FindAll(ctx context.Context, rowBuilder squirrel.SelectBuilder) ([]*SysRoleInterface, error) {

	query, values, err := rowBuilder.ToSql()
	if err != nil {
		return nil, err
	}

	var resp []*SysRoleInterface
	err = m.QueryRowsNoCacheCtx(ctx, &resp, query, values...)
	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return nil, nil
	default:
		return nil, err
	}
}

func (m *defaultSysRoleInterfaceModel) TransCtx(ctx context.Context, fn func(ctx context.Context, sqlx sqlx.Session) error) error {
	return m.Transact(func(s sqlx.Session) error {
		return fn(ctx, s)
	})
}

func (m *defaultSysRoleInterfaceModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheSysRoleInterfaceIdPrefix, primary)
}

func (m *defaultSysRoleInterfaceModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", sysRoleInterfaceRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultSysRoleInterfaceModel) tableName() string {
	return m.table
}
