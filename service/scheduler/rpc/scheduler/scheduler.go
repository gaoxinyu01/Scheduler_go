// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.2
// Source: scheduler.proto

package scheduler

import (
	"context"

	"Scheduler_go/service/scheduler/rpc/schedulerclient"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AttendanceAddReq           = schedulerclient.AttendanceAddReq
	AttendanceByDaysCounts     = schedulerclient.AttendanceByDaysCounts
	AttendanceByDaysReq        = schedulerclient.AttendanceByDaysReq
	AttendanceByDaysResp       = schedulerclient.AttendanceByDaysResp
	AttendanceDeleteReq        = schedulerclient.AttendanceDeleteReq
	AttendanceFindOneDayReq    = schedulerclient.AttendanceFindOneDayReq
	AttendanceFindOneDayResp   = schedulerclient.AttendanceFindOneDayResp
	AttendanceFindOneReq       = schedulerclient.AttendanceFindOneReq
	AttendanceFindOneResp      = schedulerclient.AttendanceFindOneResp
	AttendanceListData         = schedulerclient.AttendanceListData
	AttendanceListReq          = schedulerclient.AttendanceListReq
	AttendanceListResp         = schedulerclient.AttendanceListResp
	AttendancePatchReq         = schedulerclient.AttendancePatchReq
	AttendanceUpdateReq        = schedulerclient.AttendanceUpdateReq
	CommonResp                 = schedulerclient.CommonResp
	SchedulingAddReq           = schedulerclient.SchedulingAddReq
	SchedulingDeleteReq        = schedulerclient.SchedulingDeleteReq
	SchedulingFindListData     = schedulerclient.SchedulingFindListData
	SchedulingFindListReq      = schedulerclient.SchedulingFindListReq
	SchedulingFindListResp     = schedulerclient.SchedulingFindListResp
	SchedulingTypeAddReq       = schedulerclient.SchedulingTypeAddReq
	SchedulingTypeDeleteReq    = schedulerclient.SchedulingTypeDeleteReq
	SchedulingTypeFindListData = schedulerclient.SchedulingTypeFindListData
	SchedulingTypeFindListReq  = schedulerclient.SchedulingTypeFindListReq
	SchedulingTypeFindListResp = schedulerclient.SchedulingTypeFindListResp
	SchedulingTypeUpdateReq    = schedulerclient.SchedulingTypeUpdateReq
	SchedulingUpdateReq        = schedulerclient.SchedulingUpdateReq
	TeamAddReq                 = schedulerclient.TeamAddReq
	TeamDeleteReq              = schedulerclient.TeamDeleteReq
	TeamFindListReq            = schedulerclient.TeamFindListReq
	TeamFindListResp           = schedulerclient.TeamFindListResp
	TeamTypeAddReq             = schedulerclient.TeamTypeAddReq
	TeamTypeDeleteReq          = schedulerclient.TeamTypeDeleteReq
	TeamTypeFindListReq        = schedulerclient.TeamTypeFindListReq
	TeamTypeFindListResp       = schedulerclient.TeamTypeFindListResp
	TeamTypeListData           = schedulerclient.TeamTypeListData
	TeamTypeUpdateReq          = schedulerclient.TeamTypeUpdateReq
	TeamUpdateReq              = schedulerclient.TeamUpdateReq
	TeamUser                   = schedulerclient.TeamUser

	Scheduler interface {
		// 考勤
		AttendanceAdd(ctx context.Context, in *AttendanceAddReq, opts ...grpc.CallOption) (*CommonResp, error)
		// 签退
		AttendancePatch(ctx context.Context, in *AttendancePatchReq, opts ...grpc.CallOption) (*CommonResp, error)
		AttendanceDelete(ctx context.Context, in *AttendanceDeleteReq, opts ...grpc.CallOption) (*CommonResp, error)
		AttendanceUpdate(ctx context.Context, in *AttendanceUpdateReq, opts ...grpc.CallOption) (*CommonResp, error)
		AttendanceFindOne(ctx context.Context, in *AttendanceFindOneReq, opts ...grpc.CallOption) (*AttendanceFindOneResp, error)
		AttendanceList(ctx context.Context, in *AttendanceListReq, opts ...grpc.CallOption) (*AttendanceListResp, error)
		// 获取某天考勤
		AttendanceFindOneDay(ctx context.Context, in *AttendanceFindOneDayReq, opts ...grpc.CallOption) (*AttendanceFindOneDayResp, error)
		// 根据时间段获取每日考勤
		AttendanceByDays(ctx context.Context, in *AttendanceByDaysReq, opts ...grpc.CallOption) (*AttendanceByDaysResp, error)
		// 部门
		TeamTypeAdd(ctx context.Context, in *TeamTypeAddReq, opts ...grpc.CallOption) (*CommonResp, error)
		TeamTypeDelete(ctx context.Context, in *TeamTypeDeleteReq, opts ...grpc.CallOption) (*CommonResp, error)
		TeamTypeUpdate(ctx context.Context, in *TeamTypeUpdateReq, opts ...grpc.CallOption) (*CommonResp, error)
		TeamTypeFindList(ctx context.Context, in *TeamTypeFindListReq, opts ...grpc.CallOption) (*TeamTypeFindListResp, error)
		// 部门人员表
		TeamAdd(ctx context.Context, in *TeamAddReq, opts ...grpc.CallOption) (*CommonResp, error)
		TeamDelete(ctx context.Context, in *TeamDeleteReq, opts ...grpc.CallOption) (*CommonResp, error)
		TeamUpdate(ctx context.Context, in *TeamUpdateReq, opts ...grpc.CallOption) (*CommonResp, error)
		TeamFindList(ctx context.Context, in *TeamFindListReq, opts ...grpc.CallOption) (*TeamFindListResp, error)
		// 排班类型
		SchedulingTypeAdd(ctx context.Context, in *SchedulingTypeAddReq, opts ...grpc.CallOption) (*CommonResp, error)
		SchedulingTypeDelete(ctx context.Context, in *SchedulingTypeDeleteReq, opts ...grpc.CallOption) (*CommonResp, error)
		SchedulingTypeUpdate(ctx context.Context, in *SchedulingTypeUpdateReq, opts ...grpc.CallOption) (*CommonResp, error)
		SchedulingTypeFindList(ctx context.Context, in *SchedulingTypeFindListReq, opts ...grpc.CallOption) (*SchedulingTypeFindListResp, error)
		// 排班列表
		SchedulingAdd(ctx context.Context, in *SchedulingAddReq, opts ...grpc.CallOption) (*CommonResp, error)
		SchedulingDelete(ctx context.Context, in *SchedulingDeleteReq, opts ...grpc.CallOption) (*CommonResp, error)
		SchedulingUpdate(ctx context.Context, in *SchedulingUpdateReq, opts ...grpc.CallOption) (*CommonResp, error)
		SchedulingFindList(ctx context.Context, in *SchedulingFindListReq, opts ...grpc.CallOption) (*SchedulingFindListResp, error)
	}

	defaultScheduler struct {
		cli zrpc.Client
	}
)

func NewScheduler(cli zrpc.Client) Scheduler {
	return &defaultScheduler{
		cli: cli,
	}
}

// 考勤
func (m *defaultScheduler) AttendanceAdd(ctx context.Context, in *AttendanceAddReq, opts ...grpc.CallOption) (*CommonResp, error) {
	client := schedulerclient.NewSchedulerClient(m.cli.Conn())
	return client.AttendanceAdd(ctx, in, opts...)
}

// 签退
func (m *defaultScheduler) AttendancePatch(ctx context.Context, in *AttendancePatchReq, opts ...grpc.CallOption) (*CommonResp, error) {
	client := schedulerclient.NewSchedulerClient(m.cli.Conn())
	return client.AttendancePatch(ctx, in, opts...)
}

func (m *defaultScheduler) AttendanceDelete(ctx context.Context, in *AttendanceDeleteReq, opts ...grpc.CallOption) (*CommonResp, error) {
	client := schedulerclient.NewSchedulerClient(m.cli.Conn())
	return client.AttendanceDelete(ctx, in, opts...)
}

func (m *defaultScheduler) AttendanceUpdate(ctx context.Context, in *AttendanceUpdateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	client := schedulerclient.NewSchedulerClient(m.cli.Conn())
	return client.AttendanceUpdate(ctx, in, opts...)
}

func (m *defaultScheduler) AttendanceFindOne(ctx context.Context, in *AttendanceFindOneReq, opts ...grpc.CallOption) (*AttendanceFindOneResp, error) {
	client := schedulerclient.NewSchedulerClient(m.cli.Conn())
	return client.AttendanceFindOne(ctx, in, opts...)
}

func (m *defaultScheduler) AttendanceList(ctx context.Context, in *AttendanceListReq, opts ...grpc.CallOption) (*AttendanceListResp, error) {
	client := schedulerclient.NewSchedulerClient(m.cli.Conn())
	return client.AttendanceList(ctx, in, opts...)
}

// 获取某天考勤
func (m *defaultScheduler) AttendanceFindOneDay(ctx context.Context, in *AttendanceFindOneDayReq, opts ...grpc.CallOption) (*AttendanceFindOneDayResp, error) {
	client := schedulerclient.NewSchedulerClient(m.cli.Conn())
	return client.AttendanceFindOneDay(ctx, in, opts...)
}

// 根据时间段获取每日考勤
func (m *defaultScheduler) AttendanceByDays(ctx context.Context, in *AttendanceByDaysReq, opts ...grpc.CallOption) (*AttendanceByDaysResp, error) {
	client := schedulerclient.NewSchedulerClient(m.cli.Conn())
	return client.AttendanceByDays(ctx, in, opts...)
}

// 部门
func (m *defaultScheduler) TeamTypeAdd(ctx context.Context, in *TeamTypeAddReq, opts ...grpc.CallOption) (*CommonResp, error) {
	client := schedulerclient.NewSchedulerClient(m.cli.Conn())
	return client.TeamTypeAdd(ctx, in, opts...)
}

func (m *defaultScheduler) TeamTypeDelete(ctx context.Context, in *TeamTypeDeleteReq, opts ...grpc.CallOption) (*CommonResp, error) {
	client := schedulerclient.NewSchedulerClient(m.cli.Conn())
	return client.TeamTypeDelete(ctx, in, opts...)
}

func (m *defaultScheduler) TeamTypeUpdate(ctx context.Context, in *TeamTypeUpdateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	client := schedulerclient.NewSchedulerClient(m.cli.Conn())
	return client.TeamTypeUpdate(ctx, in, opts...)
}

func (m *defaultScheduler) TeamTypeFindList(ctx context.Context, in *TeamTypeFindListReq, opts ...grpc.CallOption) (*TeamTypeFindListResp, error) {
	client := schedulerclient.NewSchedulerClient(m.cli.Conn())
	return client.TeamTypeFindList(ctx, in, opts...)
}

// 部门人员表
func (m *defaultScheduler) TeamAdd(ctx context.Context, in *TeamAddReq, opts ...grpc.CallOption) (*CommonResp, error) {
	client := schedulerclient.NewSchedulerClient(m.cli.Conn())
	return client.TeamAdd(ctx, in, opts...)
}

func (m *defaultScheduler) TeamDelete(ctx context.Context, in *TeamDeleteReq, opts ...grpc.CallOption) (*CommonResp, error) {
	client := schedulerclient.NewSchedulerClient(m.cli.Conn())
	return client.TeamDelete(ctx, in, opts...)
}

func (m *defaultScheduler) TeamUpdate(ctx context.Context, in *TeamUpdateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	client := schedulerclient.NewSchedulerClient(m.cli.Conn())
	return client.TeamUpdate(ctx, in, opts...)
}

func (m *defaultScheduler) TeamFindList(ctx context.Context, in *TeamFindListReq, opts ...grpc.CallOption) (*TeamFindListResp, error) {
	client := schedulerclient.NewSchedulerClient(m.cli.Conn())
	return client.TeamFindList(ctx, in, opts...)
}

// 排班类型
func (m *defaultScheduler) SchedulingTypeAdd(ctx context.Context, in *SchedulingTypeAddReq, opts ...grpc.CallOption) (*CommonResp, error) {
	client := schedulerclient.NewSchedulerClient(m.cli.Conn())
	return client.SchedulingTypeAdd(ctx, in, opts...)
}

func (m *defaultScheduler) SchedulingTypeDelete(ctx context.Context, in *SchedulingTypeDeleteReq, opts ...grpc.CallOption) (*CommonResp, error) {
	client := schedulerclient.NewSchedulerClient(m.cli.Conn())
	return client.SchedulingTypeDelete(ctx, in, opts...)
}

func (m *defaultScheduler) SchedulingTypeUpdate(ctx context.Context, in *SchedulingTypeUpdateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	client := schedulerclient.NewSchedulerClient(m.cli.Conn())
	return client.SchedulingTypeUpdate(ctx, in, opts...)
}

func (m *defaultScheduler) SchedulingTypeFindList(ctx context.Context, in *SchedulingTypeFindListReq, opts ...grpc.CallOption) (*SchedulingTypeFindListResp, error) {
	client := schedulerclient.NewSchedulerClient(m.cli.Conn())
	return client.SchedulingTypeFindList(ctx, in, opts...)
}

// 排班列表
func (m *defaultScheduler) SchedulingAdd(ctx context.Context, in *SchedulingAddReq, opts ...grpc.CallOption) (*CommonResp, error) {
	client := schedulerclient.NewSchedulerClient(m.cli.Conn())
	return client.SchedulingAdd(ctx, in, opts...)
}

func (m *defaultScheduler) SchedulingDelete(ctx context.Context, in *SchedulingDeleteReq, opts ...grpc.CallOption) (*CommonResp, error) {
	client := schedulerclient.NewSchedulerClient(m.cli.Conn())
	return client.SchedulingDelete(ctx, in, opts...)
}

func (m *defaultScheduler) SchedulingUpdate(ctx context.Context, in *SchedulingUpdateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	client := schedulerclient.NewSchedulerClient(m.cli.Conn())
	return client.SchedulingUpdate(ctx, in, opts...)
}

func (m *defaultScheduler) SchedulingFindList(ctx context.Context, in *SchedulingFindListReq, opts ...grpc.CallOption) (*SchedulingFindListResp, error) {
	client := schedulerclient.NewSchedulerClient(m.cli.Conn())
	return client.SchedulingFindList(ctx, in, opts...)
}
