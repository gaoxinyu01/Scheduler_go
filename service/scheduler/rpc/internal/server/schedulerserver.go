// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.2
// Source: scheduler.proto

package server

import (
	"context"

	"Scheduler_go/service/scheduler/rpc/internal/logic"
	"Scheduler_go/service/scheduler/rpc/internal/svc"
	"Scheduler_go/service/scheduler/rpc/schedulerclient"
)

type SchedulerServer struct {
	svcCtx *svc.ServiceContext
	schedulerclient.UnimplementedSchedulerServer
}

func NewSchedulerServer(svcCtx *svc.ServiceContext) *SchedulerServer {
	return &SchedulerServer{
		svcCtx: svcCtx,
	}
}

// 考勤
func (s *SchedulerServer) AttendanceAdd(ctx context.Context, in *schedulerclient.AttendanceAddReq) (*schedulerclient.CommonResp, error) {
	l := logic.NewAttendanceAddLogic(ctx, s.svcCtx)
	return l.AttendanceAdd(in)
}

// 签退
func (s *SchedulerServer) AttendancePatch(ctx context.Context, in *schedulerclient.AttendancePatchReq) (*schedulerclient.CommonResp, error) {
	l := logic.NewAttendancePatchLogic(ctx, s.svcCtx)
	return l.AttendancePatch(in)
}

func (s *SchedulerServer) AttendanceDelete(ctx context.Context, in *schedulerclient.AttendanceDeleteReq) (*schedulerclient.CommonResp, error) {
	l := logic.NewAttendanceDeleteLogic(ctx, s.svcCtx)
	return l.AttendanceDelete(in)
}

func (s *SchedulerServer) AttendanceUpdate(ctx context.Context, in *schedulerclient.AttendanceUpdateReq) (*schedulerclient.CommonResp, error) {
	l := logic.NewAttendanceUpdateLogic(ctx, s.svcCtx)
	return l.AttendanceUpdate(in)
}

func (s *SchedulerServer) AttendanceFindOne(ctx context.Context, in *schedulerclient.AttendanceFindOneReq) (*schedulerclient.AttendanceFindOneResp, error) {
	l := logic.NewAttendanceFindOneLogic(ctx, s.svcCtx)
	return l.AttendanceFindOne(in)
}

func (s *SchedulerServer) AttendanceList(ctx context.Context, in *schedulerclient.AttendanceListReq) (*schedulerclient.AttendanceListResp, error) {
	l := logic.NewAttendanceListLogic(ctx, s.svcCtx)
	return l.AttendanceList(in)
}

// 获取某天考勤
func (s *SchedulerServer) AttendanceFindOneDay(ctx context.Context, in *schedulerclient.AttendanceFindOneDayReq) (*schedulerclient.AttendanceFindOneDayResp, error) {
	l := logic.NewAttendanceFindOneDayLogic(ctx, s.svcCtx)
	return l.AttendanceFindOneDay(in)
}

// 根据时间段获取每日考勤
func (s *SchedulerServer) AttendanceByDays(ctx context.Context, in *schedulerclient.AttendanceByDaysReq) (*schedulerclient.AttendanceByDaysResp, error) {
	l := logic.NewAttendanceByDaysLogic(ctx, s.svcCtx)
	return l.AttendanceByDays(in)
}

// 部门
func (s *SchedulerServer) TeamTypeAdd(ctx context.Context, in *schedulerclient.TeamTypeAddReq) (*schedulerclient.CommonResp, error) {
	l := logic.NewTeamTypeAddLogic(ctx, s.svcCtx)
	return l.TeamTypeAdd(in)
}

func (s *SchedulerServer) TeamTypeDelete(ctx context.Context, in *schedulerclient.TeamTypeDeleteReq) (*schedulerclient.CommonResp, error) {
	l := logic.NewTeamTypeDeleteLogic(ctx, s.svcCtx)
	return l.TeamTypeDelete(in)
}

func (s *SchedulerServer) TeamTypeUpdate(ctx context.Context, in *schedulerclient.TeamTypeUpdateReq) (*schedulerclient.CommonResp, error) {
	l := logic.NewTeamTypeUpdateLogic(ctx, s.svcCtx)
	return l.TeamTypeUpdate(in)
}

func (s *SchedulerServer) TeamTypeFindList(ctx context.Context, in *schedulerclient.TeamTypeFindListReq) (*schedulerclient.TeamTypeFindListResp, error) {
	l := logic.NewTeamTypeFindListLogic(ctx, s.svcCtx)
	return l.TeamTypeFindList(in)
}

// 部门人员表
func (s *SchedulerServer) TeamAdd(ctx context.Context, in *schedulerclient.TeamAddReq) (*schedulerclient.CommonResp, error) {
	l := logic.NewTeamAddLogic(ctx, s.svcCtx)
	return l.TeamAdd(in)
}

func (s *SchedulerServer) TeamDelete(ctx context.Context, in *schedulerclient.TeamDeleteReq) (*schedulerclient.CommonResp, error) {
	l := logic.NewTeamDeleteLogic(ctx, s.svcCtx)
	return l.TeamDelete(in)
}

func (s *SchedulerServer) TeamUpdate(ctx context.Context, in *schedulerclient.TeamUpdateReq) (*schedulerclient.CommonResp, error) {
	l := logic.NewTeamUpdateLogic(ctx, s.svcCtx)
	return l.TeamUpdate(in)
}

func (s *SchedulerServer) TeamFindList(ctx context.Context, in *schedulerclient.TeamFindListReq) (*schedulerclient.TeamFindListResp, error) {
	l := logic.NewTeamFindListLogic(ctx, s.svcCtx)
	return l.TeamFindList(in)
}

// 排班类型
func (s *SchedulerServer) SchedulingTypeAdd(ctx context.Context, in *schedulerclient.SchedulingTypeAddReq) (*schedulerclient.CommonResp, error) {
	l := logic.NewSchedulingTypeAddLogic(ctx, s.svcCtx)
	return l.SchedulingTypeAdd(in)
}

func (s *SchedulerServer) SchedulingTypeDelete(ctx context.Context, in *schedulerclient.SchedulingTypeDeleteReq) (*schedulerclient.CommonResp, error) {
	l := logic.NewSchedulingTypeDeleteLogic(ctx, s.svcCtx)
	return l.SchedulingTypeDelete(in)
}

func (s *SchedulerServer) SchedulingTypeUpdate(ctx context.Context, in *schedulerclient.SchedulingTypeUpdateReq) (*schedulerclient.CommonResp, error) {
	l := logic.NewSchedulingTypeUpdateLogic(ctx, s.svcCtx)
	return l.SchedulingTypeUpdate(in)
}

func (s *SchedulerServer) SchedulingTypeFindList(ctx context.Context, in *schedulerclient.SchedulingTypeFindListReq) (*schedulerclient.SchedulingTypeFindListResp, error) {
	l := logic.NewSchedulingTypeFindListLogic(ctx, s.svcCtx)
	return l.SchedulingTypeFindList(in)
}

// 排班列表
func (s *SchedulerServer) SchedulingAdd(ctx context.Context, in *schedulerclient.SchedulingAddReq) (*schedulerclient.CommonResp, error) {
	l := logic.NewSchedulingAddLogic(ctx, s.svcCtx)
	return l.SchedulingAdd(in)
}

func (s *SchedulerServer) SchedulingDelete(ctx context.Context, in *schedulerclient.SchedulingDeleteReq) (*schedulerclient.CommonResp, error) {
	l := logic.NewSchedulingDeleteLogic(ctx, s.svcCtx)
	return l.SchedulingDelete(in)
}

func (s *SchedulerServer) SchedulingUpdate(ctx context.Context, in *schedulerclient.SchedulingUpdateReq) (*schedulerclient.CommonResp, error) {
	l := logic.NewSchedulingUpdateLogic(ctx, s.svcCtx)
	return l.SchedulingUpdate(in)
}

func (s *SchedulerServer) SchedulingFindList(ctx context.Context, in *schedulerclient.SchedulingFindListReq) (*schedulerclient.SchedulingFindListResp, error) {
	l := logic.NewSchedulingFindListLogic(ctx, s.svcCtx)
	return l.SchedulingFindList(in)
}
