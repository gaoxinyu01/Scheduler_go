// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.2

package model

import (
	"context"
	"database/sql"
	"fmt"
	"github.com/Masterminds/squirrel"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	schedulingTypeFieldNames          = builder.RawFieldNames(&SchedulingType{})
	schedulingTypeRows                = strings.Join(schedulingTypeFieldNames, ",")
	schedulingTypeRowsExpectAutoSet   = strings.Join(stringx.Remove(schedulingTypeFieldNames, "`create_at`", "`create_time`", "`update_at`", "`update_time`"), ",")
	schedulingTypeRowsWithPlaceHolder = strings.Join(stringx.Remove(schedulingTypeFieldNames, "`id`", "`create_at`", "`create_time`", "`update_at`", "`update_time`"), "=?,") + "=?"

	cacheSchedulingTypeIdPrefix = "cache:schedulingType:id:"
)

type (
	schedulingTypeModel interface {
		Insert(ctx context.Context, data *SchedulingType) (sql.Result, error)
		FindOne(ctx context.Context, id string) (*SchedulingType, error)
		Update(ctx context.Context, data *SchedulingType) error
		Delete(ctx context.Context, id string) error
		FindCount(ctx context.Context, countBuilder squirrel.SelectBuilder) (int64, error)
		FindList(ctx context.Context, rowBuilder squirrel.SelectBuilder, current, pageSize int64) ([]*SchedulingType, error)
		RowBuilder() squirrel.SelectBuilder
		CountBuilder(field string) squirrel.SelectBuilder
		SumBuilder(field string) squirrel.SelectBuilder
		TransCtx(ctx context.Context, fn func(ctx context.Context, sqlx sqlx.Session) error) error
		FindListByTenantId(current, pageSize int64, tenantId string) (*[]SchedulingType, error)
		CountByTenantId(tenantId string) int64
	}

	defaultSchedulingTypeModel struct {
		sqlc.CachedConn
		table string
	}

	SchedulingType struct {
		Id          string         `db:"id"`           // 排班类型ID
		CreatedAt   time.Time      `db:"created_at"`   // 创建时间
		UpdatedAt   sql.NullTime   `db:"updated_at"`   // 更新时间
		CreatedName string         `db:"created_name"` // 创建人
		UpdatedName sql.NullString `db:"updated_name"` // 更新人
		Name        string         `db:"name"`         // 排班名称
		StartTime   string         `db:"start_time"`   // 开始时间
		EndTime     string         `db:"end_time"`     // 结束时间
		Remark      sql.NullString `db:"remark"`       // 备注
		TenantId    string         `db:"tenant_id"`    // 租户ID
		Colour      sql.NullString `db:"colour"`       // 颜色
	}
)

func newSchedulingTypeModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultSchedulingTypeModel {
	return &defaultSchedulingTypeModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`scheduling_type`",
	}
}

func (m *defaultSchedulingTypeModel) Delete(ctx context.Context, id string) error {
	schedulingTypeIdKey := fmt.Sprintf("%s%v", cacheSchedulingTypeIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, schedulingTypeIdKey)
	return err
}

func (m *defaultSchedulingTypeModel) FindOne(ctx context.Context, id string) (*SchedulingType, error) {
	schedulingTypeIdKey := fmt.Sprintf("%s%v", cacheSchedulingTypeIdPrefix, id)
	var resp SchedulingType
	err := m.QueryRowCtx(ctx, &resp, schedulingTypeIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", schedulingTypeRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, sqlx.ErrNotFound
	default:
		return nil, err
	}

}

func (m *defaultSchedulingTypeModel) Insert(ctx context.Context, data *SchedulingType) (sql.Result, error) {
	schedulingTypeIdKey := fmt.Sprintf("%s%v", cacheSchedulingTypeIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, schedulingTypeRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Id, data.CreatedAt, data.UpdatedAt, data.CreatedName, data.UpdatedName, data.Name, data.StartTime, data.EndTime, data.Remark, data.TenantId, data.Colour)
	}, schedulingTypeIdKey)
	return ret, err
}

func (m *defaultSchedulingTypeModel) Update(ctx context.Context, data *SchedulingType) error {
	schedulingTypeIdKey := fmt.Sprintf("%s%v", cacheSchedulingTypeIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, schedulingTypeRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.CreatedAt, data.UpdatedAt, data.CreatedName, data.UpdatedName, data.Name, data.StartTime, data.EndTime, data.Remark, data.TenantId, data.Colour, data.Id)
	}, schedulingTypeIdKey)
	return err
}

func (m *defaultSchedulingTypeModel) RowBuilder() squirrel.SelectBuilder {
	return squirrel.Select(schedulingTypeRows).From(m.table)
}

func (m *defaultSchedulingTypeModel) CountBuilder(field string) squirrel.SelectBuilder {
	return squirrel.Select("COUNT(" + field + ")").From(m.table)
}

func (m *defaultSchedulingTypeModel) SumBuilder(field string) squirrel.SelectBuilder {
	return squirrel.Select("IFNULL(SUM(" + field + "),0)").From(m.table)
}

func (m *defaultSchedulingTypeModel) FindCount(ctx context.Context, countBuilder squirrel.SelectBuilder) (int64, error) {

	query, values, err := countBuilder.ToSql()
	if err != nil {
		return 0, err
	}

	var resp int64
	err = m.QueryRowNoCacheCtx(ctx, &resp, query, values...)
	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return 0, nil
	default:
		return 0, err
	}
}

func (m *defaultSchedulingTypeModel) FindList(ctx context.Context, rowBuilder squirrel.SelectBuilder, current, pageSize int64) ([]*SchedulingType, error) {

	if current < 1 {
		current = 1
	}
	offset := (current - 1) * pageSize

	query, values, err := rowBuilder.Offset(uint64(offset)).Limit(uint64(pageSize)).ToSql()
	if err != nil {
		return nil, err
	}

	var resp []*SchedulingType
	err = m.QueryRowsNoCacheCtx(ctx, &resp, query, values...)
	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return nil, nil
	default:
		return nil, err
	}
}

func (m *defaultSchedulingTypeModel) TransCtx(ctx context.Context, fn func(ctx context.Context, sqlx sqlx.Session) error) error {
	return m.Transact(func(s sqlx.Session) error {
		return fn(ctx, s)
	})
}

func (m *defaultSchedulingTypeModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheSchedulingTypeIdPrefix, primary)
}

func (m *defaultSchedulingTypeModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", schedulingTypeRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultSchedulingTypeModel) tableName() string {
	return m.table
}


func (m *defaultSchedulingTypeModel) FindListByTenantId(current, pageSize int64, tenantId string) (*[]SchedulingType, error) {
	var resp []SchedulingType
	var where string
	if len(tenantId) != 0 {
		where += fmt.Sprintf("AND %s = '%s'", "tenant_id", tenantId)
	}

	query := fmt.Sprintf("select %s from %s where 1=1  %s  ORDER BY created_at DESC limit ?,? ", schedulingTypeRows, m.table, where)
	err := m.CachedConn.QueryRowsNoCache(&resp, query, (current-1)*pageSize, pageSize)

	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, sqlc.ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSchedulingTypeModel) CountByTenantId(tenantId string) int64 {
	var count int64
	var where string
	if len(tenantId) != 0 {
		where += fmt.Sprintf("AND %s = '%s'", "tenant_id", tenantId)
	}
	query := fmt.Sprintf("SELECT count(*) as count from %s where 1=1  %s", m.table, where)
	err := m.CachedConn.QueryRowNoCache(&count, query)
	switch err {
	case nil:
		return count
	case sqlc.ErrNotFound:
		return 0
	default:
		return 0
	}
}
