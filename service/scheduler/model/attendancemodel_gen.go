// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.2

package model

import (
	"context"
	"database/sql"
	"fmt"
	"github.com/Masterminds/squirrel"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	attendanceFieldNames          = builder.RawFieldNames(&Attendance{})
	attendanceRows                = strings.Join(attendanceFieldNames, ",")
	attendanceRowsExpectAutoSet   = strings.Join(stringx.Remove(attendanceFieldNames, "`create_at`", "`create_time`", "`update_at`", "`update_time`"), ",")
	attendanceRowsWithPlaceHolder = strings.Join(stringx.Remove(attendanceFieldNames, "`id`", "`create_at`", "`create_time`", "`update_at`", "`update_time`"), "=?,") + "=?"

	cacheAttendanceIdPrefix = "cache:attendance:id:"
)

type (
	attendanceModel interface {
		Insert(ctx context.Context, data *Attendance) (sql.Result, error)
		FindOne(ctx context.Context, id string) (*Attendance, error)
		FindOneByUserIdAndDate(ctx context.Context, date, userId, tenantId string) (*Attendance, error)
		FindOneDayByDate(ctx context.Context, date, userId, tenantId string) (*Attendance, error)
		Update(ctx context.Context, data *Attendance) error
		Delete(ctx context.Context, id string) error
		FindCount(ctx context.Context, countBuilder squirrel.SelectBuilder) (int64, error)
		FindList(ctx context.Context, rowBuilder squirrel.SelectBuilder, current, pageSize int64) ([]*Attendance, error)
		RowBuilder() squirrel.SelectBuilder
		CountBuilder(field string) squirrel.SelectBuilder
		SumBuilder(field string) squirrel.SelectBuilder
		TransCtx(ctx context.Context, fn func(ctx context.Context, sqlx sqlx.Session) error) error
	}

	defaultAttendanceModel struct {
		sqlc.CachedConn
		table string
	}

	Attendance struct {
		Id           string         `db:"id"`             // 考勤ID
		Name         string         `db:"name"`           // 考勤人
		UserId       string         `db:"user_id"`        // 用户ID
		Date         string         `db:"date"`           // 考勤日期
		CheckInTime  sql.NullInt64  `db:"check_in_time"`  // 签到时间
		CheckInPhoto string         `db:"check_in_photo"` // 签到图片
		SignOffTime  sql.NullInt64  `db:"sign_off_time"`  // 签退时间
		SignOffPhoto string         `db:"sign_off_photo"` // 签退图片
		State        int64          `db:"state"`          // 考勤状态 上班打卡:1,打卡正常:2,打卡异常:3
		CreatedAt    time.Time      `db:"created_at"`     // 创建时间
		UpdatedAt    sql.NullTime   `db:"updated_at"`     // 更新时间
		DeletedAt    sql.NullTime   `db:"deleted_at"`     // 删除时间
		CreatedName  string         `db:"created_name"`   // 创建人
		UpdatedName  sql.NullString `db:"updated_name"`   // 更新人
		DeletedName  sql.NullString `db:"deleted_name"`   // 删除人
		TenantId     string         `db:"tenant_id"`      // 租户ID
	}
)

func newAttendanceModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultAttendanceModel {
	return &defaultAttendanceModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`attendance`",
	}
}

func (m *defaultAttendanceModel) Delete(ctx context.Context, id string) error {
	attendanceIdKey := fmt.Sprintf("%s%v", cacheAttendanceIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, attendanceIdKey)
	return err
}

func (m *defaultAttendanceModel) FindOne(ctx context.Context, id string) (*Attendance, error) {
	attendanceIdKey := fmt.Sprintf("%s%v", cacheAttendanceIdPrefix, id)
	var resp Attendance
	err := m.QueryRowCtx(ctx, &resp, attendanceIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", attendanceRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, sqlx.ErrNotFound
	default:
		return nil, err
	}

}
func (m *defaultAttendanceModel) FindOneByUserIdAndDate(ctx context.Context, date, userId, tenantId string) (*Attendance, error) {

	var resp Attendance

	query := fmt.Sprintf("select %s from %s where `deleted_at` is null AND `date` = ?  AND `user_id` = ?  AND `tenant_id` = ? limit 1", attendanceRows, m.table)

	err := m.CachedConn.QueryRowNoCacheCtx(ctx, &resp, query, date, userId, tenantId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, sqlc.ErrNotFound
	default:
		return nil, err
	}

}

func (m *defaultAttendanceModel) FindOneDayByDate(ctx context.Context, date, userId, tenantId string) (*Attendance, error) {

	var resp Attendance

	query := fmt.Sprintf("select %s from %s where `deleted_at` is null AND `date` = ? AND `user_id` = ?  AND `tenant_id` = ? limit 1", attendanceRows, m.table)

	err := m.CachedConn.QueryRowNoCacheCtx(ctx, &resp, query, date, userId, tenantId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, sqlc.ErrNotFound
	default:
		return nil, err
	}

}


func (m *defaultAttendanceModel) Insert(ctx context.Context, data *Attendance) (sql.Result, error) {
	attendanceIdKey := fmt.Sprintf("%s%v", cacheAttendanceIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, attendanceRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Id, data.Name, data.UserId, data.Date, data.CheckInTime, data.CheckInPhoto, data.SignOffTime, data.SignOffPhoto, data.State, data.CreatedAt, data.UpdatedAt, data.DeletedAt, data.CreatedName, data.UpdatedName, data.DeletedName, data.TenantId)
	}, attendanceIdKey)
	return ret, err
}

func (m *defaultAttendanceModel) Update(ctx context.Context, data *Attendance) error {
	attendanceIdKey := fmt.Sprintf("%s%v", cacheAttendanceIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, attendanceRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Name, data.UserId, data.Date, data.CheckInTime, data.CheckInPhoto, data.SignOffTime, data.SignOffPhoto, data.State, data.CreatedAt, data.UpdatedAt, data.DeletedAt, data.CreatedName, data.UpdatedName, data.DeletedName, data.TenantId, data.Id)
	}, attendanceIdKey)
	return err
}

func (m *defaultAttendanceModel) RowBuilder() squirrel.SelectBuilder {
	return squirrel.Select(attendanceRows).From(m.table)
}

func (m *defaultAttendanceModel) CountBuilder(field string) squirrel.SelectBuilder {
	return squirrel.Select("COUNT(" + field + ")").From(m.table)
}

func (m *defaultAttendanceModel) SumBuilder(field string) squirrel.SelectBuilder {
	return squirrel.Select("IFNULL(SUM(" + field + "),0)").From(m.table)
}

func (m *defaultAttendanceModel) FindCount(ctx context.Context, countBuilder squirrel.SelectBuilder) (int64, error) {

	query, values, err := countBuilder.ToSql()
	if err != nil {
		return 0, err
	}

	var resp int64
	err = m.QueryRowNoCacheCtx(ctx, &resp, query, values...)
	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return 0, nil
	default:
		return 0, err
	}
}

func (m *defaultAttendanceModel) FindList(ctx context.Context, rowBuilder squirrel.SelectBuilder, current, pageSize int64) ([]*Attendance, error) {

	if current < 1 {
		current = 1
	}
	offset := (current - 1) * pageSize

	query, values, err := rowBuilder.Offset(uint64(offset)).Limit(uint64(pageSize)).ToSql()
	if err != nil {
		return nil, err
	}

	var resp []*Attendance
	err = m.QueryRowsNoCacheCtx(ctx, &resp, query, values...)
	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return nil, nil
	default:
		return nil, err
	}
}

func (m *defaultAttendanceModel) TransCtx(ctx context.Context, fn func(ctx context.Context, sqlx sqlx.Session) error) error {
	return m.Transact(func(s sqlx.Session) error {
		return fn(ctx, s)
	})
}

func (m *defaultAttendanceModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheAttendanceIdPrefix, primary)
}

func (m *defaultAttendanceModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", attendanceRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAttendanceModel) tableName() string {
	return m.table
}
